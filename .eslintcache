[{"/Volumes/butbut/code/boxtest/src/index.tsx":"1","/Volumes/butbut/code/boxtest/src/reportWebVitals.ts":"2","/Volumes/butbut/code/boxtest/src/App.tsx":"3","/Volumes/butbut/code/boxtest/src/components/loaderService.ts":"4","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts":"5","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts":"6","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts":"7","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts":"8","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts":"9","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"10","/Volumes/butbut/code/boxtest/src/components/Help.tsx":"11","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx":"12","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx":"13","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx":"14","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx":"15","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts":"16","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx":"17","/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx":"18","/Volumes/butbut/code/boxtest/src/components/3box/Box.tsx":"19","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"20","/Volumes/butbut/code/boxtest/src/components/Import/BoxImporter.tsx":"21","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx":"22","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx":"23","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx":"24","/Volumes/butbut/code/boxtest/src/components/git/UI/RepoName.tsx":"25","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx":"26","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx":"27","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx":"28","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx":"29","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx":"30","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx":"31","/Volumes/butbut/code/boxtest/src/components/Files/FileHelp.tsx":"32","/Volumes/butbut/code/boxtest/src/components/git/UI/GitHelp.tsx":"33","/Volumes/butbut/code/boxtest/src/components/IPFS/ExportHelp.tsx":"34","/Volumes/butbut/code/boxtest/src/components/Import/ImportHelp.tsx":"35","/Volumes/butbut/code/boxtest/src/components/IPFS/ConfigHelp.tsx":"36"},{"size":521,"mtime":1608219890000,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1607789583000,"results":"39","hashOfConfig":"38"},{"size":6949,"mtime":1609951551000,"results":"40","hashOfConfig":"38"},{"size":204,"mtime":1607853812000,"results":"41","hashOfConfig":"38"},{"size":10801,"mtime":1609782597000,"results":"42","hashOfConfig":"38"},{"size":5773,"mtime":1609837821000,"results":"43","hashOfConfig":"38"},{"size":9168,"mtime":1609775800000,"results":"44","hashOfConfig":"38"},{"size":2942,"mtime":1608634862000,"results":"45","hashOfConfig":"38"},{"size":2345,"mtime":1609775500000,"results":"46","hashOfConfig":"38"},{"size":2180,"mtime":1609669231000,"results":"47","hashOfConfig":"38"},{"size":615,"mtime":1607892075000,"results":"48","hashOfConfig":"38"},{"size":1885,"mtime":1609668555000,"results":"49","hashOfConfig":"38"},{"size":2258,"mtime":1609755183000,"results":"50","hashOfConfig":"38"},{"size":3339,"mtime":1609835004000,"results":"51","hashOfConfig":"38"},{"size":387,"mtime":1609668686000,"results":"52","hashOfConfig":"38"},{"size":2997,"mtime":1607792561000,"results":"53","hashOfConfig":"38"},{"size":397,"mtime":1607792561000,"results":"54","hashOfConfig":"38"},{"size":3170,"mtime":1609782652000,"results":"55","hashOfConfig":"38"},{"size":3760,"mtime":1609949078000,"results":"56","hashOfConfig":"38"},{"size":4100,"mtime":1609774574000,"results":"57","hashOfConfig":"38"},{"size":4683,"mtime":1609766564000,"results":"58","hashOfConfig":"38"},{"size":1743,"mtime":1609768846000,"results":"59","hashOfConfig":"38"},{"size":1067,"mtime":1608204074000,"results":"60","hashOfConfig":"38"},{"size":980,"mtime":1609767756000,"results":"61","hashOfConfig":"38"},{"size":1760,"mtime":1609350948000,"results":"62","hashOfConfig":"38"},{"size":1301,"mtime":1609667667000,"results":"63","hashOfConfig":"38"},{"size":2806,"mtime":1609768417000,"results":"64","hashOfConfig":"38"},{"size":2279,"mtime":1609766116000,"results":"65","hashOfConfig":"38"},{"size":2637,"mtime":1609775920000,"results":"66","hashOfConfig":"38"},{"size":1585,"mtime":1609755215000,"results":"67","hashOfConfig":"38"},{"size":1246,"mtime":1609667762000,"results":"68","hashOfConfig":"38"},{"size":815,"mtime":1609766107000,"results":"69","hashOfConfig":"38"},{"size":625,"mtime":1609766112000,"results":"70","hashOfConfig":"38"},{"size":1062,"mtime":1609766130000,"results":"71","hashOfConfig":"38"},{"size":1061,"mtime":1609766124000,"results":"72","hashOfConfig":"38"},{"size":913,"mtime":1609766127000,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"19py97w",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"76"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"76"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"76"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"76"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"76"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"76"},"/Volumes/butbut/code/boxtest/src/index.tsx",[],["177","178"],"/Volumes/butbut/code/boxtest/src/reportWebVitals.ts",[],"/Volumes/butbut/code/boxtest/src/App.tsx",["179","180","181","182","183","184","185","186","187","188","189","190"],"import React, { createRef, useEffect, useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Container, Tabs, Tab, Button } from \"react-bootstrap\";\nimport Box from \"3box\";\nimport Web3Modal from \"web3modal\";\nimport { getAddress } from \"@ethersproject/address\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport { FileExplorer } from \"./components/Files/FileExplorer\";\nimport { GitControls } from \"./components/git/UI/gitControls\";\n\nimport { IPFSView } from \"./components/IPFS/IPFSView\";\nimport { WorkSpacePlugin } from \"./components/Remix/Client\";\nimport { gitService } from \"./components/git/gitService\";\n\nimport { LsFileService } from \"./components/Files/FileService\";\nimport { FileTools } from \"./components/Files/FileTools\";\nimport { DiffView } from \"./components/git/diff/Diff\";\nimport { IPFSService } from \"./components/IPFS/IPFSService\";\nimport { BoxService } from \"./components/3box/3boxService\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Importer } from \"./components/Import/importer\";\nimport Loading from \"react-fullscreen-loading\";\nimport { LoaderService } from \"./components/loaderService\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { Help } from \"./components/Help\";\nimport { RepoName } from \"./components/git/UI/RepoName\";\nimport { LocalIPFSStorage } from \"./components/LocalStorage/LocalStorage\";\nimport { ConnectionWarning } from \"./components/ConnectionWarning\";\nimport { IPFSConfig } from \"./components/IPFS/IPFSConfig\";\nimport { GitStatus } from \"./components/git/UI/gitStatus\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFile, faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FileHelp } from \"./components/Files/FileHelp\";\nimport { GitHelp } from \"./components/git/UI/GitHelp\";\nimport { ExportHelp } from \"./components/IPFS/ExportHelp\";\nimport { ImportHelp } from \"./components/Import/ImportHelp\";\nimport { ConfigHelp } from \"./components/IPFS/ConfigHelp\";\n\nexport var fsConfig: any; //= new FS(\"remix-storage-config\");\nexport var fsConfigPromise: any; // = fsConfig.promises;\n\nexport var fsNoPromise: any; // = new FS(\"remix-workspace\");\nexport var fs: any; // = fsNoPromise.promises;\nexport const gitservice: gitService = new gitService();\nexport const client: WorkSpacePlugin = new WorkSpacePlugin();\nexport const fileservice: LsFileService = new LsFileService();\nexport const ipfservice: IPFSService = new IPFSService();\nexport const boxservice: BoxService = new BoxService();\nexport const loaderservice: LoaderService = new LoaderService();\nexport const localipfsstorage: LocalIPFSStorage = new LocalIPFSStorage();\n\nexport const resetFileSystem = async (wipe: boolean = false) => {\n  try {\n    fsConfig = new FS(\"remix-storage-config\");\n    fsConfigPromise = fsConfig.promises;\n    fsNoPromise = new FS(\"remix-workspace\", { wipe: wipe });\n    fs = fsNoPromise.promises;\n    localipfsstorage.init();\n    client.clientLoaded.subscribe(async (load: boolean) => {\n      if (load) await fileservice.syncStart();\n    });\n    return true;\n    //await fileservice.showFiles();\n  } catch (e) {\n    console.log(\"FS WARNING\");\n    return false;\n  }\n};\n\nexport const providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"83d4d660ce3546299cbe048ed95b6fad\",\n    },\n  },\n};\n\nfunction App() {\n  const [activeKey, setActiveKey] = useState<string>(\"files\");\n  const loading: boolean | undefined = useBehaviorSubject(\n    loaderservice.loading\n  );\n  const [canLoad, setCanLoad] = useState<boolean>(false);\n  const repoName = useBehaviorSubject(gitservice.reponameSubject);\n  const canCommit = useBehaviorSubject(gitservice.canCommit);\n  const [confirmShow, setConfirmShow] = React.useState(false);\n\n  gitservice.reponameSubject.subscribe((x) => {}).unsubscribe();\n  gitservice.canCommit.subscribe((x) => {}).unsubscribe();\n  loaderservice.loading.subscribe((x) => {}).unsubscribe();\n\n  const setTab = async (key: string) => {\n    setActiveKey(key);\n    if (key == \"diff\") {\n      //loaderservice.setLoading(true);\n      await gitservice.diffFiles();\n      //loaderservice.setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    var request = window.indexedDB.open(\"MyTestDatabase\", 3);\n    console.log(request);\n    request.onerror = function (event) {\n      console.log(\"DB not supported\");\n      setCanLoad(false);\n      return false;\n    };\n    request.onsuccess = function (event) {\n      console.log(\"DB supported\");\n      resetFileSystem(false).then((x) => setCanLoad(x));\n    };\n\n    //setCanLoad(r)\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!canLoad ? (\n        <ConnectionWarning canLoad={canLoad} />\n      ) : (\n        <Container fluid>\n          {loading ? (\n            <Loading loading background=\"#2ecc71\" loaderColor=\"#3498db\" />\n          ) : (\n            <></>\n          )}\n          <RepoName />\n          <FontAwesomeIcon icon={faExclamationTriangle}></FontAwesomeIcon><a className='small pl-2' href='https://github.com/bunsenstraat/remix-storage-plugin/issues' target='_blank'>Submit issues</a>\n          <div className=\"nav navbar bg-light p-3\"><div><div className=\"float-left pr-1 m-0 text-white\">dGit</div> | repo: {repoName}</div></div>\n          \n          <GitStatus></GitStatus>\n          <br></br>\n          {canCommit ? (\n            <></>\n          ) : (\n            <div className=\"alert alert-warning w-25\">\n              You are in a detached state.<br></br>\n            </div>\n          )}\n          <ToastContainer position=\"top-right\" />\n          \n          \n          <Tabs\n            activeKey={activeKey}\n            onSelect={async (k) => await setTab(k || \"files\")}\n          >\n            <Tab className=\"mt-4 ml-1\" eventKey=\"files\" title=\"FILES\">\n              <FileExplorer setTab={setTab} />\n              <FileTools />\n              <FileHelp/>\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"git\" title=\"GIT\">\n              <GitControls />\n              <GitHelp/>\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"export\" title=\"EXPORT\">\n              <IPFSView />\n              <ExportHelp/>\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"import\" title=\"IMPORT\">\n              <Importer />\n              <ImportHelp></ImportHelp>\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"diff\" title=\"DIFF\">\n              <DiffView />\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"config\" title=\"SETTINGS\">\n              <IPFSConfig />\n              <ConfigHelp/>\n            </Tab>\n            <Tab className=\"mt-4 ml-1\" eventKey=\"help\" title=\"HELP\">\n              <Help />\n            </Tab>\n          </Tabs>\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Volumes/butbut/code/boxtest/src/components/loaderService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts",["191","192","193","194","195","196","197","198"],"import { toast } from \"react-toastify\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport App, {\n  resetFileSystem,\n  fileservice,\n  fsNoPromise,\n  gitservice,\n  loaderservice,\n} from \"../../App\";\nimport { client } from \"../../App\";\nimport path from \"path\";\nimport { fs } from \"../../App\";\nimport { removeSlash, jsonObjectFromFileList } from \"./utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileExplorerNode, fileStatusResult, statusMatrix } from \"./types\";\n\nexport const fileStatuses = [\n  [\"new,untracked\", 0, 2, 0], // new, untracked\n  [\"added,staged\", 0, 2, 2], //\n  [\"added,staged, with unstaged changes\", 0, 2, 3], // added, staged, with unstaged changes\n  [\"unmodified\", 1, 1, 1], // unmodified\n  [\"modified,unstaged\", 1, 2, 1], // modified, unstaged\n  [\"modified,staged\", 1, 2, 2], // modified, staged\n  [\"modified,staged,with unstaged changes\", 1, 2, 3], // modified, staged, with unstaged changes\n  [\"deleted,unstaged\", 1, 0, 1], // deleted, unstaged\n  [\"deleted,staged\", 1, 0, 0],\n  [\"deleted\", 1, 1, 0], // deleted, staged\n  [\"unmodified\", 1, 1, 3],\n  [\"deleted,not in git\", 0, 0, 3],\n];\n\nconst statusmatrix: statusMatrix[] = fileStatuses.map((x: any) => {\n  return {\n    matrix: x.shift().split(\",\"),\n    status: x,\n  };\n});\nconsole.log(\"matrix\", statusmatrix);\n\nexport class LsFileService {\n  filetreecontent = new BehaviorSubject<fileExplorerNode>({ children: [] });\n  confirmDeletion = new BehaviorSubject<boolean | undefined>(undefined);\n  fileStatusResult: fileStatusResult[] = [];\n\n  constructor() {}\n\n  async addFileFromBrowser(file: string) {\n    try {\n      const content = await client.call(\"fileManager\", \"readFile\", file);\n      console.log(content);\n      await this.addFile(file, content);\n      //return content\n    } catch (e) {}\n  }\n\n  // RESET FUNCTIONS\n\n  async clearDb() {\n    const req = indexedDB.deleteDatabase(\"remix-workspace\");\n    let me = this;\n    req.onsuccess = async function () {\n      toast(\"Deleted database successfully\");\n      //await me.gitlog()\n\n      await me.showFiles();\n      await gitservice.init();\n    };\n  }\n\n  async clearFilesInWorkSpace() {\n    await client.disableCallBacks();\n    await this.clearFilesInIde();\n    await this.clearFilesInWorkingDirectory();\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async clearFilesInIde() {\n    var dirs = await client.call(\"fileManager\", \"readdir\", \"/\");\n    console.log(dirs);\n    let files = await this.getDirectoryFromIde(\"/\");\n    console.log(\"FILES\", files);\n    for (let i = 0; i < files.length; i++) {\n      try {\n        await client.call(\"fileManager\", \"remove\", files[i]);\n      } catch (e) {}\n    }\n    files = await this.getDirectoryFromIde(\"/\", true);\n    console.log(\"DIRECTORY\", files);\n    for (let i = 0; i < files.length; i++) {\n      try {\n        await client.call(\"fileManager\", \"remove\", files[i]);\n      } catch (e) {}\n    }\n    return true;\n  }\n\n  async clearFilesInWorkingDirectory() {\n    // files in FS\n    const files = await gitservice.getStatusMatrixFiles();\n    for (let i = 0; i < files.length; i++) {\n      await this.rmFile(files[i]);\n    }\n  }\n\n  async startNewRepo() {\n    await resetFileSystem(true);\n    await this.syncFromBrowser();\n    await gitservice.init();\n    await gitservice.clearRepoName();\n  }\n\n  async syncStart() {\n    //await resetFileSystem();\n    await this.clearFilesInWorkingDirectory();\n    await this.syncFromBrowser();\n    await gitservice.init();\n  }\n\n  async clearLocalAndSyncFromBrowser() {\n    await this.clearFilesInWorkingDirectory();\n    await this.syncFromBrowser();\n  }\n\n  async clearAll() {\n    await this.clearFilesInWorkSpace();\n    await resetFileSystem(true);\n    await gitservice.clearRepoName();\n  }\n\n  // SYNC FUNCTIONS\n\n  async syncToBrowser() {\n    //this.showspinner();\n    loaderservice.setLoading(true);\n    await client.disableCallBacks();\n    let filesToSync = [];\n    // first get files in current commit, not the files in the FS because they can be changed or unstaged\n\n    let filescommited = await gitservice.listFiles();\n    const currentcommitoid = await gitservice.getCommitFromRef(\"HEAD\");\n    for (let i = 0; i < filescommited.length; i++) {\n      const ob = {\n        path: filescommited[i],\n        content: await gitservice.getFileContentCommit(\n          filescommited[i],\n          currentcommitoid\n        ),\n      };\n      console.log(\"sync file\", ob);\n      try {\n        await client.call(\"fileManager\", \"setFile\", ob.path, ob.content);\n      } catch (e) {\n        console.log(\"could not load file\", e);\n        loaderservice.setLoading(false);\n      }\n      filesToSync.push(ob);\n    }\n    console.log(\"files to sync\", filesToSync);\n\n    await this.showFiles();\n    await client.enableCallBacks();\n    toast.success(\"Import successfull\");\n    loaderservice.setLoading(false);\n  }\n\n  async syncFromBrowser() {\n    await client.disableCallBacks();\n    /// remove the files in the working area\n\n    /// get files from ID and sync them\n    let files = await this.getDirectoryFromIde(\"/\");\n\n    console.log(files);\n    for (let i = 0; i < files.length; i++) {\n      await this.addFileFromBrowser(files[i]);\n    }\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async addFile(file: string, content: string) {\n    console.log(\"add file \", file);\n    const directories = path.dirname(file);\n    await this.createDirectoriesFromString(directories);\n    console.log(fs);\n    await fs.writeFile(\"/\" + file, content);\n  }\n\n  async rmFile(file: string) {\n    try {\n      console.log(\"rm file \", file);\n      await fs.unlink(\"/\" + file);\n    } catch (e) {}\n    //await this.showFiles();\n  }\n\n  async createDirectoriesFromString(strdirectories: string) {\n    const ignore = [\".\", \"/.\", \"\"];\n    console.log(\"directory\", strdirectories, ignore.indexOf(strdirectories));\n    if (ignore.indexOf(strdirectories) > -1) return false;\n    let directories: string[] = strdirectories.split(\"/\");\n    console.log(\"create directory\", directories);\n    for (let i = 0; i < directories.length; i++) {\n      console.log(directories[i]);\n      let previouspath = \"\";\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      console.log(\"creating \", finalPath);\n      try {\n        await fs.mkdir(finalPath);\n      } catch (e) {\n        // console.log(e)\n      }\n    }\n  }\n\n  async viewFile(args: any) {\n    const filename = args;\n    console.log(\"view file\", filename);\n    //$(args[0].currentTarget).data('file')\n    try {\n      await client.call(\"fileManager\", \"open\", `${removeSlash(filename)}`);\n    } catch (e) {\n      toast.error(\"file does not exist in Remix\",{autoClose:false});\n    }\n  }\n\n  async getFileStatusMatrix() {\n    this.fileStatusResult = await gitservice.statusMatrix();\n    console.log(\"STATUS MATRIX\", this.fileStatusResult);\n    // let filesinstaging = await gitservice.listFilesInstaging();\n    // console.log(\"FILES IN STAGING\", filesinstaging);\n    // let filesingit = await gitservice.listFiles();\n    // console.log(\"FILES IN GIT\", filesingit);\n\n    this.fileStatusResult.map((m) => {\n      statusmatrix.map((sm) => {\n        if (JSON.stringify(sm.status) === JSON.stringify(m.status)) {\n          console.log(m, sm);\n          m.statusNames = sm.matrix;\n        }\n      });\n    });\n    //console.log(\"file status\", this.fileStatusResult);\n  }\n\n  getFilesByStatus(status: string) {\n    let count = 0;\n    console.log(\"STATUS?\", status);\n    this.fileStatusResult.map((m) => {\n      console.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(status) > -1) {\n          count++;\n          console.log(\"COUNT\", count);\n        }\n      }\n    });\n    return count;\n  }\n\n  getFileStatusForFile(filename: string) {\n    //console.log(\"checking file status\", filename);\n    for (let i: number = 0; i < this.fileStatusResult.length; i++) {\n      if (this.fileStatusResult[i].filename === filename)\n        return this.fileStatusResult[i].statusNames;\n    }\n  }\n\n  async showFiles() {\n    //$('#files').show()\n    //$('#diff-container').hide()\n    let files = await gitservice.getStatusMatrixFiles(); //await this.getDirectory(\"/\");\n    console.log(\"get directory result\", files);\n\n    try {\n      await this.getFileStatusMatrix();\n      let jsonfiles = await jsonObjectFromFileList(files);\n      console.log(\"files\", jsonfiles);\n      this.filetreecontent.next(jsonfiles);\n    } catch (e) {\n      console.log(e);\n    }\n    try {\n      await gitservice.gitlog();\n    } catch (e) {}\n    try {\n      await gitservice.getBranches();\n    } catch (e) {}\n    await gitservice.checkForFilesCommmited()\n    return true;\n  }\n\n  async getDirectory(dir: string) {\n    console.log(\"get directory\");\n    let result: string[] = [];\n    const files = await fs.readdir(`${dir}`);\n    console.log(files);\n\n    for (let i = 0; i < files.length; i++) {\n      const fi = files[i];\n      if (typeof fi !== \"undefined\") {\n        // console.log('looking into ', fi, dir)\n        if (dir === \"/\") dir = \"\";\n        const type = await fs.stat(`${dir}/${fi}`);\n        if (type.type === \"dir\") {\n          // console.log('is directory, so get ', `${dir}/${fi}`)\n          result = [...result, ...(await this.getDirectory(`${dir}/${fi}`))];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          result.push(`${dir}/${fi}`);\n        }\n      }\n    }\n    console.log(result);\n    return result;\n  }\n\n  async getDirectoryFromIde(dir: string, onlyDirectories: boolean = false) {\n    console.log(\"get directory\", dir);\n    let result: string[] = [];\n    const files = await client.call(\"fileManager\", \"readdir\", dir);\n    console.log(files);\n\n    let fileArray = Object.keys(files).map(function (i: any) {\n      // do something with person\n      return { filename: i, data: files[i] };\n    });\n\n    console.log(fileArray);\n\n    for (let i = 0; i < fileArray.length; i++) {\n      const fi: any = fileArray[i];\n      if (typeof fi !== \"undefined\") {\n        //console.log('looking into ', fi, dir)\n        //if (dir === \"/\") dir = \"\";\n        //dir = removeSlash(dir)\n        const type = fi.data.isDirectory;\n        //console.log(\"type\",type)\n        if (type === true) {\n          //console.log('is directory, so get ', `${fi.filename}`)\n          if (onlyDirectories === true) result.push(`browser/${fi.filename}`);\n          result = [\n            ...result,\n            ...(await this.getDirectoryFromIde(\n              `${fi.filename}`,\n              onlyDirectories\n            )),\n          ];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          if (onlyDirectories === false) result.push(`browser/${fi.filename}`);\n        }\n      }\n    }\n\n    console.log(result);\n    return result;\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts",[],"/Volumes/butbut/code/boxtest/src/components/git/gitService.ts",["199","200"],"import git, { ReadCommitResult } from \"isomorphic-git\";\nimport { fileservice, fs, fsNoPromise } from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport path from \"path\";\nimport { removeSlash } from \"../Files/utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileStatuses } from \"../Files/FileService\";\n\nexport interface diffObject {\n  originalFileName: string;\n  updatedFileName: string;\n  past: string;\n  current: string;\n}\nexport class gitService {\n  commits = new BehaviorSubject<ReadCommitResult[] | undefined>(undefined);\n  branch = new BehaviorSubject<string>(\"\");\n  branches = new BehaviorSubject<string[] | undefined>(undefined);\n  diffResult = new BehaviorSubject<diffObject[] | undefined>(undefined);\n  reponameSubject = new BehaviorSubject<string>(\"\");\n  canCommit = new BehaviorSubject<boolean>(true);\n  canExport = new BehaviorSubject<boolean>(false);\n  reponame = \"\"\n\n  constructor() {\n    //this.init();\n  }\n\n  async init() {\n    await git.init({\n      fs: fsNoPromise,\n      dir: \"/\",\n      defaultBranch: \"master\",\n    });\n    //toast.info(`Git version ${git.version()}`);\n\n    await fileservice.showFiles();\n  }\n\n  async clearRepoName(){\n    this.reponameSubject.next(\"\")\n  }\n\n  async addToGit(args: string | undefined) {\n    if (args !== undefined) {\n      //console.log('ADD TO GIT', $(args[0].currentTarget).data('file'))\n      const filename = args; // $(args[0].currentTarget).data('file')\n      const basename = path.basename(filename);\n      const directory = path.dirname(filename);\n      console.log(\"will add\", basename, directory);\n\n      await git.add({\n        fs: fsNoPromise,\n        dir: \"/\",\n        filepath: removeSlash(filename),\n      });\n      await fileservice.showFiles();\n      toast.success(`Added file ${filename}`);\n    }\n  }\n\n  async gitrm(args: any) {\n    //console.log('RM GIT', $(args[0].currentTarget).data('file'))\n    const filename = args; // $(args[0].currentTarget).data('file')\n\n    await git.remove({\n      fs: fsNoPromise,\n      dir: \"/\",\n      filepath: removeSlash(filename),\n    });\n    await fileservice.showFiles();\n    toast.success(`Removed file file ${filename}`);\n  }\n\n  async checkoutfile(args: any) {\n    const filename = \"\"; //$(args[0].currentTarget).data('file')\n    console.log(\"checkout\", filename);\n\n    try {\n      await git.checkout({\n        fs: fsNoPromise,\n        dir: \"/\",\n        filepaths: [`/${filename}`],\n      });\n    } catch (e) {\n      console.log(e);\n      //this.addAlert(\"checkoutMessage\", e)\n    }\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n    await fileservice.syncStart()\n  }\n\n  async checkout(args: string) {\n    const oid = args; //$(args[0].currentTarget).data('oid')\n    console.log(\"checkout\", oid);\n    await fileservice.clearFilesInIde()\n\n    try {\n      await git.checkout({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: oid,\n      });\n\n      this.gitlog();\n    } catch (e) {\n      console.log(e);\n      toast.error(\" \" + e);\n    }\n\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n    await fileservice.syncStart()\n  }\n\n  async getCommits() {\n    console.log(\"get commits\");\n    try {\n      const commits: ReadCommitResult[] = await git.log({\n        fs: fsNoPromise,\n        dir: \"/\",\n        depth: 200,\n      });\n      return commits;\n    } catch (e) {\n      return []\n    }\n  }\n\n  async gitlog() {\n    console.log(\"log\");\n    try {\n      const commits: ReadCommitResult[] = await this.getCommits();\n      this.commits.next(commits);\n      console.log(commits);\n    } catch (e) {\n      this.commits.next([]);\n      console.log(e);\n    }\n\n    await this.showCurrentBranch();\n  }\n\n  async createBranch(name: string = \"\") {\n    const branch = name; //|| $(\"#newbranchname\").val();\n    if (branch)\n      await git.branch({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: branch,\n      });\n\n    fileservice.showFiles();\n  }\n\n  async showCurrentBranch() {\n    try {\n      const branch = await this.currentBranch();\n      const currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      this.branch.next(branch);\n      if (typeof branch === \"undefined\" || branch === \"\") {\n        //toast.warn(`You are in a detached state`);\n        this.branch.next(`HEAD detached at ${currentcommitoid}`);\n        this.canCommit.next(false)\n      } else {\n        this.branch.next(`Branch is: ${branch} at commit ${currentcommitoid}`);\n        this.canCommit.next(true)\n      }\n    } catch (e) {\n      this.branch.next('')\n    }\n  }\n\n  async getLastCommmit() {\n    try {\n      let currentcommitoid = \"\";\n      currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      return currentcommitoid;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async currentBranch() {\n    try {\n      const branch: string =\n        (await git.currentBranch({\n          fs: fsNoPromise,\n          dir: \"/\",\n          fullname: false,\n        })) || \"\";\n      console.log(\"BRANCH\", branch);\n      return branch;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async commit(message: string = \"\") {\n    const sha = await git.commit({\n      fs: fsNoPromise,\n      dir: \"/\",\n      author: {\n        name: \"Remix Workspace\",\n        email: \"\",\n      },\n      message: message, //$('#message').val()\n    });\n    toast.success(`Commited: ${sha}`);\n    await fileservice.showFiles();\n  }\n\n  async getBranches() {\n    let branches: string[] = await git.listBranches({\n      fs: fsNoPromise,\n      dir: \"/\",\n    });\n    this.branches.next(branches);\n  }\n\n  async getCommitFromRef(ref: string) {\n    const commitOid = await git.resolveRef({\n      fs: fsNoPromise,\n      dir: \"/\",\n      ref: ref,\n    });\n    return commitOid;\n  }\n\n  async getFileContentCommit(fullfilename: string, commitOid: string) {\n    let content = \"\";\n    try {\n      const { blob } = await git.readBlob({\n        fs: fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n      content = Buffer.from(blob).toString(\"utf8\");\n    } catch (e) {\n      console.log(e);\n    }\n    return content;\n  }\n\n  async statusMatrix(dir: string = \"/\", ref: string = \"HEAD\") {\n    const matrix = await git\n      .statusMatrix({\n        fs: fsNoPromise,\n        dir: \"/\",\n      })\n      .catch((e) => {});\n\n    let result = (matrix || []).map((x) => {\n      return {\n        filename: `/${x.shift()}`,\n        status: x,\n      };\n    });\n    return result;\n  }\n\n  async getStatusMatrixFiles() {\n    let files = await (await this.statusMatrix()).map((f) => {\n      return f.filename;\n    });\n    return files;\n  }\n\n  async checkForFilesCommmited(){\n    try {\n      await this.listFiles();\n      this.canExport.next(true)\n      return true\n    } catch (e) {\n      this.canExport.next(false)\n      return false;\n    }\n  }\n\n  async listFiles(dir: string = \"/\", ref: string = \"HEAD\") {\n    let filescommited = await git.listFiles({\n      fs: fsNoPromise,\n      dir: dir,\n      ref: ref,\n    });\n    return filescommited;\n  }\n\n  async listFilesInstaging(dir: string = \"/\") {\n    let filesInStaging = await git.listFiles({\n      fs: fsNoPromise,\n      dir: dir,\n    });\n    return filesInStaging;\n  }\n\n  async addAll() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n\n    for (let i: number = 0; i < statuses.length; i++) {\n      await this.addToGit(statuses[i].filename);\n    }\n  }\n\n  async diffFiles() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n    const diffs: diffObject[] = [];\n    for (let i: number = 0; i < statuses.length; i++) {\n      if ((statuses[i].statusNames?.indexOf(\"modified\") || false) > -1) {\n        console.log(statuses[i].statusNames?.indexOf(\"modified\"));\n        const diff: diffObject = await this.diffFile(statuses[i].filename);\n        diffs.push(diff);\n      }\n    }\n    this.diffResult.next(diffs);\n  }\n\n  async diffFile(args: any) {\n    //$('#files').hide()\n    //$('#diff-container').show()\n    console.log(\"DIFF\", args);\n    const fullfilename = args; // $(args[0].currentTarget).data('file')\n    try {\n      const commitOid = await git.resolveRef({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: \"HEAD\",\n      });\n\n      const { blob } = await git.readBlob({\n        fs: fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n\n      const newcontent = await fs.readFile(fullfilename, {\n        encoding: \"utf8\",\n      });\n      const original = Buffer.from(blob).toString(\"utf8\");\n\n      console.log(original);\n      console.log(newcontent);\n      //const filediff = createPatch(filename, original, newcontent); // diffLines(original,newcontent)\n      //console.log(filediff)\n      const filediff: diffObject = {\n        originalFileName: fullfilename,\n        updatedFileName: fullfilename,\n        current: newcontent,\n        past: original,\n      };\n\n      return filediff;\n    } catch (e) {\n      toast(\"Nothing to diff! \" + fullfilename);\n\n      const filediff: diffObject = {\n        originalFileName: \"\",\n        updatedFileName: \"\",\n        current: \"\",\n        past: \"\",\n      };\n      return filediff;\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts",[],"/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts",["201"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport {\n  gitservice,\n  ipfservice,\n  loaderservice,\n  localipfsstorage,\n} from \"../../App\";\n\nexport interface boxObject {\n  key?: string;\n  cid?: string;\n  datestored?: string | number | Date;\n  datecommit?: number | string | Date;\n  timestamp: number;\n  ref?: string;\n  message?: string;\n  links?: string;\n}\nexport class BoxService {\n  status = new BehaviorSubject<boolean>(false);\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  box: any;\n  space: any;\n\n  showspinner() {}\n\n  hidespinner() {}\n  // 3BOX connection\n\n  async setSpace(space: any) {\n    this.space = space;\n  }\n\n  async getStatus() {}\n\n  async storeHashIn3Box(space: any) {\n    const connect = await ipfservice.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\"); return false;}\n    if (typeof this.space == \"undefined\") {\n      toast.error(\"You should connect to 3Box first\");\n      return false;\n    }\n    loaderservice.setLoading(true);\n    await ipfservice.addToIpfs();\n    console.log(\"export 3box\", ipfservice.cid, this.space);\n\n    try {\n      const ob = await localipfsstorage.createBoxObject();\n\n      await this.space.private.set(ob.key, ob);\n      toast.success(\"Stored in 3box\");\n      await this.getObjectsFrom3Box(space);\n      loaderservice.setLoading(false);\n    } catch (e) {}\n  }\n\n  async getObjectsFrom3Box(space: any) {\n    console.log(\"get objects from box\");\n    const hashes: boxObject[] = await space.private.all();\n    let vals = Object.values(hashes)\n    vals = await this.filterNulls(vals)\n    console.log(vals)\n    vals.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n    this.boxObjects.next(vals);\n    console.log(hashes);\n    return Object.values(hashes);\n  }\n\n  async filterNulls(objects: boxObject[]) {\n    var filtered = objects.filter(function (el) {\n      return el.timestamp != null && el.timestamp!== undefined;\n    });\n    return filtered;\n  }\n\n  async deleteFrom3Box(args: string | undefined) {\n    if (args !== undefined) {\n      const key = args;\n      console.log(\"key\", key);\n      loaderservice.setLoading(true);\n      await this.space.private.remove(key);\n      await this.getObjectsFrom3Box(this.space);\n      loaderservice.setLoading(false);\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts",["202"],"import { unstable_batchedUpdates } from \"react-dom\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fsConfigPromise, gitservice, ipfservice } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\nimport { default as dateFormat } from 'dateformat'\nexport class LocalIPFSStorage {\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  objects: any[] = [];\n\n  async init() {\n    try {\n      await this.read();\n    } catch (e) {\n      console.log(e);\n      await this.write();\n    }\n  }\n\n  async read() {\n    let r = await fsConfigPromise.readFile(\"/objects.json\", {\n      encoding: \"utf8\",\n    });\n    this.objects = JSON.parse(r);\n    this.objects.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n    this.objects = await this.filterNulls();\n    console.log(\"READ CONFIG\",this.objects);\n    this.boxObjects.next(this.objects);\n  }\n\n  async write() {\n    await fsConfigPromise.writeFile(\n      \"/objects.json\",\n      JSON.stringify(await this.filterNulls()),\n      { encoding: \"utf8\" }\n    );\n  }\n\n  async addToStorage(box: boxObject) {\n    await this.init();\n    await this.deleteFromStorage(box.cid)\n    this.objects.push(box);\n    await this.write();\n    await this.read();\n  }\n\n  async filterNulls() {\n    var filtered = this.objects.filter(function (el) {\n      return el != null;\n    });\n    return filtered;\n  }\n\n  async deleteFromStorage(cid: string | undefined) {\n    if (cid !== undefined) {\n      await this.read();\n      this.objects = this.objects.filter((i) => i.cid !== cid);\n      await this.write();\n      await this.read();\n    }\n  }\n\n  async createBoxObject() {\n    await this.init();\n    try{\n      const commits = await gitservice.getCommits();\n      let key = gitservice.reponame;\n  \n      let ob: boxObject = {\n        key: key,\n        cid: ipfservice.cid,\n        datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        datecommit: dateFormat(new Date(commits[0].commit.committer.timestamp * 1000), \"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        timestamp: Date.now(),\n        ref: commits[0].oid,\n        message: commits[0].commit.message,\n      };\n  \n      return ob;\n    }catch(e){\n      throw(e)\n    }\n\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Help.tsx",["203"],"import React, { useEffect, useState } from 'react'\nimport marked from \"marked\";\ninterface HelpProps {\n\n}\n\nexport const Help: React.FC<HelpProps> = ({}) => {\n    const [markdown,setMarkdown] = useState(\"\")\n    useEffect(()=>{\n        fetch(\"https://raw.githubusercontent.com/bunsenstraat/remix-storage-plugin/master/README.md\").then(response => {\n            return response.text()\n          })\n          .then(text => {\n            setMarkdown(text)\n          })\n    },[])\n    return (\n        <section>\n          <article dangerouslySetInnerHTML={{__html: marked(markdown)}}></article>\n        </section>\n      )\n}","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx",["204","205","206"],"import React, { createRef } from \"react\";\nimport { fileservice, gitservice, localipfsstorage, resetFileSystem } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface FileToolsProps {}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n  let ModalRef = createRef<ConfirmDelete>();\n\n  const clearAll = async () => {\n    try {\n      \n      await ModalRef.current?.show()\n      await fileservice.clearAll();\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <hr />\n      <ConfirmDelete title={\"Clear Files\"} text={\"This action will delete the files you are working on! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      {/*         <button className=\"btn btn-danger w-10\" onClick={async()=>fileservice.getDirectory(\"/\")}>get dir</button> */}\n      <button\n        className=\"btn btn-danger w-10 d-none\"\n        onClick={async () => fileservice.syncFromBrowser()}\n      >\n        Sync from IDE\n      </button>\n      <button\n        className=\"btn btn-primary w-10 ml-2\"\n        onClick={async () => fileservice.startNewRepo()}\n      >\n        Start new repo\n      </button>{\" \"}\n      <button\n        className=\"btn btn-primary w-10 ml-2\"\n        onClick={async () => await gitservice.clearRepoName()}\n      >\n        Rename your repo\n      </button> | \n      <button\n        className=\"btn btn-danger w-10 ml-2\"\n        onClick={async () => await clearAll()}\n      >\n        Clear all files & git init\n      </button>\n      <button\n        className=\"btn btn-danger w-10 ml-2 d-none\"\n        onClick={async () => {\n          await fileservice.clearFilesInIde();\n          console.log(\"done\");\n        }}\n      >\n        Clear files in IDE\n      </button>\n      {/*         <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.clearFilesInWorkingDirectory()}>Clear files in browser</button>\n        <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.syncStart()}>sync start</button>\n\n        <button className=\"btn btn-danger w-10\" onClick={async()=>fileservice.showFiles()}>show files</button>\n\n        <button className=\"btn btn-danger w-10\" onClick={async()=>resetFileSystem()}>show config</button> */}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx",["207","208"],"import React, { Suspense, useEffect } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport {\n  boxservice,\n  gitservice,\n  ipfservice,\n  localipfsstorage,\n} from \"../../App\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  const canExport = useBehaviorSubject(gitservice.canExport);\n  const BoxController = React.lazy(() =>\n    import(\"../3box/Box\").then(({ BoxController }) => ({\n      default: BoxController,\n    }))\n  );\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n  gitservice.canExport.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (cid !== \"\" && cid !== undefined && cid) {\n      console.log(ipfservice.cid);\n      return (\n        <>\n          IPFS Hash: {ipfservice.cid}\n          <br></br>\n          <CopyToClipboard text={ipfservice.cid} onCopy={() => {toast.success(\"Copied to clipboard.\")}}>\n            <button className=\"btn btn-primary\">Copy to clipboard</button>\n          </CopyToClipboard>\n          <br></br>\n          <a className=\"pl-2\" target=\"_blank\" href={getUrl()} id=\"CID\">\n            View files\n          </a>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"export view\");\n    ipfservice.setipfsHost();\n  }, []);\n\n  const addFilesToIpfs = async () => {\n    try {\n      await ipfservice.addToIpfs();\n      await localipfsstorage.addToStorage(\n        await localipfsstorage.createBoxObject()\n      );\n    } catch (e) {}\n  };\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      {IPFSStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-25 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      {canExport ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-danger w-25 mt-2\" role=\"alert\">\n          Commit some files first, then you can export.\n        </div>\n      )}\n      <h4>Export to Local storage & IPFS</h4>\n      <button\n        disabled={(IPFSStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-25 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToIpfs()}\n      >\n        Export to IPFS only & store in local storage\n      </button>\n\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n      <h4>Export to 3Box Storage</h4>\n      <div className=\"alert alert-warning w-25\" role=\"alert\">\n        Please make sure the IDE is on HTTPS otherwise you can't connect.\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BoxController\n          buttonTitle=\"Export to 3Box\"\n          storeData={true}\n          IPFSStatus={IPFSStatus}\n        />\n      </Suspense>\n      <div id=\"boxexportstatus\"></div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx",["209"],"import React from \"react\";\nimport { LocalIPFSView } from \"../LocalStorage/LocalIPFSView\";\nimport { BoxImporter } from \"./BoxImporter\";\nimport { IPFSImporter } from \"./IPFSImporter\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    <>\n        <IPFSImporter/>\n        <LocalIPFSView/>\n        <BoxImporter/>\n        \n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts",["210","211","212"],"import path from \"path\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n  files.map((f, i) => {\n    const dirname = path.dirname(files[i]);\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      //console.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    }\n  });\n  console.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  const nest = (items: any, id = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  console.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  // console.log('OB', ob)\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  //console.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx",["213","214"],"import React from \"react\";\nimport { client, fileservice, gitservice } from \"../../App\";\nimport \"./FileExplorer.css\";\nimport { fileExplorerNode } from \"./types\";\ninterface FileButtonsProps {\n  file: fileExplorerNode;\n  setTab: (key: string) => void;\n}\n\nexport const FileButtons: React.FC<FileButtonsProps> = ({\n  file,\n  setTab,\n}: FileButtonsProps) => {\n  const diffFile = (file: fileExplorerNode) => {\n    gitservice.diffFiles();\n    ///setTab(\"diff\")\n  };\n\n  const gitaddButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    console.log(\"file status\",status,status?.indexOf(\"with unstaged changes\"))\n    if (\n      (status?.indexOf(\"deleted\") === -1 &&\n        status?.indexOf(\"unmodified\") === -1 &&\n        status?.indexOf(\"staged\") === -1) ||\n      status?.indexOf(\"with unstaged changes\") !== -1\n    ) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.addToGit(file.fullname)}\n        >\n          git add\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>git add</div>;\n    }\n  };\n\n  const giteditButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await fileservice.viewFile(file.fullname)}\n        >\n          edit\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>edit</div>;\n    }\n  };\n\n  const gitrmbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n    } else {\n      if (status?.indexOf(\"staged\") === -1) {\n        return (\n          <div\n            className={\"badge badge-primary addgit\"}\n            onClick={async () => await gitservice.gitrm(file.fullname)}\n          >\n            git rm\n          </div>\n        );\n      } else {\n        return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n      }\n    }\n  };\n\n  const checkoutbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"modified\") === -1 &&\n      (status?.indexOf(\"deleted\") === -1 ||\n        status?.indexOf(\"staged\") ||\n        status?.indexOf(\"unstaged\"))\n    ) {\n      return <div className={\"badge badge-secondary addgit\"}>git checkout</div>;\n    } else {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.checkoutfile(file.fullname)}\n        >\n          git checkout\n        </div>\n      );\n    }\n  };\n\n  if (file.type === \"file\") {\n    return (\n      <span className=\"status float-right ml-3\">\n        {giteditButton(file)}\n        {gitrmbutton(file)}\n        {gitaddButton(file)}\n        {checkoutbutton(file)}\n      </span>\n    );\n  } else {\n    return <></>;\n  }\n};\n","/Volumes/butbut/code/boxtest/src/components/3box/Box.tsx",["215","216"],"import React, { useState } from \"react\";\nimport Box from \"3box\";\nimport Web3Modal from \"web3modal\";\nimport { getAddress } from \"@ethersproject/address\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport {\n  boxservice,\n  ipfservice,\n  loaderservice,\n  providerOptions,\n} from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"use-subscribable\";\n\ninterface BoxProps {\n  buttonTitle: string;\n  storeData: boolean;\n  IPFSStatus: boolean | undefined;\n}\n\nexport const BoxController: React.FC<BoxProps> = (p) => {\n  const status = useBehaviorSubject(boxservice.status);\n  let address = \"\";\n  let mybox: Box;\n  let space;\n\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n\n  let modal: Web3Modal;\n  let timer: NodeJS.Timeout;\n\n  const callTimedOut = async () => {\n    toast.dismiss()\n    toast.error(\n      \"There has been an error connnecting to 3BOX. If you continue having problems consider clearing your 3BOX cookies in your browser.\", { autoClose: false }\n    );\n    boxservice.status.next(false);\n    loaderservice.setLoading(false);\n    try {\n      clearTimeout(timer);\n    } catch (e) {}\n  };\n\n  const setModalListener = async () => {\n    modal.on(\"connect\", async (provider: any) => {\n      toast.dismiss()\n      const connect = await ipfservice.setipfsHost();\n      if (!connect) {\n        toast.error(\"Unable to connect to IPFS check your settings.\", {autoClose:false});\n        return false;\n      }\n      if (!status) {\n        try {\n          timer = setTimeout(async () => {\n            await callTimedOut();\n          }, 120000);\n          const [eth] = await provider.enable();\n          address = getAddress(eth);\n          loaderservice.setLoading(true);\n          toast.info(\"Please wait... this can take a while\", {autoClose:false, position:\"top-left\"});\n          console.log(address);\n\n          mybox = await Box.openBox(address, provider);\n          toast.success(\"3box connected... waiting for space to open ... this might even take longer.\", {autoClose:false, position:\"top-left\"});\n          console.log(mybox);\n          space = await mybox.openSpace(\"remix-workspace\");\n          //toast.success(\"space opened... getting data\")\n          console.log(space);\n\n          await boxservice.setSpace(space);\n          await boxservice.getObjectsFrom3Box(space);\n          boxservice.status.next(true);\n          toast.dismiss()\n          try {\n            clearTimeout(timer);\n          } catch (e) {}\n        } catch (e) {\n          await callTimedOut()\n        }\n      }\n      try {\n        if (p.storeData) await boxservice.storeHashIn3Box(boxservice.space);\n      } catch (e) {\n        toast.error(\"There has been an error connnecting to 3BOX.\",{autoClose:false});\n        boxservice.status.next(false);\n      }\n      loaderservice.setLoading(false);\n      // .then((x) => toast.success(\"connected to 3box\"))\n      // .catch((x) => toast.error(\"can't connect to 3box\"));\n    });\n  };\n  const startConnect = async () => {\n    modal = new Web3Modal({\n      providerOptions: providerOptions, // required\n    });\n    await setModalListener();\n    // console.log(\"get box\", status,)\n    if (!status) {\n      await modal.connect();\n    } else {\n      loaderservice.setLoading(true);\n      if (p.storeData) await boxservice.storeHashIn3Box(boxservice.space);\n      loaderservice.setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        disabled={p.IPFSStatus ? false : true}\n        className=\"btn w-25 btn-primary 3boxbtn\"\n        id=\"boxconnect\"\n        onClick={async () => await startConnect()}\n      >\n        {p.buttonTitle}\n      </button>\n      <div id=\"3boxconnection\">\n        {status ? <>connected</> : <>disconnected</>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["217","218","219","220"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { ipfservice, localipfsstorage } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface LocalIPFSViewProps {}\n\nexport const LocalIPFSView: React.FC<LocalIPFSViewProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(localipfsstorage.boxObjects);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  useEffect(() => {\n    //localipfsstorage.init();\n  }, []);\n\n  localipfsstorage.boxObjects\n    .subscribe((x) => {\n      console.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a className=\"btn btn-primary btn-sm mr-2\" target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid,name)\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n\n  const deleteItem = async(o:any) =>{\n    try {\n      await EraseModalRef.current?.show();\n      await localipfsstorage.deleteFromStorage(o?.cid)\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  }\n\n  return (\n    <>\n      <h4>Import from Local Storage</h4>\n      <ConfirmDelete title={\"Importing\"} text={\"Importing will delete the files you are working on! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <ConfirmDelete title={\"Deleting\"} text={\"Are you sure you want to erase this item?\"} ref={EraseModalRef}></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <Card className=\"w-75\">\n                <Card.Body>\n                  <h5>{o.key}</h5>\n                  <div className=\"row\">\n                    <div className=\"col\">IPFS</div>\n                    <div className=\"col\">{o.cid}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE EXPORTED</div>\n                    <div className=\"col\">{o.datestored}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">MESSAGE</div>\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button\n                  onClick={async () => await importFromCID(o.cid, o.key)}\n                  className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n               {getViewButton(o.cid)}\n                <button\n                  onClick={async () =>\n                    await deleteItem(o)\n                  }\n                  className=\"btn btn-danger btn-sm delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n        {boxobjects?.length===0?<>Nothing has been stored here yet.</>:<></>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/BoxImporter.tsx",["221","222","223","224","225"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, Suspense } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { boxservice, ipfservice } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n//import { BoxController } from \"../3box/Box\";\n\ninterface boximporterProps {}\n\nexport const BoxImporter: React.FC<boximporterProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(boxservice.boxObjects);\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  const BoxController = React.lazy(() =>\n    import(\"../3box/Box\").then(({ BoxController }) => ({\n      default: BoxController,\n    }))\n  );\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  boxservice.boxObjects\n    .subscribe((x) => {\n      console.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a\n          className=\"btn btn-primary btn-sm mr-2\"\n          target=\"_blank\"\n          href={getUrl(cid)}\n          id=\"CID\"\n        >\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid, name);\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n\n  const deleteFrom3Box = async(o:any) =>{\n    try {\n      await EraseModalRef.current?.show();\n      await boxservice.deleteFrom3Box(o.key)\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  }\n\n  return (\n    <>\n      <hr></hr>\n      <h4>Import from 3Box storage</h4>\n      <ConfirmDelete title={\"Importing\"} text={\"Importing will delete the files you are working on! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <ConfirmDelete title={\"Deleting\"} text={\"Are you sure you want to erase this item?\"} ref={EraseModalRef}></ConfirmDelete>\n      \n      <div className=\"alert alert-warning\" role=\"alert\">\n        Please make sure the IDE is on HTTPS otherwise you can't connect.\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BoxController\n          buttonTitle=\"Connect to 3Box\"\n          storeData={false}\n          IPFSStatus={IPFSStatus}\n        />\n      </Suspense>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o) => {\n          return (\n            <div key={o.key} className=\"row p-1\">\n              <Card className=\"w-75\">\n                <Card.Body>\n                  <h5>{o.key}</h5>\n                  <div className=\"row\">\n                    <div className=\"col\">IPFS</div>\n                    <div className=\"col\">{o.cid}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE EXPORTED</div>\n                    <div className=\"col\">{o.datestored}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">MESSAGE</div>\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button\n                  onClick={async () => await importFromCID(o.cid, o.key)}\n                  className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n                {getViewButton(o.cid)}\n                <button\n                  onClick={async () => await deleteFrom3Box(o)}\n                  className=\"btn btn-danger btn-sm delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx",["226"],"import React, { createRef, useState } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { ipfservice } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus)\n  let ModalRef = createRef<ConfirmDelete>();\n  ipfservice.connectionStatus.subscribe((x)=>{}).unsubscribe(); \n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      ipfservice.importFromCID(cid,name)\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <ConfirmDelete title={\"Importing\"} text={\"Importing will delete the files you are working on! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <div className=\"form-group\">\n        <h4>Import from IPFS hash</h4>\n        <label>IPFS HASH</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button disabled={(IPFSStatus?false:true)||(cid.value===\"\"?true:false)} onClick={async()=> await importFromCID(cid.value, cid.value)} className=\"btn w-25 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      {IPFSStatus?<></>:<div className=\"alert alert-warning w-25 mt-2\" role=\"alert\">\n        Your IPFS settings are incorrect. Unable to connect. Check your settings.\n      </div>}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx",["227"],"import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\ninterface ConnectionWarningProps {\n  canLoad: boolean;\n}\n\nexport const ConnectionWarning: React.FC<ConnectionWarningProps> = (props) => {\n  console.log(\"WARNING\",props)\n  return (\n    <>\n      <Modal show={!props.canLoad} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          <Modal.Title>\n        <FontAwesomeIcon icon={faExclamationTriangle} /> Change your browser settings\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          This app won't work properly when you are not on https and your\n          browser blocks third party cookies.<br></br>\n          Running it in incognito mode might not work unless you allow third part cookies.<br></br>\n          3Box services are not available unless you are on https.<br></br>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx",["228","229","230","231"],"import React, { useEffect, useState } from \"react\";\nimport { ReactGhLikeDiff } from \"react-gh-like-diff\";\nimport \"./diff.css\"\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\n\ninterface DiffProps {}\n\nexport const DiffView: React.FC<DiffProps> = ({}) => {\n  const [mock, setMock] = useState(\"\");\n  const diffs = useBehaviorSubject(gitservice.diffResult);\n\n  gitservice.diffResult.subscribe((x) => console.log(\"diff\", x)).unsubscribe();\n\n  return (\n    <div className='container-fluid'>\n      {diffs?.map((diff) => {\n        return (\n           \n          <ReactGhLikeDiff key={diff.originalFileName}\n            options={{\n              originalFileName: diff?.originalFileName,\n              updatedFileName: diff?.updatedFileName,\n            }}\n            past={diff?.past}\n            current={diff?.current}\n          />\n         \n        );\n      })}\n      {diffs?.length===0?<>Nothing to see here.</>:<></>}\n </div>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/RepoName.tsx",["232","233"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport { gitService } from \"../gitService\";\n\ninterface RepoNameProps {}\n\nexport const RepoName: React.FC<RepoNameProps> = ({}) => {\n  const [name, setNAme] = useState({ value: \"\" });\n  const reponame = useBehaviorSubject(gitservice.reponameSubject)\n\n  gitservice.reponameSubject.subscribe((x)=>{}).unsubscribe()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNAme({ value: e.currentTarget.value });\n  };\n  const saveName = () => {\n      gitservice.reponameSubject.next(name.value)\n      gitservice.reponame = name.value\n      localStorage.setItem(\"currentRepo\",name.value)\n  };\n\n  useEffect(()=>{\n    let name:string = localStorage.getItem(\"currentRepo\") || \"\"\n    gitservice.reponame = name\n    gitservice.reponameSubject.next(name)\n  },[])\n\n  return (\n    <>\n      <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={reponame===\"\"?true:false} centered>\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Give your repo a name\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-100\"\n            type=\"text\"\n            id=\"reponame\"\n            \n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => saveName()}>Save</Button>\n        </Modal.Footer>\n        <Modal.Footer>\n          New user? Consult the help section to find out more about this plugin.\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx",["234"],"import React, { useState } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {}\n\nexport const GitControls: React.FC<gitViewProps> = ({}) => {\n  const canCommit = useBehaviorSubject(gitservice.canCommit)\n  const [message,setMessage] = useState({value:''})\n\n  gitservice.canCommit.subscribe((x)=>{}).unsubscribe()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  const commitAllowed = ()=>{\n    return canCommit === false || message.value ===\"\"\n  }\n\n  return (\n    <>\n      <hr />\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async () =>await gitservice.init()}>git init</button> */}\n\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.addAll()} >git add all</button> */}\n      <hr />\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input className=\"form-control w-25\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      {canCommit?<></>:<div className='alert alert-warning w-25'>Cannot commit in detached state! Create a new branch and check it out first or checkout master.<br></br></div>}\n      <button className=\"btn w-25 btn-primary\" disabled={commitAllowed()} onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <br /><hr />\n      <GitLog/>\n      <br /><hr />\n      <GitBranch/>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx",["235"],"import React, { createRef, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch, setNewBranch] = useState({ value: \"\" });\n  let ModalRef = createRef<ConfirmDelete>();\n  let show: boolean = false;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewBranch({ value: e.currentTarget.value });\n  };\n\n  gitservice.branches\n    .subscribe((x) => {\n      console.log(branches);\n      if (branches) {\n        show = branches.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      console.log(branch);\n    })\n    .unsubscribe();\n  const checkout = async (oid: string) => {\n    try {\n      await ModalRef.current?.show();\n      gitservice.checkout(oid);\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n  return (\n    <>\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Branches</h4>\n        <ConfirmDelete\n          title={\"Checking out\"}\n          text={\n            <div>\n              Checking out a branch will delete the files in Remix.<br></br>\n              <strong>Check if you have uncommited work.</strong>\n              <br></br>Continue?\n            </div>\n          }\n          ref={ModalRef}\n        ></ConfirmDelete>\n        <Alert className=\"w-50\" variant=\"success\">\n          {branch}\n        </Alert>\n        {branches?.map((branch) => {\n          return (\n            <div key={branch} className=\"row p-1\">\n              <div className=\"col-2\">{branch}</div>\n              <div className=\"col\">\n                <span className=\"float-right\">\n                  <div\n                    onClick={async () => await checkout(branch)}\n                    className=\"btn btn-primary btn-sm checkout-btn\"\n                  >\n                    checkout\n                  </div>\n                </span>\n              </div>\n            </div>\n          );\n        })}\n        <hr />\n        <h4>Create branch</h4>\n        <div className=\"form-group\">\n          <label>Branchname</label>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-25\"\n            type=\"text\"\n            id=\"newbranchname\"\n          />\n        </div>\n        <button\n          onClick={async () => gitservice.createBranch(newBranch.value)}\n          className=\"btn w-25 btn-primary\"\n          id=\"createbranch-btn\"\n        >\n          git branch\n        </button>\n      </div>\n    </>\n  );\n};\n",["236","237"],"/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx",["238"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React, { createRef } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport { default as dateFormat } from \"dateformat\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n  let ModalRef = createRef<ConfirmDelete>();\n  let show = false;\n\n  gitservice.commits\n    .subscribe((x) => {\n      console.log(commits);\n      if (commits) {\n        show = commits.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = dateFormat(\n      commit.commit.committer.timestamp * 1000,\n      \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const checkout = async (oid:string) => {\n    try {\n      await ModalRef.current?.show();\n      gitservice.checkout(oid)\n      console.log(\"yes\");\n    } catch (e) {\n      console.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <hr />\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Commits</h4>\n        <ConfirmDelete title={\"Checking out\"} text={<div>Checking out a commit will delete the files in Remix.<br></br><strong>Check if you have uncommited work.</strong><br></br>Continue?</div>} ref={ModalRef}></ConfirmDelete>\n        <div className=\"container-fluid\">\n          {commits?.map((commit) => {\n            return (\n              <div key={commit.oid} className=\"row p-1 small\">\n                <div className=\"col-2\">{commit.commit.message}</div>\n                <div className=\"col\">{getDate(commit)}</div>\n                <div className=\"col\">{commit.oid}</div>\n                <div\n                  onClick={async () => await checkout(commit.oid)}\n                  className=\"btn btn-primary btn-sm checkout-btn\"\n                >\n                  git checkout\n                </div>\n              </div>\n            );\n          })}\n\n          <div\n            onClick={async () => await checkout(\"master\")}\n            className=\"btn btn-primary btn-sm checkout-btn\"\n            data-oid=\"master\"\n          >\n            git checkout master\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx",["239"],"import React, { useState } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { ipfservice } from \"../../App\";\n\ninterface IPFSConfigProps {}\n\nexport const IPFSConfig: React.FC<IPFSConfigProps> = ({}) => {\n  const [host, sethost] = useState<string>(\"ipfs.komputing.org\");\n  const [port, setport] = useState<string>(\"443\");\n  const [protocol, setprotocol] = useState<string>(\"https\");\n  const [url, setUrl] = useState<string>(\"https://ipfsgw.komputing.org/ipfs/\");\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus)\n  ipfservice.connectionStatus.subscribe((x)=>{}).unsubscribe(); \n  const setHostChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    sethost(e.currentTarget.value);\n    ipfservice.ipfsconfig.host = e.currentTarget.value\n    \n  };\n  const setPortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setport(e.currentTarget.value);\n    ipfservice.ipfsconfig.port =  parseInt(e.currentTarget.value)\n   \n  };\n  const setProtocolChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setprotocol(e.currentTarget.value);\n    ipfservice.ipfsconfig.protocol  = e.currentTarget.value\n   \n  };\n  const setUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(e.currentTarget.value);\n    ipfservice.ipfsconfig.ipfsurl = e.currentTarget.value\n    \n  };\n\n  const checkconfig = ()=>{\n    ipfservice.setipfsHost()\n  }\n\n  return (\n    <>\n        <label>HOST</label>\n        \n      <input\n        onChange={setHostChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"reponame\"\n        value={host}\n      />\n      <label>PORT</label>\n       <input\n        onChange={setPortChange}\n        className=\"form-control w-100\"\n        type=\"number\"\n        id=\"reponame\"\n        value={port}\n      />\n      <label>PROTOCOL</label>\n       <input\n        onChange={setProtocolChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"reponame\"\n        value={protocol}\n      />\n      <label>URL</label>\n       <input\n        onChange={setUrlChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"reponame\"\n        value={url}\n      />\n      <button className=\"btn btn-primary mt-5\" onClick={checkconfig}>Check connection</button>\n      {IPFSStatus?<div className=\"alert alert-success w-25 mt-2\" role=\"alert\">\n        Your IPFS settings are working correctly.\n      </div>:<div className=\"alert alert-warning w-25 mt-2\" role=\"alert\">\n        Your IPFS settings are incorrect. Unable to connect. Check your settings.\n      </div>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx",["240","241"],"import { Button, Modal } from 'react-bootstrap';\nimport React from 'react'\n\n\ntype MyProps = { title:string, text:any };\ntype MyState = { show: boolean };\n\nexport default class ConfirmDelete extends React.Component<MyProps, MyState> {\n    promiseInfo:any\n    constructor(props:any){\n      super(props)\n      this.state = {\n        show: false\n      };\n  \n      this.promiseInfo = {};\n    }\n    show = async () => {\n      return new Promise((resolve, reject) => {\n        this.promiseInfo = {\n          resolve,\n          reject\n        };\n        this.setState({\n          show: true\n        });\n      });\n    };\n  \n    hide = async () => {\n      const { resolve, reject } = this.promiseInfo;\n      this.setState({\n        show: false\n      });\n      reject()\n    };\n\n    ok = async ()=>{\n        const { resolve, reject } = this.promiseInfo;\n        this.setState({\n          show: false\n        });\n        resolve()\n    }\n  \n    render() {\n      const { show } = this.state;\n      \n      return (\n        <>\n\n  \n        <Modal show={show} onHide={async ()=> await this.hide()}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.props.text}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={async ()=> await this.hide()}>\n              No\n            </Button>\n            <Button variant=\"primary\" onClick={async ()=> await this.ok()}>\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n      );\n    }\n  }","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx",["242"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { fileservice } from \"../../../App\";\n\ninterface GitStatusProps {}\n\nexport const GitStatus: React.FC<GitStatusProps> = ({}) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged = 0;\n  let untracked = 0;\n  let deleted = 0;\n  let modified = 0;\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      console.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesByStatus(\"staged\");\n      untracked = fileservice.getFilesByStatus(\"untracked\");\n      deleted = fileservice.getFilesByStatus(\"deleted\");\n      modified = fileservice.getFilesByStatus(\"modified\");\n      show = (deleted>0 || staged>0 ||  untracked>0 || modified>0)\n\n    })\n    .unsubscribe();\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n    {show?\n    <>\n    <hr></hr>\n    <div>Git status</div>\n    <div className=\"alert alert-success\">\n      {staged > 0 ? <div>{staged} staged</div> : <></>}\n      {modified > 0 ? <div>{modified} modified</div> : <></>}\n      {untracked > 0 ? <div>{untracked} untracked</div> : <></>}\n      {deleted > 0 ? <div>{deleted} deleted</div> : <></>}\n    </div></>\n    :<></>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/FileHelp.tsx",["243"],"import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfo } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface FileHelpProps {}\n\nexport const FileHelp: React.FC<FileHelpProps> = ({}) => {\n  return (\n    <div className=\"\">\n      <hr></hr>\n      <div className=\"mt-4\">\n        <FontAwesomeIcon icon={faInfo} className=\"mr-2\" />\n        <br></br>\n        In this section you can manage your files in git. Files from remix will\n        be added automatically.<br></br>\n        Starting a new repo clears git and uses the files in remix to create a\n        new repo.<br></br>\n        Clearing all files clears git & remix to create a new repo.<br></br>\n        Check out the help section to learn more.\n      </div>\n      <br></br>\n      <br></br>\n    </div>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/GitHelp.tsx",["244"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface GitHelpProps {\n\n}\n\nexport const GitHelp: React.FC<GitHelpProps> = ({}) => {\n    return (<div className=\"small\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    In this section you can manage your git repo like you normally would. Start by creating a first commit.<br></br>\n    Push & pull is not included here, go to the export/import section.<br></br>\n    </div>\n    </div>);\n}","/Volumes/butbut/code/boxtest/src/components/IPFS/ExportHelp.tsx",["245","246"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface ExportHelpProps {\n\n}\n\nexport const ExportHelp: React.FC<ExportHelpProps> = ({}) => {\n    return (<div className=\"small\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    The plugin offers you 3 ways to export your files:<br></br>\n- You just store the git repo in IPFS and keep the hash somewhere for later use<br></br>\n- You store the git repo in IPFS and your browser keeps a list of your hashes<br></br>\n- You store the git repo in IPFS and you export the hash to a list in 3Box.io.<br>\n    </br><br></br>\n    3Box stores the list of IPFS hashes and links it to your address.<br></br>\n    For this to work you need to use a walletconnect app or metamask.<br></br>\n    It also requires remix to run on https.<br></br>\n    <a target='_blank' href='https://3box.io/'>More about 3Box here</a>\n    </div>\n    <br></br>\n    <br></br>\n    </div>);\n}","/Volumes/butbut/code/boxtest/src/components/Import/ImportHelp.tsx",["247","248"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface ImportHelpProps {\n\n}\n\nexport const ImportHelp: React.FC<ImportHelpProps> = ({}) => {\n    return (<div className=\"small\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    The plugin offers you 3 ways to import your files:<br></br>\n- Just enter an IPFS hash where you stored the files.<br></br>\n- Choose an export from the local storage, these are exports you made previously.<br></br>\n- 3Box contains a list of exports you made earlier using the plugin's export to 3Box functionality.<br>\n    </br><br></br>\n    3Box stores the list of IPFS hashes and links it to your address.<br></br>\n    For this to work you need to use a walletconnect app or metamask.<br></br>\n    It also requires remix to run on https.<br></br>\n    <a target='_blank' href='https://3box.io/'>More about 3Box here</a>\n    </div>\n    <br></br>\n    <br></br>\n    </div>);\n}","/Volumes/butbut/code/boxtest/src/components/IPFS/ConfigHelp.tsx",["249","250"],"import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport marked from \"marked\";\n\ninterface ConfigHelpProps {}\n\nexport const ConfigHelp: React.FC<ConfigHelpProps> = ({}) => {\n  return (\n    <div className=\"small\">\n      <hr></hr>\n      <div className=\"mt-4\">\n        <FontAwesomeIcon icon={faInfo} className=\"mr-2\" />\n        <br></br>\n        By default the IPFS used is a node from the Remix team.<br></br>\n        You can start your own IPFS daemon and set it to localhost in the config\n        of the plugin.<br></br>\n        However you need to configure your IPFS daemon to accept calls from a\n        web app by setting the Access-control-allow or CORS headers.<br></br>\n        Checkout the IPFS daemon documentation on how to do this.<br></br>\n      </div>\n      <br></br>\n      <br></br>\n    </div>\n  );\n};\n",{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","severity":1,"message":"256","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"255","severity":1,"message":"259","line":1,"column":39,"nodeType":"257","messageId":"258","endLine":1,"endColumn":45},{"ruleId":"255","severity":1,"message":"260","line":2,"column":8,"nodeType":"257","messageId":"258","endLine":2,"endColumn":12},{"ruleId":"255","severity":1,"message":"261","line":4,"column":32,"nodeType":"257","messageId":"258","endLine":4,"endColumn":38},{"ruleId":"255","severity":1,"message":"262","line":5,"column":8,"nodeType":"257","messageId":"258","endLine":5,"endColumn":11},{"ruleId":"255","severity":1,"message":"263","line":6,"column":8,"nodeType":"257","messageId":"258","endLine":6,"endColumn":17},{"ruleId":"255","severity":1,"message":"264","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":20},{"ruleId":"255","severity":1,"message":"265","line":36,"column":10,"nodeType":"257","messageId":"258","endLine":36,"endColumn":16},{"ruleId":"255","severity":1,"message":"266","line":91,"column":10,"nodeType":"257","messageId":"258","endLine":91,"endColumn":21},{"ruleId":"255","severity":1,"message":"267","line":91,"column":23,"nodeType":"257","messageId":"258","endLine":91,"endColumn":37},{"ruleId":"268","severity":1,"message":"269","line":99,"column":13,"nodeType":"270","messageId":"271","endLine":99,"endColumn":15},{"ruleId":"272","severity":1,"message":"273","line":134,"column":168,"nodeType":"274","endLine":134,"endColumn":183},{"ruleId":"255","severity":1,"message":"275","line":2,"column":8,"nodeType":"257","messageId":"258","endLine":2,"endColumn":10},{"ruleId":"255","severity":1,"message":"276","line":3,"column":8,"nodeType":"257","messageId":"258","endLine":3,"endColumn":11},{"ruleId":"255","severity":1,"message":"277","line":5,"column":3,"nodeType":"257","messageId":"258","endLine":5,"endColumn":14},{"ruleId":"255","severity":1,"message":"278","line":6,"column":3,"nodeType":"257","messageId":"258","endLine":6,"endColumn":14},{"ruleId":"279","severity":1,"message":"280","line":45,"column":3,"nodeType":"281","messageId":"282","endLine":45,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":237,"column":35,"nodeType":"285","messageId":"286","endLine":237,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":238,"column":29,"nodeType":"285","messageId":"286","endLine":238,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":251,"column":35,"nodeType":"285","messageId":"286","endLine":251,"endColumn":37},{"ruleId":"255","severity":1,"message":"287","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":22},{"ruleId":"279","severity":1,"message":"280","line":25,"column":3,"nodeType":"281","messageId":"282","endLine":27,"endColumn":4},{"ruleId":"255","severity":1,"message":"288","line":4,"column":3,"nodeType":"257","messageId":"258","endLine":4,"endColumn":13},{"ruleId":"255","severity":1,"message":"289","line":1,"column":10,"nodeType":"257","messageId":"258","endLine":1,"endColumn":33},{"ruleId":"290","severity":1,"message":"291","line":7,"column":43,"nodeType":"292","messageId":"271","endLine":7,"endColumn":45},{"ruleId":"255","severity":1,"message":"293","line":2,"column":35,"nodeType":"257","messageId":"258","endLine":2,"endColumn":51},{"ruleId":"255","severity":1,"message":"294","line":2,"column":53,"nodeType":"257","messageId":"258","endLine":2,"endColumn":68},{"ruleId":"290","severity":1,"message":"291","line":7,"column":53,"nodeType":"292","messageId":"271","endLine":7,"endColumn":55},{"ruleId":"255","severity":1,"message":"295","line":16,"column":9,"nodeType":"257","messageId":"258","endLine":16,"endColumn":21},{"ruleId":"272","severity":1,"message":"273","line":40,"column":31,"nodeType":"274","endLine":40,"endColumn":46},{"ruleId":"290","severity":1,"message":"291","line":10,"column":51,"nodeType":"292","messageId":"271","endLine":10,"endColumn":53},{"ruleId":"283","severity":1,"message":"296","line":11,"column":20,"nodeType":"285","messageId":"297","endLine":11,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":71,"column":17,"nodeType":"285","messageId":"286","endLine":71,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":75,"column":17,"nodeType":"285","messageId":"286","endLine":75,"endColumn":19},{"ruleId":"255","severity":1,"message":"298","line":2,"column":10,"nodeType":"257","messageId":"258","endLine":2,"endColumn":16},{"ruleId":"255","severity":1,"message":"299","line":14,"column":9,"nodeType":"257","messageId":"258","endLine":14,"endColumn":17},{"ruleId":"255","severity":1,"message":"300","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":25},{"ruleId":"255","severity":1,"message":"301","line":5,"column":8,"nodeType":"257","messageId":"258","endLine":5,"endColumn":29},{"ruleId":"290","severity":1,"message":"291","line":11,"column":61,"nodeType":"292","messageId":"271","endLine":11,"endColumn":63},{"ruleId":"255","severity":1,"message":"302","line":25,"column":9,"nodeType":"257","messageId":"258","endLine":25,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":28,"column":12,"nodeType":"274","endLine":28,"endColumn":27},{"ruleId":"272","severity":1,"message":"273","line":40,"column":52,"nodeType":"274","endLine":40,"endColumn":67},{"ruleId":"255","severity":1,"message":"303","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":13,"column":57,"nodeType":"292","messageId":"271","endLine":13,"endColumn":59},{"ruleId":"255","severity":1,"message":"302","line":30,"column":9,"nodeType":"257","messageId":"258","endLine":30,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":33,"column":12,"nodeType":"274","endLine":33,"endColumn":27},{"ruleId":"272","severity":1,"message":"273","line":47,"column":11,"nodeType":"274","endLine":47,"endColumn":26},{"ruleId":"290","severity":1,"message":"291","line":8,"column":59,"nodeType":"292","messageId":"271","endLine":8,"endColumn":61},{"ruleId":"255","severity":1,"message":"261","line":2,"column":10,"nodeType":"257","messageId":"258","endLine":2,"endColumn":16},{"ruleId":"255","severity":1,"message":"304","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"290","severity":1,"message":"291","line":9,"column":47,"nodeType":"292","messageId":"271","endLine":9,"endColumn":49},{"ruleId":"255","severity":1,"message":"305","line":10,"column":10,"nodeType":"257","messageId":"258","endLine":10,"endColumn":14},{"ruleId":"255","severity":1,"message":"306","line":10,"column":16,"nodeType":"257","messageId":"258","endLine":10,"endColumn":23},{"ruleId":"255","severity":1,"message":"307","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":20},{"ruleId":"290","severity":1,"message":"291","line":9,"column":51,"nodeType":"292","messageId":"271","endLine":9,"endColumn":53},{"ruleId":"290","severity":1,"message":"291","line":9,"column":53,"nodeType":"292","messageId":"271","endLine":9,"endColumn":55},{"ruleId":"290","severity":1,"message":"291","line":9,"column":53,"nodeType":"292","messageId":"271","endLine":9,"endColumn":55},{"ruleId":"251","replacedBy":"308"},{"ruleId":"253","replacedBy":"309"},{"ruleId":"290","severity":1,"message":"291","line":9,"column":47,"nodeType":"292","messageId":"271","endLine":9,"endColumn":49},{"ruleId":"290","severity":1,"message":"291","line":7,"column":55,"nodeType":"292","messageId":"271","endLine":7,"endColumn":57},{"ruleId":"255","severity":1,"message":"310","line":31,"column":15,"nodeType":"257","messageId":"258","endLine":31,"endColumn":22},{"ruleId":"255","severity":1,"message":"311","line":39,"column":26,"nodeType":"257","messageId":"258","endLine":39,"endColumn":32},{"ruleId":"290","severity":1,"message":"291","line":7,"column":53,"nodeType":"292","messageId":"271","endLine":7,"endColumn":55},{"ruleId":"290","severity":1,"message":"291","line":7,"column":51,"nodeType":"292","messageId":"271","endLine":7,"endColumn":53},{"ruleId":"290","severity":1,"message":"291","line":9,"column":49,"nodeType":"292","messageId":"271","endLine":9,"endColumn":51},{"ruleId":"290","severity":1,"message":"291","line":9,"column":55,"nodeType":"292","messageId":"271","endLine":9,"endColumn":57},{"ruleId":"272","severity":1,"message":"273","line":22,"column":8,"nodeType":"274","endLine":22,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":9,"column":55,"nodeType":"292","messageId":"271","endLine":9,"endColumn":57},{"ruleId":"272","severity":1,"message":"273","line":22,"column":8,"nodeType":"274","endLine":22,"endColumn":23},{"ruleId":"255","severity":1,"message":"312","line":4,"column":8,"nodeType":"257","messageId":"258","endLine":4,"endColumn":14},{"ruleId":"290","severity":1,"message":"291","line":8,"column":55,"nodeType":"292","messageId":"271","endLine":8,"endColumn":57},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"@typescript-eslint/no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'logo' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'Web3Modal' is defined but never used.","'getAddress' is defined but never used.","'faFile' is defined but never used.","'confirmShow' is assigned a value but never used.","'setConfirmShow' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'FS' is defined but never used.","'App' is defined but never used.","'fileservice' is defined but never used.","'fsNoPromise' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fileStatuses' is defined but never used.","'gitservice' is defined but never used.","'unstable_batchedUpdates' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'localipfsstorage' is defined but never used.","'resetFileSystem' is defined but never used.","'boxconnected' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'client' is defined but never used.","'diffFile' is assigned a value but never used.","'useState' is defined but never used.","'WalletConnectProvider' is defined but never used.","'getUrlLink' is assigned a value but never used.","'boxObject' is defined but never used.","'useEffect' is defined but never used.","'mock' is assigned a value but never used.","'setMock' is assigned a value but never used.","'gitService' is defined but never used.",["313"],["314"],"'resolve' is assigned a value but never used.","'reject' is assigned a value but never used.","'marked' is defined but never used.","no-global-assign","no-unsafe-negation"]