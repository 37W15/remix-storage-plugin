[{"/Volumes/butbut/code/boxtest/src/index.tsx":"1","/Volumes/butbut/code/boxtest/src/reportWebVitals.ts":"2","/Volumes/butbut/code/boxtest/src/App.tsx":"3","/Volumes/butbut/code/boxtest/src/components/loaderService.ts":"4","/Volumes/butbut/code/boxtest/src/components/Utils.ts":"5","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts":"6","/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts":"7","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts":"8","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts":"9","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts":"10","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts":"11","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"12","/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx":"13","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx":"14","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx":"15","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx":"16","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx":"17","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx":"18","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx":"19","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx":"20","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx":"21","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx":"22","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx":"23","/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx":"24","/Volumes/butbut/code/boxtest/src/components/github/github.tsx":"25","/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts":"26","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts":"27","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx":"28","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx":"29","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"30","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx":"31","/Volumes/butbut/code/boxtest/src/components/Storage.tsx":"32","/Volumes/butbut/code/boxtest/src/components/github/settings.tsx":"33"},{"size":491,"mtime":1657544007000,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1657544007000,"results":"36","hashOfConfig":"35"},{"size":10697,"mtime":1658138518000,"results":"37","hashOfConfig":"35"},{"size":204,"mtime":1657544007000,"results":"38","hashOfConfig":"35"},{"size":259,"mtime":1657544007000,"results":"39","hashOfConfig":"35"},{"size":2331,"mtime":1657544007000,"results":"40","hashOfConfig":"35"},{"size":33,"mtime":1657544007000,"results":"41","hashOfConfig":"35"},{"size":4832,"mtime":1657544007000,"results":"42","hashOfConfig":"35"},{"size":4122,"mtime":1657544007000,"results":"43","hashOfConfig":"35"},{"size":16140,"mtime":1658137286000,"results":"44","hashOfConfig":"35"},{"size":9013,"mtime":1657544007000,"results":"45","hashOfConfig":"35"},{"size":2485,"mtime":1657544007000,"results":"46","hashOfConfig":"35"},{"size":816,"mtime":1657544007000,"results":"47","hashOfConfig":"35"},{"size":3014,"mtime":1657544007000,"results":"48","hashOfConfig":"35"},{"size":2479,"mtime":1657544007000,"results":"49","hashOfConfig":"35"},{"size":1085,"mtime":1657544007000,"results":"50","hashOfConfig":"35"},{"size":1617,"mtime":1657544007000,"results":"51","hashOfConfig":"35"},{"size":415,"mtime":1657544007000,"results":"52","hashOfConfig":"35"},{"size":2510,"mtime":1657544007000,"results":"53","hashOfConfig":"35"},{"size":3320,"mtime":1657544007000,"results":"54","hashOfConfig":"35"},{"size":1229,"mtime":1657544007000,"results":"55","hashOfConfig":"35"},{"size":4123,"mtime":1657544007000,"results":"56","hashOfConfig":"35"},{"size":2192,"mtime":1657544007000,"results":"57","hashOfConfig":"35"},{"size":8940,"mtime":1657544007000,"results":"58","hashOfConfig":"35"},{"size":9353,"mtime":1658136399000,"results":"59","hashOfConfig":"35"},{"size":775,"mtime":1657544007000,"results":"60","hashOfConfig":"35"},{"size":3565,"mtime":1657544007000,"results":"61","hashOfConfig":"35"},{"size":1585,"mtime":1657544007000,"results":"62","hashOfConfig":"35"},{"size":1801,"mtime":1657544007000,"results":"63","hashOfConfig":"35"},{"size":4719,"mtime":1657544007000,"results":"64","hashOfConfig":"35"},{"size":10875,"mtime":1657544007000,"results":"65","hashOfConfig":"35"},{"size":2272,"mtime":1657544007000,"results":"66","hashOfConfig":"35"},{"size":2984,"mtime":1658138114000,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"ot0gz6",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"70"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},"/Volumes/butbut/code/boxtest/src/index.tsx",[],["153","154"],"/Volumes/butbut/code/boxtest/src/reportWebVitals.ts",[],"/Volumes/butbut/code/boxtest/src/App.tsx",["155","156","157","158","159","160","161","162"],"/Volumes/butbut/code/boxtest/src/components/loaderService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Utils.ts",[],"/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts",[],"/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts",[],"/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts",["163","164"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { resetFileSystem, fileservice, gitservice, ipfservice, loaderservice, client, Utils } from \"../../App\";\n\nexport interface ipfsConfig {\n  host: string;\n  port: number;\n  protocol: string;\n  ipfsurl?: string;\n}\n\nexport interface ipfsFileObject {\n  path: string;\n  content: string;\n}\n\nexport class IPFSService {\n  ipfsconfig: ipfsConfig = {\n    host: process.env.REACT_APP_DEFAULT_IPFS_HOST || \"\",\n    port: parseInt(process.env.REACT_APP_DEFAULT_IPFS_PORT || \"0\"),\n    protocol: process.env.REACT_APP_DEFAULT_IPFS_PROTOCOL || \"\",\n    ipfsurl: process.env.REACT_APP_DEFAULT_IPFS_GATEWAY || \"\",\n  };\n\n  pinataConfig = {\n    key: \"\",\n    secret: \"\"\n  }\n\n  filesToSend: ipfsFileObject[] = [];\n  cid: string = \"\";\n  cidBehavior = new BehaviorSubject<string>(\"\");\n  connectionStatus = new BehaviorSubject<boolean>(false)\n  pinataConnectionStatus = new BehaviorSubject<boolean>(false)\n  \n  async getipfsurl() {\n    return this.ipfsconfig.ipfsurl;\n    //return $(\"#IPFS-url\").val() != \"\" ? $(\"#IPFS-url\").val() : false || ipfsurl;\n  }\n\n  async setipfsHost() {\n    Utils.log(this.ipfsconfig)\n    try {\n      setTimeout(() => {\n        client.cancel('dGitProvider' as any,'setIpfsConfig')\n      },2000)\n      const c = await client.call(\"dGitProvider\", \"setIpfsConfig\", this.ipfsconfig ) \n      Utils.log(c)\n      this.connectionStatus.next(c)\n      return true;\n    } catch (e) {\n      Utils.log(e)\n      toast.error(\n        \"There was an error connecting to IPFS, please check your IPFS settings if applicable.\"\n      );\n      this.connectionStatus.next(false)\n      loaderservice.setLoading(false)\n      return false;\n    }\n  }\n\n  async addFilesToPinata(){\n    loaderservice.setLoading(true)\n    try{\n      let result = await client.call(\"dGitProvider\" as any, \"pin\",this.pinataConfig.key,this.pinataConfig.secret);\n      this.cid = result;\n      this.cidBehavior.next(this.cid);\n      toast.success(`You files were uploaded to Pinata IPFS`);\n      loaderservice.setLoading(false)\n      this.pinataConnectionStatus.next(false)\n      this.pinataConnectionStatus.next(true)\n    }catch(err){\n      toast.error(\n        \"There was an error uploading to Pinata, please check your Pinata settings.\"\n      );\n      toast.error(\"There was an error uploading to Pinata!\",{autoClose:false});\n      loaderservice.setLoading(false)\n    }\n  }\n\n  async addToIpfs() {\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    loaderservice.setLoading(true)\n    try {\n      const result = await client.call('dGitProvider', 'export' as any)\n      Utils.log(result)\n      this.cid = result;\n      this.cidBehavior.next(this.cid);\n      toast.success(`You files were uploaded to IPFS`);\n      loaderservice.setLoading(false)\n    } catch (e) {\n      toast.error(\n        \"There was an error uploading to IPFS, please check your IPFS settings if applicable.\"\n      );\n      toast.error(\"There was an error uploading to IPFS!\",{autoClose:false});\n      loaderservice.setLoading(false)\n      //Utils.log(e);\n    }\n\n    return true;\n  }\n\n  async addAndOpenInVscode(){\n    await this.addToIpfs()\n    window.open(`vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${this.cid}`)\n    return `vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${this.cid}`;\n  }\n\n  async importFromCID(cid: string | undefined, name:string = \"\", local:boolean = false) {\n    toast.dismiss()\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    if (cid !== undefined) {\n      //Utils.log(\"cid\", cid);\n      this.cid = cid;\n      //$(\"#ipfs\").val(ipfservice.cid);\n      await ipfservice.clone(local);\n    }\n  }\n\n  async clone(local:boolean) {\n    await client.disableCallBacks()\n    loaderservice.setLoading(true)\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    const cid = this.cid;\n    //Utils.log(cid);\n    if (cid === \"\" || typeof cid == \"undefined\" || !cid) {\n      return false;\n    }\n    try {\n      Utils.log(\"IMPORT START\")\n      await client.call('dGitProvider', 'import' as any, {cid:cid, local:local})\n      Utils.log(\"IMPORT DONE\")\n      loaderservice.setLoading(false)\n      //await fileservice.syncToBrowser();\n      await fileservice.syncStart()\n    } catch (e) {\n      loaderservice.setLoading(false)\n      await client.enableCallBacks()\n      Utils.log(e.message)\n      toast.error(e.message,{autoClose:false});\n      toast.error('Sometimes the IPFS data is not yet available. Please try again later.',{autoClose:false});\n    }\n    \n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts",[],"/Volumes/butbut/code/boxtest/src/components/git/gitService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts",["165","166","167","168","169","170","171","172","173","174","175"],"import { toast } from \"react-toastify\";\nimport App, {\n  resetFileSystem,\n  gitservice,\n  loaderservice,\n  Utils,\n} from \"../../App\";\nimport { client } from \"../../App\";\nimport path from \"path\";\nimport { removeSlash, jsonObjectFromFileList, arrayUnique } from \"./utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileExplorerNode, fileStatusResult, statusMatrix } from \"./types\";\n\nexport const fileStatuses = [\n  [\"new,untracked\", 0, 2, 0], // new, untracked\n  [\"added,staged\", 0, 2, 2], //\n  [\"added,staged,with unstaged changes\", 0, 2, 3], // added, staged, with unstaged changes\n  [\"unmodified\", 1, 1, 1], // unmodified\n  [\"modified,unstaged\", 1, 2, 1], // modified, unstaged\n  [\"modified,staged\", 1, 2, 2], // modified, staged\n  [\"modified,staged,with unstaged changes\", 1, 2, 3], // modified, staged, with unstaged changes\n  [\"deleted,unstaged\", 1, 0, 1], // deleted, unstaged\n  [\"deleted,staged\", 1, 0, 0],\n  //[\"deleted\", 1, 1, 0], // deleted, staged\n  [\"unmodified\", 1, 1, 3],\n  [\"deleted,not in git\", 0, 0, 3],\n  [\"unstaged,modified\", 1, 2, 0]\n];\n\nconst statusmatrix: statusMatrix[] = fileStatuses.map((x: any) => {\n  return {\n    matrix: x.shift().split(\",\"),\n    status: x,\n  };\n});\n\nexport class LsFileService {\n  filetreecontent = new BehaviorSubject<fileExplorerNode>({ children: [] });\n  canUseApp = new BehaviorSubject<boolean>(true);\n  confirmDeletion = new BehaviorSubject<boolean | undefined>(undefined);\n  fileStatusResult: fileStatusResult[] = [];\n\n\n  // RESET FUNCTIONS\n\n  async clearDb() {\n    const req = indexedDB.deleteDatabase(\"remix-workspace\");\n    let me = this;\n    req.onsuccess = async function () {\n      toast(\"Deleted database successfully\");\n      //await me.gitlog()\n\n      await me.showFiles();\n      await gitservice.init();\n    };\n  }\n\n  async syncStart() {\n    //await resetFileSystem();\n    Utils.log('sync start')\n    await this.syncFromBrowser();\n    //await gitservice.init();\n  }\n\n  async syncFromBrowser(isLocalhost = false) {\n    loaderservice.setLoading(true)\n    await client.disableCallBacks();\n    if (isLocalhost) {\n      this.canUseApp.next(false);\n      loaderservice.setLoading(false)\n      return;\n    }\n    try {\n      const workspace = await client.call(\n        \"filePanel\",\n        \"getCurrentWorkspace\"\n      );\n      if (workspace.isLocalhost) {\n        this.canUseApp.next(false);\n        return\n      }\n      Utils.log(\"SET NAME\", workspace);\n      gitservice.reponameSubject.next(workspace.name);\n      gitservice.reponame = workspace.name;\n      this.canUseApp.next(true);\n    } catch (e) {\n      this.canUseApp.next(false);\n      Utils.log(e)\n      Utils.log(\"no workspace\");\n    }\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async createDirectoriesFromString(strdirectories: string) {\n    const ignore = [\".\", \"/.\", \"\"];\n    ////Utils.log(\"directory\", strdirectories, ignore.indexOf(strdirectories));\n    if (ignore.indexOf(strdirectories) > -1) return false;\n    let directories: string[] = strdirectories.split(\"/\");\n    ////Utils.log(\"create directory\", directories);\n    for (let i = 0; i < directories.length; i++) {\n      ////Utils.log(directories[i]);\n      let previouspath = \"\";\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      ////Utils.log(\"creating \", finalPath);\n      try {\n        await client.call(\"fileManager\", \"mkdir\", finalPath);\n      } catch (e) {\n        // //Utils.log(e)\n      }\n    }\n  }\n\n  async viewFile(args: any) {\n    const filename = args;\n    //Utils.log(\"view file\", filename);\n    //$(args[0].currentTarget).data('file')\n    try {\n      await client.call(\"fileManager\", \"open\", Utils.addSlash(filename));\n    } catch (e) {\n      toast.error(\"file does not exist in Remix\", { autoClose: false });\n    }\n  }\n\n  async getFileStatusMatrix() {\n    this.fileStatusResult = await gitservice.statusMatrix();\n    Utils.log(\"STATUS MATRIX\", this.fileStatusResult);\n    // let filesinstaging = await gitservice.listFilesInstaging();\n    // //Utils.log(\"FILES IN STAGING\", filesinstaging);\n    // let filesingit = await gitservice.listFiles();\n    // //Utils.log(\"FILES IN GIT\", filesingit);\n\n    this.fileStatusResult.map((m) => {\n      statusmatrix.map((sm) => {\n        if (JSON.stringify(sm.status) === JSON.stringify(m.status)) {\n          //Utils.log(m, sm);\n          m.statusNames = sm.matrix;\n        }\n      });\n    });\n    Utils.log(\"file status\", this.fileStatusResult);\n  }\n\n  getFilesCountByStatus(status: string) {\n    let count = 0;\n    ////Utils.log(\"STATUS?\", status);\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(status) > -1) {\n          count++;\n          ////Utils.log(\"COUNT\", count);\n        }\n      }\n    });\n    return count;\n  }\n\n  getFilesByStatus(status: string) {\n    let result:any[] = []\n    //Utils.log(\"FILE STATUS MAP\", this.fileStatusResult)\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(status) > -1) {\n          result.push(m)\n        }\n      }\n    });\n    return result;\n  }\n\n  getFilesWithNotModifiedStatus(){\n    let result:any[] = []\n    //Utils.log(\"FILE STATUS MAP\", this.fileStatusResult)\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(\"unmodified\") === -1) {\n          result.push(m)\n        }\n      }\n    });\n    return result;\n  }\n\n  getFileStatusForFile(filename: string) {\n    ////Utils.log(\"checking file status\", filename);\n    for (let i: number = 0; i < this.fileStatusResult.length; i++) {\n      if (this.fileStatusResult[i].filename === filename)\n        return this.fileStatusResult[i].statusNames;\n    }\n  }\n\n  async showFiles() {\n    loaderservice.setLoading(true)\n    //$('#files').show()\n    //$('#diff-container').hide()\n    //let files = await gitservice.getStatusMatrixFiles(); //await this.getDirectory(\"/\");\n    //Utils.log(\"start get files\");\n    //Utils.log(\"matrix files\", files);\n    //let filesinbrowser = await this.getDirectoryFromIde(\"/\");\n    //Utils.log(\"get matrix result\", files, filesinbrowser);\n\n    try {\n      await this.getFileStatusMatrix();\n      //Utils.log(\"files\", files);\n      //let jsonfiles = await jsonObjectFromFileList(\n      //  arrayUnique(filesinbrowser.concat(files))\n      //);\n      //Utils.log(\"json files\", jsonfiles);\n      //this.filetreecontent.next(jsonfiles);\n    } catch (e) {\n      //Utils.log(e);\n    }\n    try {\n      await gitservice.gitlog();\n    } catch (e) {}\n    try {\n      await gitservice.getBranches();\n    } catch (e) {}\n    try {\n      await gitservice.getRemotes();\n    } catch (e) {}\n    try {\n      await gitservice.getStorageUsed();\n    } catch (e) {}\n    try {\n      await gitservice.diffFiles('');\n    } catch (e) {}\n    await gitservice.checkForFilesCommmited();\n    loaderservice.setLoading(false)\n    return true;\n  }\n\n  async getDirectoryFromIde(dir: string, onlyDirectories: boolean = false) {\n    //Utils.log(\"get directory from ide\", dir);\n    let result: string[] = [];\n    if (!dir.startsWith(\"/\")) {\n      dir = \"/\" + dir;\n    }\n    try {\n      const files = await client.call(\"fileManager\", \"readdir\", dir);\n      Utils.log(\"READDIR\", files);\n      Utils.log(\"normalize\", normalize(files));\n\n      let fileArray = normalize(files);\n\n      Utils.log(fileArray);\n\n      for (let i = 0; i < fileArray.length; i++) {\n        let fi: any = fileArray[i];\n        if (typeof fi !== \"undefined\") {\n          ////Utils.log('looking into ', fi, dir)\n          //if (dir === \"/\") dir = \"\";\n          //dir = removeSlash(dir)\n          let type = fi.data.isDirectory;\n          ////Utils.log(\"type\",type)\n          if (type === true) {\n            //Utils.log(\"is directory, so get \", `${fi.filename}`);\n            if (onlyDirectories === true) result = [...result, fi.filename];\n\n            result = [\n              ...result,\n              ...(await this.getDirectoryFromIde(\n                `${fi.filename}`,\n                onlyDirectories\n              )),\n            ];\n          } else {\n            //Utils.log(\"is file \", `${fi.filename}`);\n            if (onlyDirectories === false) result = [...result, fi.filename];\n          }\n        }\n      }\n\n      Utils.log(\"TREE\", result);\n      return result;\n    } catch (e) {\n      return [];\n    }\n  }\n}\n\nconst normalize = (filesList: any): File[] => {\n  const folders: any[] = [];\n  const files: any[] = [];\n  //const prefix = path.split('/')[0]\n\n  Object.keys(filesList || {}).forEach((key) => {\n    //const path = prefix + '/' + key\n\n    if (filesList[key].isDirectory) {\n      folders.push({\n        filename: key,\n        data: filesList[key],\n      });\n    } else {\n      files.push({\n        filename: key,\n        data: filesList[key],\n      });\n    }\n  });\n\n  return [...folders, ...files];\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts",[],"/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx",[],"/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx",["176","177"],"import React, { createRef, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice, Utils } from \"../../../App\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch, setNewBranch] = useState({ value: \"\" });\n  let ModalRef = createRef<ConfirmDelete>();\n  let show: boolean = false;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewBranch({ value: e.currentTarget.value });\n  };\n\n  gitservice.branches\n    .subscribe((x) => {\n      //Utils.log(branches);\n      if (branches) {\n        show = branches.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      //Utils.log(branch);\n    })\n    .unsubscribe();\n  const checkout = async (oid: string, remote: string | 'origin') => {\n    try {\n      await ModalRef.current?.show();\n      let cmd = {ref:oid, remote:remote}\n      gitservice.checkout(cmd);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n  return (\n    <>\n      <hr></hr>\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Branches</h4>\n        <ConfirmDelete\n          title={\"Checking out\"}\n          text={\n            <div>\n              Checking out a branch will delete the files in Remix.<br></br>\n              <strong>Check if you have uncommited work.</strong>\n              <br></br>Continue?\n            </div>\n          }\n          ref={ModalRef}\n        ></ConfirmDelete>\n        <Alert className=\"w-md-50 w-100 text-break\" variant=\"success\">\n          {branch}\n        </Alert>\n        {branches?.map((branch, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <div className=\"col-md-2 col-6\">{branch.name} on {branch.remote || 'local'}</div>\n              <div className=\"col\">\n                <span className=\"float-right\">\n                  <div\n                    onClick={async () => await checkout(branch.name, branch.remote)}\n                    className=\"btn btn-primary btn-sm checkout-btn\"\n                  >\n                    checkout\n                  </div>\n                </span>\n              </div>\n            </div>\n          );\n        })}\n        <hr />\n        <h4>Create branch</h4>\n        <div className=\"form-group\">\n          <label>Branch name</label>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-md-25 w-100\"\n            type=\"text\"\n            id=\"newbranchname\"\n          />\n        </div>\n        <button\n          onClick={async () => gitservice.createBranch(newBranch.value)}\n          className=\"btn w-md-25 w-100 btn-primary\"\n          id=\"createbranch-btn\"\n        >\n          git branch\n        </button>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx",["178"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React, { createRef } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice } from \"../../../App\";\nimport { default as dateFormat } from \"dateformat\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n  let ModalRef = createRef<ConfirmDelete>();\n  let show = false;\n\n  gitservice.commits\n    .subscribe((x) => {\n      //Utils.log(commits);\n      if (commits) {\n        show = commits.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = dateFormat(\n      commit.commit.committer.timestamp * 1000,\n      \"dddd, mmmm dS, yyyy h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const checkout = async (oid:string) => {\n    try {\n      await ModalRef.current?.show();\n      gitservice.checkout({ref:oid})\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <hr />\n      <div className={show ? \"\" : \"d-none\"}>\n\n        <ConfirmDelete title={\"Checking out\"} text={<div>Checking out a commit will delete the files in Remix.<br></br><strong>Check if you have uncommited work.</strong><br></br>Continue?</div>} ref={ModalRef}></ConfirmDelete>\n        <div className=\"container-fluid p-0\">\n        <h4>Commits</h4>\n          {commits?.map((commit) => {\n            return (\n              <div key={commit.oid} className=\"p-0\">\n                <div className=\"font-weight-bold\">{commit.commit.message}</div>\n                <div className=\"text-muted small\">{commit.commit.author.name || \"\"}</div>\n                <div className=\"text-muted small\">{getDate(commit)}</div>\n                <div className=\"text-truncate text-muted small\">{commit.oid}</div>\n                <div\n                  onClick={async () => await checkout(commit.oid)}\n                  className=\"btn btn-primary btn-sm checkout-btn ml-0 ml-md-0\"\n                >\n                  git checkout\n                </div>\n                <hr></hr>\n              </div>\n            );\n          })}\n\n          <div\n            onClick={async () => await checkout(\"main\")}\n            className=\"btn btn-primary btn-sm checkout-btn mt-2 d-none\"\n            data-oid=\"main\"\n          >\n            git checkout main\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx",["179","180","181","182","183","184"],"import React, { createRef } from \"react\";\nimport { fileservice, gitservice, ipfservice, localipfsstorage, resetFileSystem, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFileArchive } from \"@fortawesome/free-regular-svg-icons\"\nimport { faCloudDownloadAlt } from \"@fortawesome/free-solid-svg-icons\"\ninterface FileToolsProps {}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n  let ModalRef = createRef<ConfirmDelete>();\n\n  const clearAll = async () => {\n    try {  \n      await ModalRef.current?.show()\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <div onClick={async ()=> gitservice.zip()} className='btn btn-primary mb-3'>download as zip <FontAwesomeIcon icon={faFileArchive}></FontAwesomeIcon></div><br></br>\n      <div hidden onClick={async ()=> ipfservice.addAndOpenInVscode()} className='btn btn-primary'>clone in VSCode <FontAwesomeIcon icon={faCloudDownloadAlt}></FontAwesomeIcon></div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx",["185","186"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { client, fileservice } from \"../../../App\";\n\ninterface GitStatusProps { }\n\nexport const GitStatus: React.FC<GitStatusProps> = ({ }) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged = 0;\n  let untracked = 0;\n  let deleted = 0;\n  let modified = 0;\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesCountByStatus(\"staged\");\n      untracked = fileservice.getFilesCountByStatus(\"untracked\");\n      deleted = fileservice.getFilesCountByStatus(\"deleted\");\n      modified = fileservice.getFilesCountByStatus(\"modified\");\n      show = (deleted > 0 || staged > 0 || untracked > 0 || modified > 0)\n      let total = deleted + staged + untracked + modified\n      \n\n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: total===0? 'none':total,\n          type: total===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n\n    })\n    .unsubscribe();\n\n  useEffect(() => { }, []);\n\n  return (\n    <>\n      {show ?\n        <>\n          <hr></hr>\n          <div>Git status</div>\n          <div className=\"alert alert-success\">\n            {staged > 0 ? <div>{staged} staged</div> : <></>}\n            {modified > 0 ? <div>{modified} modified</div> : <></>}\n            {untracked > 0 ? <div>{untracked} untracked</div> : <></>}\n            {deleted > 0 ? <div>{deleted} deleted</div> : <></>}\n          </div></>\n        : <></>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx",["187"],"import React from \"react\";\n\nimport { LocalIPFSView } from \"../LocalStorage/LocalIPFSView\";\n\nimport { IPFSImporter } from \"./IPFSImporter\";\nimport { PinataImport } from \"./PinataImport\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    <>\n        <hr></hr>\n        <IPFSImporter/>\n        <PinataImport></PinataImport>\n        <LocalIPFSView/>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx",["188","189","190"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { client, ipfservice, useLocalStorage, Utils } from \"../../App\";\n\ninterface PinataConfigProps {}\n\nexport const PinataConfig: React.FC<PinataConfigProps> = ({}) => {\n  const [key, setKey] = useLocalStorage(\"pinatakey\", \"\");\n  const [secret, setSecret] = useLocalStorage(\"pinatasecret\", \"\");\n  const [status, setStatus] = useState<boolean>(false);\n\n  const setKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setKey(e.currentTarget.value);\n    setConfig();\n  };\n  const setSecretChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSecret(e.currentTarget.value);\n    setConfig();\n  };\n\n  useEffect(() => {\n    const check = async () => {\n      client.onload(async () => {\n        await checkconfig();\n      });\n    };\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    try {\n      setTimeout(() => {\n        client.cancel('dGitProvider' as any, 'pinList')\n      },3000)\n      let r = await client.call(\"dGitProvider\" as any, \"pinList\", key, secret);\n      setStatus(true);\n      ipfservice.pinataConnectionStatus.next(false);\n      ipfservice.pinataConnectionStatus.next(true);\n      setConfig();\n    } catch (err) {\n      Utils.log(err);\n      setStatus(false);\n      ipfservice.pinataConnectionStatus.next(false);\n    }\n  };\n\n  const setConfig = async () => {\n    ipfservice.pinataConfig = {\n      key: key,\n      secret: secret,\n    };\n  };\n\n  return (\n    <>\n      <hr></hr>\n      <h5>Pinata API credentials</h5>\n      <label>API KEY</label>\n      <input\n        onChange={setKeyChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={key}\n      />\n      <label>API SECRET</label>\n      <input\n        onChange={setSecretChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={secret}\n      />\n      <button id='btncheckpinata' className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {status ? (\n        <div id='pinatachecksuccess' className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are working correctly.\n        </div>\n      ) : (\n        <div id='pinatacheckerror' className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx",["191","192"],"import React, { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, useLocalStorage } from \"../../App\";\n\ninterface IPFSConfigProps {}\n\nexport const IPFSConfig: React.FC<IPFSConfigProps> = ({}) => {\n  const [host, sethost] = useLocalStorage(\n    \"IPFS_HOST\",\n    ipfservice.ipfsconfig.host\n  );\n  const [port, setport] = useLocalStorage(\n    \"IPFS_PORT\",\n    ipfservice.ipfsconfig.port.toString()\n  );\n  const [protocol, setprotocol] = useLocalStorage(\n    \"IPFS_PROTOCOL\",\n    ipfservice.ipfsconfig.protocol\n  );\n  const [url, setUrl] = useLocalStorage(\n    \"IPFS_URL\",\n    ipfservice.ipfsconfig.ipfsurl || \"\"\n  );\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  const setHostChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    sethost(e.currentTarget.value);\n    ipfservice.ipfsconfig.host = e.currentTarget.value;\n  };\n  const setPortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setport(e.currentTarget.value);\n    ipfservice.ipfsconfig.port = parseInt(e.currentTarget.value);\n  };\n  const setProtocolChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setprotocol(e.currentTarget.value);\n    ipfservice.ipfsconfig.protocol = e.currentTarget.value;\n  };\n  const setUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(e.currentTarget.value);\n    ipfservice.ipfsconfig.ipfsurl = e.currentTarget.value;\n  };\n\n  useEffect(() => {\n    const check  = async () => { \n    //  client.onload(() => {\n        ipfservice.ipfsconfig.host = host;\n        ipfservice.ipfsconfig.ipfsurl = url;\n        ipfservice.ipfsconfig.protocol = protocol;\n        ipfservice.ipfsconfig.port = port;\n    //    checkconfig();\n    //  });\n    }\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    await ipfservice.setipfsHost();\n  };\n\n  return (\n    <>\n      <h5>Custom IPFS gateway</h5>\n      <label>HOST</label>\n\n      <input\n        onChange={setHostChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"hostname\"\n        value={host}\n      />\n      <label>PORT</label>\n      <input\n        onChange={setPortChange}\n        className=\"form-control w-100\"\n        type=\"number\"\n        id=\"port\"\n        value={port}\n      />\n      <label>PROTOCOL</label>\n      <input\n        onChange={setProtocolChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={protocol}\n      />\n      <label>URL</label>\n      <input\n        onChange={setUrlChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={url}\n      />\n      <button id='btncheckipfs' className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {IPFSStatus ? (\n        <div id='ipfschecksuccess' className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are working correctly.\n        </div>\n      ) : (\n        <div id='ipfscheckerror' className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx",[],"/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx",["193","194","195"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport {\n  boxservice,\n  gitservice,\n  ipfservice,\n  localipfsstorage,\n} from \"../../App\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  const PinataStatus = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  const canExport = useBehaviorSubject(gitservice.canExport);\n\n  ipfservice.pinataConnectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n  gitservice.canExport.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (cid !== \"\" && cid !== undefined && cid) {\n      //Utils.log(ipfservice.cid);\n      return (\n        <>\n          <div id='ipfshashresult' data-hash={ipfservice.cid} className='overflow-hidden w-100'>IPFS Hash: {ipfservice.cid}</div>\n          <br></br>\n          <CopyToClipboard\n            text={ipfservice.cid}\n            onCopy={() => {\n              toast.success(\"Copied to clipboard.\");\n            }}\n          >\n            <button className=\"btn btn-primary mb-2\">Copy to clipboard</button>\n          </CopyToClipboard>\n          <br></br>\n          <a className=\"btn btn-primary mb-2\" target=\"_blank\" href={getUrl()} id=\"CID\">\n            View files\n          </a>\n          <br></br>\n          <a className=\"btn btn-primary\" target=\"_blank\" href={getVscodeUrl()} hidden id=\"VSCODE\">\n            Clone in VSCode\n          </a>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  useEffect(() => {\n    //Utils.log(\"export view\");\n    //ipfservice.setipfsHost();\n  }, []);\n\n  const addFilesToIpfs = async () => {\n    try {\n      await ipfservice.addToIpfs();\n      await localipfsstorage.addToStorage(\n        await localipfsstorage.createBoxObject()\n      );\n    } catch (e) {}\n  };\n\n  const addFilesToPinata = async () =>{\n    try {\n      await ipfservice.addFilesToPinata();\n    } catch (e) {}\n  }\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const getVscodeUrl = () =>{\n    return `vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${cid}`;\n  }\n\n  return (\n    <>\n      <hr></hr>\n      {canExport ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-danger w-md-25 w-100 mt-2\" role=\"alert\">\n          Commit some files first, then you can export.\n        </div>\n      )}\n       <h4>Export to Pinata Cloud</h4>\n       {PinataStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your Pinata API key is incorrect or missing. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(PinataStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToPinata()}\n      >\n        Export to Pinata\n      </button>\n      <hr></hr>\n      <h4>Export to Local storage & IPFS</h4>\n      {IPFSStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(IPFSStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"addtocustomipfs\"\n        onClick={async () => await addFilesToIpfs()}\n      >\n        Export to custom IPFS & store in local storage\n      </button>\n\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx",["196","197"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, fileservice, gitservice, Utils } from \"../../App\";\nimport path from 'path'\nimport { Col, Row } from \"react-bootstrap\";\nimport { faUndo, faPlus, faMinus, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\ninterface GitStatusProps {}\n\nexport const CompactExplorer: React.FC<GitStatusProps> = ({}) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged:any[] = [];\n  let untracked:any[];\n  let deleted:any[];\n  let modified:any[];\n  let alltrackedFiles:any[];\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesByStatus(\"staged\");\n      untracked = fileservice.getFilesByStatus(\"untracked\");\n      deleted = fileservice.getFilesByStatus(\"deleted\");\n      modified = fileservice.getFilesByStatus(\"modified\");\n      show = (deleted.length>0 || staged.length>0 ||  untracked.length>0 || modified.length>0)\n      alltrackedFiles = fileservice.getFilesWithNotModifiedStatus();\n      alltrackedFiles = alltrackedFiles.filter((trackedFile) => {\n        return staged.findIndex((stagedFile) => stagedFile.filename === trackedFile.filename) === -1\n      })\n      let total = alltrackedFiles.length\n      const badges = total + staged.length\n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: badges===0? 'none':badges,\n          type: badges===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n    })\n    .unsubscribe();\n\n  useEffect(() => {}, []);\n\n  function RenderGroups(){\n      //const groups = [{name:'Staged', group: staged}, {name:'Untracked',group:untracked},{name:'Modified', group:modified},{name:'Deleted', group:deleted}]\n      const groups = [{name:'Staged', group: staged}, {name:'Changes', group: alltrackedFiles}]\n      return (<>\n        {\n           groups.map((ob:any, index:number)=>{\n                return (\n                    <div key={`h${index}`}>\n                    {ob.group.length>0? <h5 className='mb-3 mt-3'>{ob.name}</h5>:<></>}\n                    <RenderFiles Files={ob.group} Type={ob.name}></RenderFiles>\n                    </div>\n                )\n            })\n        }\n      \n      </>)\n  }\n\n  async function fileClick(file:any){\n    Utils.log(file)\n    let status = fileservice.getFileStatusForFile(file.filename || \"\");\n    if(status?.indexOf(\"modified\")  !== -1){\n      await client.call('manager', 'activatePlugin', 'gitdiff')\n      await client.call('gitdiff' as any, 'diff', file.filename)\n      await client.call('tabs' as any, 'focus', 'gitdiff')\n    }else{\n      await client.call('fileManager', 'open', file.filename)\n    }\n  }\n\n  function RenderFiles(ob:any) {\n      Utils.log('FILES', ob)\n      return (<>\n        {\n            ob.Files.map((file:any, index: number)=>{\n                return (\n                  <div key={`h${index}`}>\n                    <Row className='mb-1'>\n                        <Col className='col-8'>\n                        <div className='pointer text-truncate' onClick={async() => fileClick(file)}>\n                          <span data-id={`file${ob.Type}${path.basename(file.filename)}`} className='font-weight-bold'>{path.basename(file.filename)}</span>\n                          <div className='text-secondary'> {file.filename}</div>\n                        </div>\n                        </Col>\n                        <Col className='col-4 p-0'>\n                          <Row>\n                        <RenderButtons File={file} Type={ob.Type}></RenderButtons>\n                        </Row>\n                        </Col>\n                    </Row>\n\n\n                    </div>\n                )\n            })\n        }\n      </>)\n  }\n\n  function FunctionStatusIcons(ob: any) {\n    let status = ob.status\n    return (<>\n    <Col className='col-2 p-0'>\n    {status?.indexOf(\"modified\")  === -1? <></>: <button  className='btn btn-sm mr-1'>M</button> }\n    {status?.indexOf(\"untracked\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>U</button> }\n    {status?.indexOf(\"deleted\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>D</button> }\n    {status?.indexOf(\"added\") === -1 ? <></> : <button className='btn btn-sm  mr-1'>U</button>}\n    </Col>\n    </>)\n  }\n \n\n  function RenderButtons(ob:any){   \n        let status = fileservice.getFileStatusForFile(ob.File.filename || \"\");\n      if(ob.Type === 'Untracked'){\n        return <>\n            <button  onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Staged'){\n        return <>\n        <Col className='col-8 p-0'>\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n            {status?.indexOf(\"deleted\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n           \n            {status?.indexOf(\"deleted\") !== -1 ? <></> : <button data-id={`unStage${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faMinus} className=\"\" /></button>}\n            </Col>\n            <FunctionStatusIcons status={status}/>\n            \n        </>\n      }\n      if(ob.Type === 'Modified'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n            <button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Deleted'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n        </>\n      }\n      if(ob.Type === 'Changes'){\n        return <>\n          <Col className='col-8 p-0'>\n            {status?.indexOf(\"deleted\")  === -1? <></>:<><button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} data-id={`undo${ob.Type}${path.basename(ob.File.filename)}`} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button><button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button></>}\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} data-id={`undo${ob.Type}${path.basename(ob.File.filename)}`} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n           {(status?.indexOf(\"unstaged\")  !== -1 || status?.indexOf(\"deleted\")  !== -1)? <></>:<button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n           {(status?.indexOf(\"unstaged\")  !== -1 && status?.indexOf(\"modified\")  !== -1)? <button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>:<></>}  \n          </Col>\n            <FunctionStatusIcons status={status}/>\n        </>\n      }\n      return <></>\n  }\n\n  return (\n    <>\n    {show?\n    <>\n    <div>\n        <button data-id='stageAll' onClick={async () => await gitservice.addAllToGit()} className='btn btn-sm btn-primary'>Stage all</button>\n        <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary ml-2'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n        <hr></hr>\n        <RenderGroups></RenderGroups>\n    </div></>\n    :<>Nothing to commit\n    <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary ml-2'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n    </>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/github/github.tsx",["198","199","200","201"],"/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/utils.ts",["202","203","204","205","206"],"import path from \"path\";\nimport { isForOfStatement } from \"typescript\";\nimport { Utils } from \"../../App\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n\n  //Utils.log(\"F\", files);\n\n  files.map((f, i) => {\n    files[i] = Utils.addSlash(files[i]);\n    const dirname = path.dirname(files[i]);\n    //Utils.log(dirname, dirname.startsWith(\"/.\"));\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    //Utils.log(ob);\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      ////Utils.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n      if (f.fullname === \"/\") f.parentId = null;\n    }\n  });\n  //Utils.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  //Utils.log(\"OB\", ob);\n  //ob.sort(sortbydirectorylevel)\n\n  const nest = (items: any, id: any = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  //Utils.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  //Utils.log(\"OB\", ob);\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  ////Utils.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n\n\nexport const arrayUnique = (array:any)=>{\n  var a = array.concat();\n  for(var i=0; i<a.length; ++i) {\n      for(var j=i+1; j<a.length; ++j) {\n          if(a[i] === a[j])\n              a.splice(j--, 1);\n      }\n  }\n\n  return a;\n}","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx",["207","208"],"import { Button, Modal } from 'react-bootstrap';\nimport React from 'react'\n\n\ntype MyProps = { title:string, text:any };\ntype MyState = { show: boolean };\n\nexport default class ConfirmDelete extends React.Component<MyProps, MyState> {\n    promiseInfo:any\n    constructor(props:any){\n      super(props)\n      this.state = {\n        show: false\n      };\n  \n      this.promiseInfo = {};\n    }\n    show = async () => {\n      return new Promise((resolve, reject) => {\n        this.promiseInfo = {\n          resolve,\n          reject\n        };\n        this.setState({\n          show: true\n        });\n      });\n    };\n  \n    hide = async () => {\n      const { resolve, reject } = this.promiseInfo;\n      this.setState({\n        show: false\n      });\n      reject()\n    };\n\n    ok = async ()=>{\n        const { resolve, reject } = this.promiseInfo;\n        this.setState({\n          show: false\n        });\n        resolve()\n    }\n  \n    render() {\n      const { show } = this.state;\n      \n      return (\n        <>\n\n  \n        <Modal show={show} onHide={async ()=> await this.hide()}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.props.text}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={async ()=> await this.hide()}>\n              No\n            </Button>\n            <Button variant=\"primary\" onClick={async ()=> await this.ok()}>\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n      );\n    }\n  }","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx",["209","210"],"import React, { createRef, useState } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus)\n  let ModalRef = createRef<ConfirmDelete>();\n  ipfservice.connectionStatus.subscribe((x)=>{}).unsubscribe(); \n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      setTimeout(async () => await ipfservice.importFromCID(cid,name,false), 1500)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <div className=\"form-group\">\n        <h4>Import from IPFS hash</h4>\n        <label>IPFS HASH</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfshash\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button disabled={(IPFSStatus?false:true)||(cid.value===\"\"?true:false)} onClick={async()=> await importFromCID(cid.value, cid.value)} className=\"btn w-md-25 w-100 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      {IPFSStatus?<></>:<div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n        Your IPFS settings are incorrect. Unable to connect. Check your settings.\n      </div>}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["211","212","213","214"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, localipfsstorage } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\nimport dateFormat from \"dateformat\";\n\ninterface LocalIPFSViewProps { }\n\nexport const LocalIPFSView: React.FC<LocalIPFSViewProps> = ({ }) => {\n  const boxobjects = useBehaviorSubject(localipfsstorage.boxObjects);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  useEffect(() => {\n    //localipfsstorage.init();\n  }, []);\n\n  localipfsstorage.boxObjects\n    .subscribe((x) => {\n      //Utils.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a className=\"btn btn-primary btn-sm mr-2\" target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      setTimeout(async () => await ipfservice.importFromCID(cid, name, true), 1500)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteItem = async (o: any) => {\n    try {\n      await EraseModalRef.current?.show();\n      await localipfsstorage.deleteFromStorage(o?.cid)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  }\n\n  const getDate = (str: any) => {\n    let date = dateFormat(\n      str * 1000,\n      \"dd/mm/yy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  return (\n    <>\n      <h4>Import from Local Storage</h4>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <ConfirmDelete title={\"Deleting\"} text={\"Are you sure you want to erase this item?\"} ref={EraseModalRef}></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <Card className=\"w-md-75 w-100\">\n                <Card.Body>\n                  <h5>{o.key}</h5>\n                  <div className=\"row\">\n                    <div className=\"col d-none\">IPFS</div>\n                    <div className=\"col\">{o.cid}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">{getDate(o.datestored)}</div>\n                  </div>\n                  <div className=\"row d-none\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col p-0\">\n                <button\n                  data-hash = {o.cid}\n                  onClick={async () => await importFromCID(o.cid, o.key)}\n                  className=\"localipfsimportbutton btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n                {getViewButton(o.cid)}\n                <CopyToClipboard\n                  text={o.cid || \"\"}\n                  onCopy={() => {\n                    toast.success(\"Copied to clipboard.\");\n                  }}\n                >\n                  <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash</button>\n                </CopyToClipboard>\n                <button\n                  onClick={async () =>\n                    await deleteItem(o)\n                  }\n                  className=\"btn btn-danger btn-sm ml-2 delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n        {boxobjects?.length === 0 ? <>Nothing has been stored here yet.</> : <></>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx",["215","216","217","218","219","220"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect, useState } from \"react\";\nimport { Accordion, Alert, Button, Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, loaderservice, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport dateFormat from \"dateformat\";\nimport { toast } from \"react-toastify\";\n\ninterface PinataImportProps { }\n\nexport const PinataImport: React.FC<PinataImportProps> = ({ }) => {\n  const status = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  let [data, setData] = useState<any[]>([]);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  let EraseModalOld = createRef<ConfirmDelete>();\n  ipfservice.pinataConnectionStatus.subscribe((x) => { }).unsubscribe();\n\n  useEffect(() => {\n    if (status) read();\n  }, [status]);\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const read = async () => {\n    try {\n      try {\n        setTimeout(() => {\n          client.cancel('dGitProvider' as any, 'pinList')\n        }, 3000)\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"pinList\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret\n        );\n        let rows = (r.rows || []).filter((o: any) => {\n          return o.metadata.keyvalues;\n        });\n        for (let row of rows) {\n          try {\n            row.metadata.keyvalues.commits = JSON.parse(\n              row.metadata.keyvalues.commits\n            );\n          } catch (e) {\n            row.metadata.keyvalues.commits = [];\n          }\n        }\n        // find any row that is included in another row with the same tree\n        for (let row of rows) {\n          if (row.metadata.keyvalues.commits[0]) {\n            const tree = row.metadata.keyvalues.commits[0].commit.tree;\n            const oid = row.metadata.keyvalues.commits[0].oid;\n            const doubles = rows.filter((subrow: any) => {\n              if (subrow.metadata.keyvalues.commits) {\n                return subrow.metadata.keyvalues.commits.find((commit: any) => {\n                  return commit.commit.tree === tree && commit.oid === oid && subrow.metadata.keyvalues.ref !== oid\n                })\n              } else {\n                return false\n              }\n            });\n            row.hasChild = doubles.length > 0\n            row.doubles = doubles\n            //Utils.log(\"DOUBLES OF,,,\", oid, tree, doubles)\n          }\n        }\n        //Utils.log(\"ROWS\", rows);\n        setData(rows);\n      } catch (err) {\n        Utils.log(err);\n      }\n      //this.objects = r? JSON.parse(r):[];\n      //Utils.log(\"READ CONFIG\",this.objects);\n    } catch (e) { }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a\n          className=\"btn btn-primary btn-sm mr-2\"\n          target=\"_blank\"\n          href={getUrl(cid)}\n          id=\"CID\"\n        >\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getDate = (str: any) => {\n    let date = dateFormat(\n      str * 1000,\n      \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      setTimeout(async () => await ipfservice.importFromCID(cid, name, false),1500)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteOldItems = async () => {\n    try {\n      await EraseModalOld.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        for (let o of data) {\n          if (o.hasChild) {\n            Utils.log(\"delete \", o)\n            let r = await client.call(\n              \"dGitProvider\" as any,\n              \"unPin\",\n              ipfservice.pinataConfig.key,\n              ipfservice.pinataConfig.secret,\n              o.ipfs_pin_hash\n            );\n          }\n        }\n\n        await read();\n      } catch (err) {\n        Utils.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n\n    } catch (e) {\n\n    }\n  }\n\n  const deleteItem = async (cid: string) => {\n    try {\n      await EraseModalRef.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"unPin\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret,\n          cid\n        );\n        await read();\n      } catch (err) {\n        Utils.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n      //await localipfsstorage.deleteFromStorage(o?.ipfs_pin_hash);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n\n      <h4>Import from Pinata</h4>\n      <Button onClick={async () => deleteOldItems()} className='mb-2 btn btn-sm btn-danger'>Remove old commits <FontAwesomeIcon icon={faTrash} /></Button>\n      <ConfirmDelete\n        title={\"Importing\"}\n        text={\"This will create a new workspace! Continue?\"}\n        ref={ModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deleting\"}\n        text={\"Are you sure you want to erase this item?\"}\n        ref={EraseModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deletingold\"}\n        text={\"Are you sure you want to delete commits that have been superseded?\"}\n        ref={EraseModalOld}\n      ></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(data || [])\n          .filter((o: any) => {\n            return o.metadata.keyvalues;\n          })\n          .map((o: any, index: any) => {\n            return (\n              <div key={index} className=\"row p-0\">\n                <Card className=\"w-md-75 w-100\">\n                  <Card.Body>\n                    <h5>{o.metadata.name}</h5>\n                    <div className=\"row d-none\">\n                      <div className=\"col\">IPFS</div>\n                      <div className=\"col\">{o?.ipfs_pin_hash}</div>\n                    </div>\n                    <div className=\"row d-none\">\n                      <div className=\"col d-none\">DATE EXPORTED</div>\n                      <div className=\"col\">\n                        {dateFormat(\n                          o?.date_pinned,\n                          \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">\n                        {o?.metadata?.keyvalues?.message}\n                      </div>\n                    </div>\n                    <div className=\"row d-none\">\n                      <div className=\"col\">OID</div>\n                      <div className=\"col\">{o?.metadata?.keyvalues?.ref}</div>\n                    </div>\n                    {o.hasChild ?\n\n                      <>\n                        <Alert className='mt-1' variant='warning'>This commit has been superseded. You can probably remove it.<br></br>\n                          Newer commits:<br></br>\n                          {\n                            o.doubles.map((double: any) => {\n                              return <div>{double.metadata?.name}</div>\n                            })\n                          }\n                        </Alert>\n                      </> : <></>}\n                    <Accordion className='p-0'>\n                      <Card className='p-0'>\n                        <Card.Header className='p-0 pb-1'>\n                          <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                            className='p-0'\n                          >\n                            history\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse className='p-0' eventKey=\"0\">\n                          <Card.Body className='p-0'>\n                            {o?.metadata?.keyvalues?.commits.map(\n                              (commit: any, index: number) => {\n                                return (\n                                  <div key={`h${index}`}>\n                                    <div className=\"row\">\n                                      <div className=\"col-md-6 col-12\">\n                                        {commit.commit?.message}\n                                      </div>\n                                      <div className=\"col-md-6 col-12\">\n                                        {commit.commit?.committer?.timestamp ? <>{getDate(commit.commit?.committer?.timestamp)}</> : <>no date</>}\n                                      </div>\n                                    </div><hr></hr></div>\n                                );\n                              }\n                            )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                  </Card.Body>\n                </Card>\n                <div className=\"col p-0\">\n                  <button\n                    onClick={async () =>\n                      await importFromCID(o.ipfs_pin_hash, o.metadata.name)\n                    }\n                    className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                  >\n                    import\n                  </button>\n                  {getViewButton(o.ipfs_pin_hash)}\n\n\n                  <CopyToClipboard\n                    text={o.ipfs_pin_hash}\n                    onCopy={() => {\n                      toast.success(\"Copied to clipboard.\");\n                    }}\n                  >\n                    <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash</button>\n                  </CopyToClipboard>\n                  <button\n                    onClick={async () => await deleteItem(o.ipfs_pin_hash)}\n                    className=\"btn btn-danger btn-sm delete3b-btn ml-2\"\n                  >\n                    <FontAwesomeIcon icon={faTrash} />\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        {data?.length === 0 ? <>Nothing has been stored here yet.</> : <></>}\n      </div>\n      <hr></hr>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Storage.tsx",["221"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { gitservice } from \"../App\";\nimport './Storage.css'\n\nexport const StorageProgress = (props: any) => {\n    const { storageUsed, repoName, update } = props;\n    const [percentage, setPercentage] = useState<number>(0);\n    const [storage, setStorage] = useState<string>('');\n    let updateTimer = useRef<any>(null);\n    const storageVariant = () => {\n        const percentageUsed = parseFloat(storageUsed.usage || '0') / storageUsed.quota * 100\n        let variant = 'success'\n        if (percentageUsed > 50) variant = 'warning'\n        if (percentageUsed > 80) variant = 'danger'\n        // setPercentage(percentageUsed)\n        return variant\n    }\n\n    useEffect((): any => {\n        if(update && !updateTimer.current) {\n            updateTimer.current = setInterval(async () => {\n                await gitservice.getStorageUsed();\n            }, 1000)\n        }else{\n            clearInterval(updateTimer.current)\n        }\n    }\n    ,[update])\n\n\n    useEffect(() => {\n        return () => {\n            clearInterval(updateTimer.current)\n        }\n    }, [])\n\n    useEffect(() => {\n        const percentageUsed = parseFloat(storageUsed.usage || '0') / (storageUsed.quota*2)\n        setPercentage(percentageUsed)\n        setStorage(formatBytes(storageUsed.usage, 2))\n    }, [storageUsed])\n\n\n    function formatBytes(bytes: number, decimals = 2) {\n        if (bytes === 0) return '0 Bytes';\n    \n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    \n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n\n    const storageUseText = () => {\n        return <><span className={`text-${storageVariant()}`}>{storage} {Math.round(percentage*100)}% of storage used</span></>\n    }\n\n    return (\n        <>\n        {storageUsed? update? <>{storageUseText()}</>:\n        <><div className=\"nav navbar bg-light p-1 mb-1\"><div><div className={`float-left pr-1 m-0`}>dGit</div> | repo: {repoName}<br></br></div>{storageUseText()}</div></>: null}\n        </>\n    )\n}","/Volumes/butbut/code/boxtest/src/components/github/settings.tsx",["222"],"import { PluginClient } from \"@remixproject/plugin\"\nimport { useEffect, useState } from \"react\"\nimport { Alert } from \"react-bootstrap\"\n\ninterface SettingsProps {\n    client: PluginClient\n    showOk: boolean\n}\n\nexport const GitHubSettings: React.FC<SettingsProps> = (props) => {\n    const [token, setToken] = useState<boolean>(false)\n    const [userName, setUserName] = useState<string>('')\n    const [userEmail, setUserEmail] = useState<string>('')\n    const [hide, setHide] = useState<boolean>(false)\n\n    const hideWarning = () => {\n        setHide(true)\n    }\n\n    const getToken = async () => {\n        let tokenConfig = await props.client.call('config' as any, 'getAppParameter', 'settings/gist-access-token')\n        if (tokenConfig) {\n            setToken(true)\n        } else {\n            setToken(false)\n        }\n        let userNameConfig = await props.client.call('config' as any, 'getAppParameter', 'settings/github-user-name')\n        if (userNameConfig) {\n            setUserName(userNameConfig)\n        }else {\n            setUserName('')\n        }\n        let userEmailConfig = await props.client.call('config' as any, 'getAppParameter', 'settings/github-email')\n        if (userEmailConfig) {\n            setUserEmail(userEmailConfig)\n        }else {\n            setUserEmail('')\n        }\n    }\n    useEffect(() => {\n\n\n\n        const fetchData = async () => {\n            if (props.client && props.client.isLoaded) {\n                await getToken()\n            } else {\n                props.client.onload().then(async () => {\n                    await getToken()\n                })\n            }\n        }\n        fetchData()\n            .catch(console.error);\n    }, [])\n\n\n    const settings = () => {\n        return <>        {!token ? (\n            <Alert variant='info'>Provide a \"personal github access token\" to access private repositories and have push/pull rights.<br></br>\n                Please update these settings in the REMIX settings.<br></br>\n                <button className=\"btn btn-sm btm-primary\" onClick={async () => { await getToken() }}>check settings</button>\n                {!props.showOk && <button className=\"btn btn-sm btm-primary\" onClick={hideWarning}>hide this warning</button>}\n            </Alert>\n\n        ) : (props.showOk ? <Alert variant=\"success\">GitHub token is setup!</Alert> : '')}\n            {(!userName || !userEmail) ? (\n                <Alert variant='info'>GitHub name & email are also required to push & pull.\n                    <button className=\"btn btn-sm btm-primary\" onClick={async () => { await getToken() }}>check settings</button>\n                    {!props.showOk && <button className=\"btn btn-sm btm-primary\" onClick={hideWarning}>hide this warning</button>}\n                </Alert>\n            ) : (props.showOk ? <Alert variant=\"success\">GitHub user and email are setup!</Alert> : '')}</>\n    }\n    return (\n        <>\n            {!props.showOk && hide === true ? '' : settings()}\n        </>)\n}",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":3,"column":21,"nodeType":"229","messageId":"230","endLine":3,"endColumn":32},{"ruleId":"227","severity":1,"message":"231","line":76,"column":10,"nodeType":"229","messageId":"230","endLine":76,"endColumn":19},{"ruleId":"227","severity":1,"message":"232","line":76,"column":21,"nodeType":"229","messageId":"230","endLine":76,"endColumn":33},{"ruleId":"227","severity":1,"message":"233","line":80,"column":10,"nodeType":"229","messageId":"230","endLine":80,"endColumn":17},{"ruleId":"227","severity":1,"message":"234","line":85,"column":10,"nodeType":"229","messageId":"230","endLine":85,"endColumn":21},{"ruleId":"227","severity":1,"message":"235","line":85,"column":23,"nodeType":"229","messageId":"230","endLine":85,"endColumn":37},{"ruleId":"227","severity":1,"message":"236","line":88,"column":9,"nodeType":"229","messageId":"230","endLine":88,"endColumn":27},{"ruleId":"237","severity":1,"message":"238","line":250,"column":77,"nodeType":"239","endLine":250,"endColumn":186},{"ruleId":"227","severity":1,"message":"240","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":25},{"ruleId":"227","severity":1,"message":"241","line":3,"column":40,"nodeType":"229","messageId":"230","endLine":3,"endColumn":50},{"ruleId":"227","severity":1,"message":"242","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":11},{"ruleId":"227","severity":1,"message":"240","line":3,"column":3,"nodeType":"229","messageId":"230","endLine":3,"endColumn":18},{"ruleId":"227","severity":1,"message":"243","line":9,"column":8,"nodeType":"229","messageId":"230","endLine":9,"endColumn":12},{"ruleId":"227","severity":1,"message":"244","line":10,"column":10,"nodeType":"229","messageId":"230","endLine":10,"endColumn":21},{"ruleId":"227","severity":1,"message":"245","line":10,"column":23,"nodeType":"229","messageId":"230","endLine":10,"endColumn":45},{"ruleId":"227","severity":1,"message":"246","line":10,"column":47,"nodeType":"229","messageId":"230","endLine":10,"endColumn":58},{"ruleId":"247","severity":1,"message":"248","line":134,"column":35,"nodeType":"249","messageId":"250","endLine":134,"endColumn":37},{"ruleId":"247","severity":1,"message":"248","line":135,"column":29,"nodeType":"249","messageId":"250","endLine":135,"endColumn":31},{"ruleId":"247","severity":1,"message":"248","line":148,"column":35,"nodeType":"249","messageId":"250","endLine":148,"endColumn":37},{"ruleId":"247","severity":1,"message":"248","line":163,"column":35,"nodeType":"249","messageId":"250","endLine":163,"endColumn":37},{"ruleId":"247","severity":1,"message":"248","line":177,"column":35,"nodeType":"249","messageId":"250","endLine":177,"endColumn":37},{"ruleId":"227","severity":1,"message":"251","line":4,"column":22,"nodeType":"229","messageId":"230","endLine":4,"endColumn":27},{"ruleId":"252","severity":1,"message":"253","line":9,"column":53,"nodeType":"254","messageId":"255","endLine":9,"endColumn":55},{"ruleId":"252","severity":1,"message":"253","line":9,"column":47,"nodeType":"254","messageId":"255","endLine":9,"endColumn":49},{"ruleId":"227","severity":1,"message":"256","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"257","line":2,"column":47,"nodeType":"229","messageId":"230","endLine":2,"endColumn":63},{"ruleId":"227","severity":1,"message":"240","line":2,"column":65,"nodeType":"229","messageId":"230","endLine":2,"endColumn":80},{"ruleId":"227","severity":1,"message":"251","line":2,"column":82,"nodeType":"229","messageId":"230","endLine":2,"endColumn":87},{"ruleId":"252","severity":1,"message":"253","line":9,"column":53,"nodeType":"254","messageId":"255","endLine":9,"endColumn":55},{"ruleId":"227","severity":1,"message":"258","line":12,"column":9,"nodeType":"229","messageId":"230","endLine":12,"endColumn":17},{"ruleId":"252","severity":1,"message":"253","line":7,"column":53,"nodeType":"254","messageId":"255","endLine":7,"endColumn":56},{"ruleId":"227","severity":1,"message":"259","line":8,"column":9,"nodeType":"229","messageId":"230","endLine":8,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":12,"column":51,"nodeType":"254","messageId":"255","endLine":12,"endColumn":53},{"ruleId":"252","severity":1,"message":"253","line":7,"column":59,"nodeType":"254","messageId":"255","endLine":7,"endColumn":61},{"ruleId":"260","severity":1,"message":"261","line":28,"column":6,"nodeType":"262","endLine":28,"endColumn":8,"suggestions":"263"},{"ruleId":"227","severity":1,"message":"264","line":36,"column":11,"nodeType":"229","messageId":"230","endLine":36,"endColumn":12},{"ruleId":"252","severity":1,"message":"253","line":8,"column":55,"nodeType":"254","messageId":"255","endLine":8,"endColumn":57},{"ruleId":"260","severity":1,"message":"265","line":55,"column":6,"nodeType":"262","endLine":55,"endColumn":8,"suggestions":"266"},{"ruleId":"227","severity":1,"message":"267","line":16,"column":9,"nodeType":"229","messageId":"230","endLine":16,"endColumn":21},{"ruleId":"237","severity":1,"message":"238","line":43,"column":11,"nodeType":"239","endLine":43,"endColumn":88},{"ruleId":"237","severity":1,"message":"238","line":47,"column":11,"nodeType":"239","endLine":47,"endColumn":99},{"ruleId":"252","severity":1,"message":"253","line":11,"column":59,"nodeType":"254","messageId":"255","endLine":11,"endColumn":61},{"ruleId":"227","severity":1,"message":"259","line":12,"column":9,"nodeType":"229","messageId":"230","endLine":12,"endColumn":14},{"ruleId":"227","severity":1,"message":"268","line":6,"column":10,"nodeType":"229","messageId":"230","endLine":6,"endColumn":15},{"ruleId":"227","severity":1,"message":"269","line":7,"column":8,"nodeType":"229","messageId":"230","endLine":7,"endColumn":23},{"ruleId":"227","severity":1,"message":"270","line":8,"column":10,"nodeType":"229","messageId":"230","endLine":8,"endColumn":15},{"ruleId":"237","severity":1,"message":"238","line":242,"column":29,"nodeType":"239","endLine":242,"endColumn":83},{"ruleId":"227","severity":1,"message":"271","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":26},{"ruleId":"247","severity":1,"message":"272","line":16,"column":20,"nodeType":"249","messageId":"273","endLine":16,"endColumn":22},{"ruleId":"247","severity":1,"message":"248","line":80,"column":17,"nodeType":"249","messageId":"250","endLine":80,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":84,"column":17,"nodeType":"249","messageId":"250","endLine":84,"endColumn":19},{"ruleId":"227","severity":1,"message":"274","line":127,"column":7,"nodeType":"229","messageId":"230","endLine":127,"endColumn":27},{"ruleId":"227","severity":1,"message":"275","line":31,"column":15,"nodeType":"229","messageId":"230","endLine":31,"endColumn":22},{"ruleId":"227","severity":1,"message":"276","line":39,"column":26,"nodeType":"229","messageId":"230","endLine":39,"endColumn":32},{"ruleId":"227","severity":1,"message":"251","line":3,"column":22,"nodeType":"229","messageId":"230","endLine":3,"endColumn":27},{"ruleId":"252","severity":1,"message":"253","line":8,"column":59,"nodeType":"254","messageId":"255","endLine":8,"endColumn":61},{"ruleId":"252","severity":1,"message":"253","line":14,"column":61,"nodeType":"254","messageId":"255","endLine":14,"endColumn":64},{"ruleId":"227","severity":1,"message":"277","line":28,"column":9,"nodeType":"229","messageId":"230","endLine":28,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":31,"column":9,"nodeType":"239","endLine":31,"endColumn":56},{"ruleId":"237","severity":1,"message":"238","line":43,"column":9,"nodeType":"239","endLine":43,"endColumn":96},{"ruleId":"252","severity":1,"message":"253","line":15,"column":59,"nodeType":"254","messageId":"255","endLine":15,"endColumn":62},{"ruleId":"227","severity":1,"message":"277","line":27,"column":9,"nodeType":"229","messageId":"230","endLine":27,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":30,"column":9,"nodeType":"239","endLine":30,"endColumn":56},{"ruleId":"237","severity":1,"message":"238","line":95,"column":9,"nodeType":"239","endLine":100,"endColumn":10},{"ruleId":"227","severity":1,"message":"264","line":139,"column":17,"nodeType":"229","messageId":"230","endLine":139,"endColumn":18},{"ruleId":"227","severity":1,"message":"264","line":166,"column":13,"nodeType":"229","messageId":"230","endLine":166,"endColumn":14},{"ruleId":"227","severity":1,"message":"228","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"260","severity":1,"message":"278","line":55,"column":8,"nodeType":"262","endLine":55,"endColumn":10,"suggestions":"279"},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],"@typescript-eslint/no-unused-vars","'ProgressBar' is defined but never used.","Identifier","unusedVar","'activeKey' is assigned a value but never used.","'setActiveKey' is assigned a value but never used.","'canLoad' is assigned a value but never used.","'confirmShow' is assigned a value but never used.","'setConfirmShow' is assigned a value but never used.","'maxStorage' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'resetFileSystem' is defined but never used.","'gitservice' is defined but never used.","'App' is defined but never used.","'path' is defined but never used.","'removeSlash' is defined but never used.","'jsonObjectFromFileList' is defined but never used.","'arrayUnique' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Utils' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'fileservice' is defined but never used.","'localipfsstorage' is defined but never used.","'clearAll' is assigned a value but never used.","'files' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkconfig'. Either include it or remove the dependency array.","ArrayExpression",["282"],"'r' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'host', 'port', 'protocol', and 'url'. Either include them or remove the dependency array.",["283"],"'boxconnected' is assigned a value but never used.","'Alert' is defined but never used.","'CopyToClipboard' is defined but never used.","'toast' is defined but never used.","'isForOfStatement' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'sortbydirectorylevel' is assigned a value but never used.","'resolve' is assigned a value but never used.","'reject' is assigned a value but never used.","'getUrlLink' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getToken' and 'props.client'. Either include them or remove the dependency array.",["284"],"no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},"Update the dependencies array to be: [checkconfig]",{"range":"291","text":"292"},"Update the dependencies array to be: [host, port, protocol, url]",{"range":"293","text":"294"},"Update the dependencies array to be: [getToken, props.client]",{"range":"295","text":"296"},[855,857],"[checkconfig]",[1865,1867],"[host, port, protocol, url]",[1691,1693],"[getToken, props.client]"]