[{"/Volumes/butbut/code/boxtest/src/index.tsx":"1","/Volumes/butbut/code/boxtest/src/reportWebVitals.ts":"2","/Volumes/butbut/code/boxtest/src/App.tsx":"3","/Volumes/butbut/code/boxtest/src/components/loaderService.ts":"4","/Volumes/butbut/code/boxtest/src/components/Utils.ts":"5","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts":"6","/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts":"7","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts":"8","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts":"9","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts":"10","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts":"11","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"12","/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx":"13","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx":"14","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx":"15","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx":"16","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx":"17","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx":"18","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx":"19","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx":"20","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx":"21","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx":"22","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx":"23","/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx":"24","/Volumes/butbut/code/boxtest/src/components/github/github.tsx":"25","/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts":"26","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts":"27","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx":"28","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx":"29","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"30","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx":"31"},{"size":523,"mtime":1622458988000,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1607789583000,"results":"34","hashOfConfig":"33"},{"size":10336,"mtime":1633803468000,"results":"35","hashOfConfig":"33"},{"size":204,"mtime":1607853812000,"results":"36","hashOfConfig":"33"},{"size":310,"mtime":1611768045000,"results":"37","hashOfConfig":"33"},{"size":2354,"mtime":1611674750000,"results":"38","hashOfConfig":"33"},{"size":33,"mtime":1622458988000,"results":"39","hashOfConfig":"33"},{"size":4832,"mtime":1633774744000,"results":"40","hashOfConfig":"33"},{"size":3956,"mtime":1633009394000,"results":"41","hashOfConfig":"33"},{"size":14142,"mtime":1632933873000,"results":"42","hashOfConfig":"33"},{"size":9013,"mtime":1632933873000,"results":"43","hashOfConfig":"33"},{"size":2524,"mtime":1632933873000,"results":"44","hashOfConfig":"33"},{"size":856,"mtime":1622458988000,"results":"45","hashOfConfig":"33"},{"size":3013,"mtime":1633006941000,"results":"46","hashOfConfig":"33"},{"size":2486,"mtime":1632933873000,"results":"47","hashOfConfig":"33"},{"size":1085,"mtime":1622458988000,"results":"48","hashOfConfig":"33"},{"size":1624,"mtime":1633008415000,"results":"49","hashOfConfig":"33"},{"size":484,"mtime":1633007016000,"results":"50","hashOfConfig":"33"},{"size":2614,"mtime":1633007032000,"results":"51","hashOfConfig":"33"},{"size":3338,"mtime":1632933873000,"results":"52","hashOfConfig":"33"},{"size":1305,"mtime":1632933873000,"results":"53","hashOfConfig":"33"},{"size":4142,"mtime":1633006983000,"results":"54","hashOfConfig":"33"},{"size":2192,"mtime":1633771752000,"results":"55","hashOfConfig":"33"},{"size":8970,"mtime":1633008480000,"results":"56","hashOfConfig":"33"},{"size":11914,"mtime":1633771732000,"results":"57","hashOfConfig":"33"},{"size":775,"mtime":1622458988000,"results":"58","hashOfConfig":"33"},{"size":3565,"mtime":1611841662000,"results":"59","hashOfConfig":"33"},{"size":1585,"mtime":1609755215000,"results":"60","hashOfConfig":"33"},{"size":1771,"mtime":1633771758000,"results":"61","hashOfConfig":"33"},{"size":4696,"mtime":1632933873000,"results":"62","hashOfConfig":"33"},{"size":10848,"mtime":1632933873000,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1j68zhh",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"66"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"66"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"66"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"66"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"66"},"/Volumes/butbut/code/boxtest/src/index.tsx",[],["150","151"],"/Volumes/butbut/code/boxtest/src/reportWebVitals.ts",[],"/Volumes/butbut/code/boxtest/src/App.tsx",["152","153","154","155","156","157","158"],"/Volumes/butbut/code/boxtest/src/components/loaderService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Utils.ts",["159","160"],"import { env } from \"process\";\n\nexport class devutils {\n    constructor() {}\n\n    async log(...message:any){\n        if (process.env.NODE_ENV === 'production') return;\n        console.log(...message)\n    }\n\n    addSlash(file:string){\n        if(!file.startsWith(\"/\"))file=\"/\" + file\n        return file\n    }\n}","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts",["161","162"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport {\n  gitservice,\n  ipfservice,\n  loaderservice,\n  localipfsstorage,\n  Utils,\n} from \"../../App\";\n\nexport interface boxObject {\n  key?: string;\n  cid?: string;\n  datestored?: string | number | Date;\n  datecommit?: number | string | Date;\n  timestamp: number;\n  ref?: string;\n  message?: string;\n  links?: string;\n}\nexport class BoxService {\n  status = new BehaviorSubject<boolean>(false);\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  box: any;\n  space: any;\n\n  showspinner() {}\n\n  hidespinner() {}\n  // 3BOX connection\n\n  async setSpace(space: any) {\n    this.space = space;\n  }\n\n  async getStatus() {}\n\n  async storeHashIn3Box(space: any) {\n    const connect = await ipfservice.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\", {autoClose:false}); return false;}\n    if (typeof this.space == \"undefined\") {\n      toast.error(\"You should connect to 3Box first\", {autoClose:false});\n      return false;\n    }\n    loaderservice.setLoading(true);\n    await ipfservice.addToIpfs();\n    //Utils.log(\"export 3box\", ipfservice.cid, this.space);\n\n    try {\n      const ob = await localipfsstorage.createBoxObject();\n\n      await this.space.private.set(ob.key, ob);\n      toast.success(\"Stored in 3box\");\n      await this.getObjectsFrom3Box(space);\n      loaderservice.setLoading(false);\n    } catch (e) {}\n  }\n\n  async getObjectsFrom3Box(space: any) {\n    //Utils.log(\"get objects from box\");\n    const hashes: boxObject[] = await space.private.all();\n    let vals = Object.values(hashes)\n    vals = await this.filterNulls(vals)\n    //Utils.log(vals)\n    vals.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n    this.boxObjects.next(vals);\n    //Utils.log(hashes);\n    return Object.values(hashes);\n  }\n\n  async filterNulls(objects: boxObject[]) {\n    var filtered = objects.filter(function (el) {\n      return el.timestamp != null && el.timestamp!== undefined;\n    });\n    return filtered;\n  }\n\n  async deleteFrom3Box(args: string | undefined) {\n    if (args !== undefined) {\n      const key = args;\n      //Utils.log(\"key\", key);\n      loaderservice.setLoading(true);\n      await this.space.private.remove(key);\n      await this.getObjectsFrom3Box(this.space);\n      loaderservice.setLoading(false);\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts",[],"/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts",["163","164"],"/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts",["165"],"import { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\nimport { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { client, fileservice, gitservice, ipfservice, Utils } from \"../../App\";\n\nexport class WorkSpacePlugin extends PluginClient {\n  clientLoaded = new BehaviorSubject(false);\n  callBackEnabled: boolean = true;\n\n  constructor() {\n    super();\n    createClient(this);\n    //toast.info(\"Connecting to REMIX\");\n    this.methods = ['pull', 'track', 'diff']\n    this.onload().then(async () => {\n      //Utils.log(\"workspace client loaded\", this);\n      //toast.success(\"Connected to REMIX\");\n      Utils.log(this)\n      try {\n        await this.call(\"manager\", \"activatePlugin\", \"dGitProvider\")\n        Utils.log(\"SET LOADED\")\n        this.clientLoaded.next(true);\n        await this.setCallBacks();\n      } catch (e) {\n        Utils.log(e)\n        toast.error(\"Could not activate DECENTRALIZED GIT. Please activate DECENTRALIZED GIT in the plugin list and restart this plugin.\", { autoClose: false })\n      }\n\n      try {\n        /* this.call('filePanel', 'registerContextMenuItem', {\n          id: 'dgit',\n          name: 'track',\n          label: 'Track in dGit',\n          type: ['file', 'folder'],\n          extension: [],\n          path: [],\n          pattern: [],\n          sticky: true\n        }) */\n      } catch (e) {\n\n      }\n\n    });\n\n\n\n  }\n\n  async diff(filename: string) {\n    gitservice.fileToDiff = filename\n    await gitservice.diffFiles(filename)\n  }\n\n  async track(item: any) {\n    Utils.log('track')\n  }\n\n  async pull(cid: string) {\n    try {\n      await ipfservice.importFromCID(cid, \"\", false)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  }\n\n  async setCallBacks() {\n\n    this.on(\"fileManager\", \"fileSaved\", async (e) => {\n      // Do something\n      if (this.callBackEnabled) {\n        Utils.log(\"file save\",e);\n        await fileservice.syncFromBrowser();\n\n      }\n    });\n\n    this.on(\"fileManager\", \"fileAdded\", async (e) => {\n      // Do something\n      if (this.callBackEnabled) {\n        Utils.log(\"file add\",e);\n        await fileservice.syncFromBrowser();\n\n        //Utils.log(e);\n      }\n    });\n\n    this.on(\"fileManager\", \"fileRemoved\", async (e) => {\n      // Do something\n      //Utils.log(e);\n      if (this.callBackEnabled) {\n        Utils.log(\"file rm\",e);\n        await fileservice.syncFromBrowser();\n        \n      }\n      // await this.rmFile(e)\n    });\n\n    this.on(\"fileManager\", \"currentFileChanged\", async (e) => {\n      // Do something\n      //Utils.log(\"CHANGED\",e, this);\n      if (this.callBackEnabled) {\n        Utils.log(\"file changed\",e);\n        await fileservice.syncFromBrowser();\n      }\n      //await this.rmFile(e)\n    });\n\n    this.on(\"fileManager\", \"fileRenamed\", async (oldfile, newfile) => {\n      // Do something\n      if (this.callBackEnabled) {\n        Utils.log(oldfile, newfile);\n        await fileservice.syncFromBrowser();\n\n      }\n    });\n\n    this.on(\"filePanel\", \"setWorkspace\", async (x: any) => {\n      if (this.callBackEnabled) {\n        Utils.log(\"ws set\", x);\n        await fileservice.syncFromBrowser(x.isLocalhost);\n        Utils.log(x);\n      }\n    });\n\n    this.on(\"filePanel\", \"deleteWorkspace\", async (x: any) => {\n      if (this.callBackEnabled) {\n        Utils.log(\"wS DELETE\", x);\n        await fileservice.syncFromBrowser(x.isLocalhost);\n        Utils.log(x);\n      }\n    });\n\n    this.on(\"filePanel\", \"renameWorkspace\", async (x: any) => {\n      if (this.callBackEnabled) {\n        Utils.log(\"wS rn\", x);\n        await fileservice.syncFromBrowser(x.isLocalhost);\n        Utils.log(x);\n      }\n    });\n\n\n    this.callBackEnabled = true;\n  }\n\n\n\n  async disableCallBacks() {\n    Utils.log(\"DISABLE CALLBACK\")\n    this.callBackEnabled = false;\n  }\n  async enableCallBacks() {\n    Utils.log(\"ENABLE CALLBACK\")\n    this.callBackEnabled = true;\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts",["166","167","168","169","170"],"import git, { ReadCommitResult } from \"isomorphic-git\";\nimport { client, fileservice, loaderservice, Utils } from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport path from \"path\";\nimport { removeSlash } from \"../Files/utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileStatuses } from \"../Files/FileService\";\nimport { names } from \"unique-names-generator\";\n\nexport interface diffObject {\n  originalFileName: string;\n  updatedFileName: string;\n  past: string;\n  current: string;\n}\nexport class gitService {\n  commits = new BehaviorSubject<ReadCommitResult[] | undefined>(undefined);\n  branch = new BehaviorSubject<string>(\"\");\n  branches = new BehaviorSubject<any[] | undefined>(undefined);\n  remotes = new BehaviorSubject<any[] | undefined>(undefined);\n  diffResult = new BehaviorSubject<diffObject[] | undefined>(undefined);\n  reponameSubject = new BehaviorSubject<string>(\"\");\n  canCommit = new BehaviorSubject<boolean>(true);\n  canExport = new BehaviorSubject<boolean>(false);\n  storageUsed = new BehaviorSubject<string>(\"\");\n  reponame = \"\";\n  fileToDiff:string = ''\n\n  async init() {\n    try {\n      await client.call(\"dGitProvider\", \"init\");\n      toast.success('Git repository initialized')\n      await fileservice.showFiles();\n    } catch (e) {\n      toast.error(`There were errors on initializing git: ${e.message}`)\n    }\n\n  }\n\n  async addAllToGit() {\n    try {\n      await client\n        .call(\"dGitProvider\", \"status\", { ref: \"HEAD\" })\n        .then((status) =>\n          Promise.all(\n            status.map(([filepath, , worktreeStatus]) =>\n              worktreeStatus\n                ? client.call(\"dGitProvider\", \"add\", {\n                  filepath: removeSlash(filepath),\n                })\n                : client.call(\"dGitProvider\", \"rm\", {\n                  filepath: removeSlash(filepath),\n                })\n            )\n          )\n        );\n      await fileservice.showFiles();\n      toast.success(`Added all`);\n    } catch (e) {\n      toast.error(`${e}`);\n    }\n  }\n\n  async addToGit(args: string | undefined) {\n    if (args !== undefined) {\n      let filename = args; // $(args[0].currentTarget).data('file')\n      let stagingfiles;\n      if (filename !== \"/\") {\n        filename = removeSlash(filename);\n        stagingfiles = [filename];\n      } else {\n        await this.addAllToGit();\n        return;\n      }\n      //Utils.log(stagingfiles);\n      try {\n        for (const filepath of stagingfiles) {\n          try {\n            await client.call(\"dGitProvider\", \"add\", {\n              filepath: removeSlash(filepath),\n            });\n          } catch (e) { }\n        }\n        await fileservice.showFiles();\n        toast.success(`Added ${filename}`);\n      } catch (e) {\n        toast.error(`${e}`);\n      }\n    }\n  }\n\n  async gitrm(args: any) {\n    ////Utils.log('RM GIT', $(args[0].currentTarget).data('file'))\n    const filename = args; // $(args[0].currentTarget).data('file')\n\n    await client.call(\"dGitProvider\", \"rm\", {\n      filepath: removeSlash(filename),\n    });\n    await fileservice.showFiles();\n    toast.success(`Removed file file ${filename}`);\n  }\n\n  async checkoutfile(filename: any) {\n    //await client.call('fileManager' as any, 'closeAllFiles')\n    ///const filename = \"\"; //$(args[0].currentTarget).data('file')\n    //Utils.log(\"checkout\", [`${filename}`], removeSlash(filename));\n    let oid = await this.getLastCommmit();\n    if (oid)\n      try {\n        const commitOid = await client.call(\"dGitProvider\", \"resolveref\", {\n          ref: oid,\n        });\n        const { blob } = await client.call(\"dGitProvider\", \"readblob\", {\n          oid: commitOid,\n          filepath: removeSlash(filename),\n        });\n        const original = Buffer.from(blob).toString(\"utf8\");\n        //(original, filename);\n        await client.disableCallBacks();\n        await client.call(\n          \"fileManager\",\n          \"setFile\",\n          removeSlash(filename),\n          original\n        );\n        await client.enableCallBacks();\n        await fileservice.syncFromBrowser();\n        //await fileservice.showFiles()\n        //await fileservice.syncToBrowser();\n        //await fileservice.syncStart()\n      } catch (e) {\n        //Utils.log(e);\n        toast.error(\"No such file\");\n        //this.addAlert(\"checkoutMessage\", e)\n      }\n  }\n\n  async checkout(cmd: any) {\n    toast.dismiss();\n    await client.disableCallBacks();\n    await client.call('fileManager', 'closeAllFiles')\n    try {\n      await client.call(\"dGitProvider\", \"checkout\", cmd);\n      this.gitlog();\n    } catch (e) {\n      //Utils.log(e);\n      toast.error(\" \" + e, { autoClose: false });\n    }\n    await client.enableCallBacks();\n    //Utils.log(\"done\");\n    //await fileservice.syncToBrowser();\n    await fileservice.syncStart();\n  }\n\n  async getCommits() {\n    //Utils.log(\"get commits\");\n    try {\n      const commits: ReadCommitResult[] = await client.call(\n        \"dGitProvider\",\n        \"log\",\n        { ref: \"HEAD\" }\n      );\n      return commits;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async gitlog() {\n    //Utils.log(\"log\");\n    try {\n      const commits: ReadCommitResult[] = await this.getCommits();\n      this.commits.next(commits);\n      //Utils.log(commits);\n    } catch (e) {\n      this.commits.next([]);\n      //Utils.log(e);\n    }\n\n    await this.showCurrentBranch();\n  }\n\n  async createBranch(name: string = \"\") {\n    const branch = name; //|| $(\"#newbranchname\").val();\n    if (branch)\n      await await client.call(\"dGitProvider\", \"branch\", { ref: branch });\n\n    fileservice.showFiles();\n  }\n\n  async showCurrentBranch() {\n    try {\n      const branch = await this.currentBranch();\n      const currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      //Utils.log(\"current commid id\", currentcommitoid);\n      this.branch.next(branch);\n      if (typeof branch === \"undefined\" || branch === \"\") {\n        //toast.warn(`You are in a detached state`);\n        this.branch.next(`HEAD detached at ${currentcommitoid}`);\n        this.canCommit.next(false);\n      } else {\n        this.branch.next(branch);\n        this.canCommit.next(true);\n      }\n    } catch (e) {\n      this.branch.next(\"\");\n    }\n  }\n\n  async getLastCommmit() {\n    try {\n      let currentcommitoid = \"\";\n      currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      return currentcommitoid;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async currentBranch() {\n    try {\n      const branch: string =\n        (await client.call(\"dGitProvider\", \"currentbranch\")) || \"\";\n      //Utils.log(\"BRANCH\", branch);\n      return branch;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async commit(message: string = \"\") {\n\n    try {\n      const sha = await client.call(\"dGitProvider\", \"commit\", {\n        author: {\n          name: localStorage.getItem('GITHUB_NAME') || 'Remix Workspace',\n          email: localStorage.getItem('GITHUB_EMAIL'),\n        },\n        message: message,\n      });\n      toast.success(`Commited: ${sha}`);\n  \n      await fileservice.showFiles();\n    } catch (err) {\n      toast.error(`${err}`)\n    }\n\n  }\n\n  async getBranches() {\n    let branches: any[] = await client.call(\"dGitProvider\", \"branches\");\n    this.branches.next(branches);\n  }\n  async getRemotes() {\n    let remotes: any = await client.call(\"dGitProvider\", \"remotes\" as any);\n    this.remotes.next(remotes || []);\n  }\n\n  async getStorageUsed() {\n    let storage: string = await client.call(\"dGitProvider\", \"localStorageUsed\" as any);\n    this.storageUsed.next(storage);\n  }\n\n  async getCommitFromRef(ref: string) {\n    const commitOid = await client.call(\"dGitProvider\", \"resolveref\", {\n      ref: ref,\n    });\n    return commitOid;\n  }\n\n  async getFileContentCommit(fullfilename: string, commitOid: string) {\n    let content = \"\";\n    try {\n      const { blob } = await client.call(\"dGitProvider\", \"readblob\", {\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n      content = Buffer.from(blob).toString(\"utf8\");\n    } catch (e) {\n      //Utils.log(e);\n    }\n    return content;\n  }\n\n  async statusMatrix(dir: string = \"/\", ref: string = \"HEAD\") {\n    Utils.log(\"call status\");\n    const matrix = await client.call(\"dGitProvider\", \"status\", { ref: \"HEAD\" });\n    Utils.log(\"MATRIX\", matrix);\n    let result = (matrix || []).map((x) => {\n      return {\n        filename: `/${x.shift()}`,\n        status: x,\n      };\n    });\n    return result;\n  }\n\n  async clone(url: string, branch: string, token: string, depth: number, singleBranch: boolean) {\n    loaderservice.setLoading(true)\n    try {\n      await client.disableCallBacks()\n      await client.call(\"dGitProvider\", \"clone\" as any, { url, branch, token, depth, singleBranch });\n      await client.enableCallBacks()\n      await fileservice.syncFromBrowser(false)\n      toast.success(\"Cloned\")\n    } catch (e) {\n      toast.error(e.message)\n    }\n    loaderservice.setLoading(false)\n  }\n\n\n\n  async addRemote(remote: string, url: string) {\n    loaderservice.setLoading(true)\n    try {\n      await client.call(\"dGitProvider\", \"addremote\" as any, { remote, url });\n      toast.success(\"Remote added\")\n    } catch (e) {\n      toast.error(\"Please init your repo first...\")\n    }\n    loaderservice.setLoading(false)\n  }\n\n  async delRemote(remote: string) {\n    loaderservice.setLoading(true)\n    try {\n      await client.call(\"dGitProvider\", \"delremote\" as any, { remote });\n      toast.success(\"Remote removed\")\n    } catch (e) {\n      toast.error(e.message)\n    }\n    loaderservice.setLoading(false)\n  }\n\n  async push(remote: string, ref: string, remoteRef: string, token: string, force: boolean, name: string, email: string) {\n    loaderservice.setLoading(true)\n    try {\n      const result = await client.call(\"dGitProvider\", \"push\" as any, { remote, ref, remoteRef, token, force, name, email });\n      \n      toast.success(\"Pushed\")\n    } catch (e) {\n      toast.error(e.message)\n    }\n    loaderservice.setLoading(false)\n  }\n\n  async pull(remote: string, ref: string, remoteRef: string, token: string,name: string, email: string) {\n    loaderservice.setLoading(true)\n    try {\n      await client.disableCallBacks()\n      await client.call(\"dGitProvider\", \"pull\" as any, { remote, ref, remoteRef, token, name, email });\n      await client.enableCallBacks()\n      await fileservice.syncFromBrowser(false)\n      toast.success(\"Pulled\")\n    } catch (e) {\n      await client.enableCallBacks()\n      toast.error(e.message)\n    }\n    loaderservice.setLoading(false)\n  }\n\n  async fetch(remote: string, ref: string, remoteRef: string, token: string, name: string, email: string) {\n    loaderservice.setLoading(true)\n    try {\n      await client.disableCallBacks()\n      await client.call(\"dGitProvider\", \"fetch\" as any, { remote, ref, remoteRef, token, name, email });\n      await client.enableCallBacks()\n      await fileservice.syncFromBrowser(false)\n      toast.success(\"Fetched\")\n    } catch (e) {\n      toast.error(e.message)\n    }\n    loaderservice.setLoading(false)\n  }\n\n  async getStatusMatrixFiles() {\n    Utils.log(\"getStatusMatrixFiles\");\n    const matrix = await this.statusMatrix();\n    Utils.log(\"matrix\", matrix);\n    let files = matrix.map((f) => {\n      Utils.log(f);\n      return f.filename;\n    });\n    Utils.log(\"matrix files\", files);\n    return files;\n  }\n\n  async checkForFilesCommmited() {\n    try {\n      await this.listFiles();\n      this.canExport.next(true);\n      return true;\n    } catch (e) {\n      this.canExport.next(true);\n      return false;\n    }\n  }\n\n  async listFiles(dir: string = \"/\", ref: string = \"HEAD\") {\n    let filescommited = await client.call(\"dGitProvider\", \"lsfiles\", {\n      ref: ref,\n    });\n    return filescommited;\n  }\n\n  async listFilesInstaging(dir: string = \"/\") {\n    let filesInStaging = await client.call(\"dGitProvider\", \"lsfiles\", {\n      ref: \"HEAD\",\n    });\n    return filesInStaging;\n  }\n\n  async addAll() {\n    const statuses = fileservice.fileStatusResult;\n    //Utils.log(statuses);\n\n    for (let i: number = 0; i < statuses.length; i++) {\n      await this.addToGit(statuses[i].filename);\n    }\n  }\n\n  async diffFiles(filename:string | undefined) {\n    const statuses = fileservice.fileStatusResult;\n    if(this.fileToDiff) filename = this.fileToDiff\n    Utils.log(statuses);\n    const diffs: diffObject[] = [];\n    for (let i: number = 0; i < statuses.length; i++) {\n      const name = statuses[i].statusNames || []\n      if ((name.indexOf(\"modified\")) > -1) {\n        //Utils.log(statuses[i].statusNames?.indexOf(\"modified\"));\n        if((filename && statuses[i].filename === filename) || !filename){\n          const diff: diffObject = await this.diffFile(statuses[i].filename);\n          diffs.push(diff);\n        }\n      }\n    }\n    this.diffResult.next(diffs);\n  }\n\n  async zip() {\n    await client.call(\n      \"dGitProvider\",\n      \"zip\"\n    );\n  }\n\n  async diffFile(args: any) {\n    //$('#files').hide()\n    //$('#diff-container').show()\n    //Utils.log(\"DIFF\", args);\n    const fullfilename = args; // $(args[0].currentTarget).data('file')\n    try {\n      const commitOid = await client.call(\n        \"dGitProvider\",\n        \"resolveref\",\n        { ref: \"HEAD\" }\n      );\n\n      const { blob } = await client.call(\"dGitProvider\", \"readblob\", {\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n\n      const newcontent = await client.call(\n        \"fileManager\",\n        \"readFile\",\n        removeSlash(fullfilename)\n      );\n      const original = Buffer.from(blob).toString(\"utf8\");\n\n      // Utils.log(original);\n      //Utils.log(newcontent);\n      //const filediff = createPatch(filename, original, newcontent); // diffLines(original,newcontent)\n      ////Utils.log(filediff)\n      const filediff: diffObject = {\n        originalFileName: fullfilename,\n        updatedFileName: fullfilename,\n        current: newcontent,\n        past: original,\n      };\n\n      return filediff;\n    } catch (e) {\n      toast(\"Nothing to diff! \" + fullfilename);\n\n      const filediff: diffObject = {\n        originalFileName: \"\",\n        updatedFileName: \"\",\n        current: \"\",\n        past: \"\",\n      };\n      return filediff;\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts",["171","172","173","174","175","176","177","178","179","180","181"],"import { toast } from \"react-toastify\";\nimport App, {\n  resetFileSystem,\n  gitservice,\n  loaderservice,\n  Utils,\n} from \"../../App\";\nimport { client } from \"../../App\";\nimport path from \"path\";\nimport { removeSlash, jsonObjectFromFileList, arrayUnique } from \"./utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileExplorerNode, fileStatusResult, statusMatrix } from \"./types\";\n\nexport const fileStatuses = [\n  [\"new,untracked\", 0, 2, 0], // new, untracked\n  [\"added,staged\", 0, 2, 2], //\n  [\"added,staged,with unstaged changes\", 0, 2, 3], // added, staged, with unstaged changes\n  [\"unmodified\", 1, 1, 1], // unmodified\n  [\"modified,unstaged\", 1, 2, 1], // modified, unstaged\n  [\"modified,staged\", 1, 2, 2], // modified, staged\n  [\"modified,staged,with unstaged changes\", 1, 2, 3], // modified, staged, with unstaged changes\n  [\"deleted,unstaged\", 1, 0, 1], // deleted, unstaged\n  [\"deleted,staged\", 1, 0, 0],\n  //[\"deleted\", 1, 1, 0], // deleted, staged\n  [\"unmodified\", 1, 1, 3],\n  [\"deleted,not in git\", 0, 0, 3],\n  [\"unstaged,modified\", 1, 2, 0]\n];\n\nconst statusmatrix: statusMatrix[] = fileStatuses.map((x: any) => {\n  return {\n    matrix: x.shift().split(\",\"),\n    status: x,\n  };\n});\n\nexport class LsFileService {\n  filetreecontent = new BehaviorSubject<fileExplorerNode>({ children: [] });\n  canUseApp = new BehaviorSubject<boolean>(true);\n  confirmDeletion = new BehaviorSubject<boolean | undefined>(undefined);\n  fileStatusResult: fileStatusResult[] = [];\n\n\n  // RESET FUNCTIONS\n\n  async clearDb() {\n    const req = indexedDB.deleteDatabase(\"remix-workspace\");\n    let me = this;\n    req.onsuccess = async function () {\n      toast(\"Deleted database successfully\");\n      //await me.gitlog()\n\n      await me.showFiles();\n      await gitservice.init();\n    };\n  }\n\n  async syncStart() {\n    //await resetFileSystem();\n    Utils.log('sync start')\n    await this.syncFromBrowser();\n    //await gitservice.init();\n  }\n\n  async syncFromBrowser(isLocalhost = false) {\n    loaderservice.setLoading(true)\n    await client.disableCallBacks();\n    if (isLocalhost) {\n      this.canUseApp.next(false);\n      loaderservice.setLoading(false)\n      return;\n    }\n    try {\n      const workspace = await client.call(\n        \"filePanel\",\n        \"getCurrentWorkspace\"\n      );\n      if (workspace.isLocalhost) {\n        this.canUseApp.next(false);\n        return\n      }\n      Utils.log(\"SET NAME\", workspace);\n      gitservice.reponameSubject.next(workspace.name);\n      gitservice.reponame = workspace.name;\n      this.canUseApp.next(true);\n    } catch (e) {\n      this.canUseApp.next(false);\n      Utils.log(e)\n      Utils.log(\"no workspace\");\n    }\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async createDirectoriesFromString(strdirectories: string) {\n    const ignore = [\".\", \"/.\", \"\"];\n    ////Utils.log(\"directory\", strdirectories, ignore.indexOf(strdirectories));\n    if (ignore.indexOf(strdirectories) > -1) return false;\n    let directories: string[] = strdirectories.split(\"/\");\n    ////Utils.log(\"create directory\", directories);\n    for (let i = 0; i < directories.length; i++) {\n      ////Utils.log(directories[i]);\n      let previouspath = \"\";\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      ////Utils.log(\"creating \", finalPath);\n      try {\n        await client.call(\"fileManager\", \"mkdir\", finalPath);\n      } catch (e) {\n        // //Utils.log(e)\n      }\n    }\n  }\n\n  async viewFile(args: any) {\n    const filename = args;\n    //Utils.log(\"view file\", filename);\n    //$(args[0].currentTarget).data('file')\n    try {\n      await client.call(\"fileManager\", \"open\", Utils.addSlash(filename));\n    } catch (e) {\n      toast.error(\"file does not exist in Remix\", { autoClose: false });\n    }\n  }\n\n  async getFileStatusMatrix() {\n    this.fileStatusResult = await gitservice.statusMatrix();\n    Utils.log(\"STATUS MATRIX\", this.fileStatusResult);\n    // let filesinstaging = await gitservice.listFilesInstaging();\n    // //Utils.log(\"FILES IN STAGING\", filesinstaging);\n    // let filesingit = await gitservice.listFiles();\n    // //Utils.log(\"FILES IN GIT\", filesingit);\n\n    this.fileStatusResult.map((m) => {\n      statusmatrix.map((sm) => {\n        if (JSON.stringify(sm.status) === JSON.stringify(m.status)) {\n          //Utils.log(m, sm);\n          m.statusNames = sm.matrix;\n        }\n      });\n    });\n    Utils.log(\"file status\", this.fileStatusResult);\n  }\n\n  getFilesCountByStatus(status: string) {\n    let count = 0;\n    ////Utils.log(\"STATUS?\", status);\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(status) > -1) {\n          count++;\n          ////Utils.log(\"COUNT\", count);\n        }\n      }\n    });\n    return count;\n  }\n\n  getFilesByStatus(status: string) {\n    let result:any[] = []\n    //Utils.log(\"FILE STATUS MAP\", this.fileStatusResult)\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(status) > -1) {\n          result.push(m)\n        }\n      }\n    });\n    return result;\n  }\n\n  getFilesWithNotModifiedStatus(){\n    let result:any[] = []\n    //Utils.log(\"FILE STATUS MAP\", this.fileStatusResult)\n    this.fileStatusResult.map((m) => {\n      //Utils.log(\"STATUS?\", m);\n      if (m.statusNames !== undefined) {\n        if (m.statusNames?.indexOf(\"unmodified\") === -1) {\n          result.push(m)\n        }\n      }\n    });\n    return result;\n  }\n\n  getFileStatusForFile(filename: string) {\n    ////Utils.log(\"checking file status\", filename);\n    for (let i: number = 0; i < this.fileStatusResult.length; i++) {\n      if (this.fileStatusResult[i].filename === filename)\n        return this.fileStatusResult[i].statusNames;\n    }\n  }\n\n  async showFiles() {\n    loaderservice.setLoading(true)\n    //$('#files').show()\n    //$('#diff-container').hide()\n    //let files = await gitservice.getStatusMatrixFiles(); //await this.getDirectory(\"/\");\n    //Utils.log(\"start get files\");\n    //Utils.log(\"matrix files\", files);\n    //let filesinbrowser = await this.getDirectoryFromIde(\"/\");\n    //Utils.log(\"get matrix result\", files, filesinbrowser);\n\n    try {\n      await this.getFileStatusMatrix();\n      //Utils.log(\"files\", files);\n      //let jsonfiles = await jsonObjectFromFileList(\n      //  arrayUnique(filesinbrowser.concat(files))\n      //);\n      //Utils.log(\"json files\", jsonfiles);\n      //this.filetreecontent.next(jsonfiles);\n    } catch (e) {\n      //Utils.log(e);\n    }\n    try {\n      await gitservice.gitlog();\n    } catch (e) {}\n    try {\n      await gitservice.getBranches();\n    } catch (e) {}\n    try {\n      await gitservice.getRemotes();\n    } catch (e) {}\n    try {\n      await gitservice.getStorageUsed();\n    } catch (e) {}\n    try {\n      await gitservice.diffFiles('');\n    } catch (e) {}\n    await gitservice.checkForFilesCommmited();\n    loaderservice.setLoading(false)\n    return true;\n  }\n\n  async getDirectoryFromIde(dir: string, onlyDirectories: boolean = false) {\n    //Utils.log(\"get directory from ide\", dir);\n    let result: string[] = [];\n    if (!dir.startsWith(\"/\")) {\n      dir = \"/\" + dir;\n    }\n    try {\n      const files = await client.call(\"fileManager\", \"readdir\", dir);\n      Utils.log(\"READDIR\", files);\n      Utils.log(\"normalize\", normalize(files));\n\n      let fileArray = normalize(files);\n\n      Utils.log(fileArray);\n\n      for (let i = 0; i < fileArray.length; i++) {\n        let fi: any = fileArray[i];\n        if (typeof fi !== \"undefined\") {\n          ////Utils.log('looking into ', fi, dir)\n          //if (dir === \"/\") dir = \"\";\n          //dir = removeSlash(dir)\n          let type = fi.data.isDirectory;\n          ////Utils.log(\"type\",type)\n          if (type === true) {\n            //Utils.log(\"is directory, so get \", `${fi.filename}`);\n            if (onlyDirectories === true) result = [...result, fi.filename];\n\n            result = [\n              ...result,\n              ...(await this.getDirectoryFromIde(\n                `${fi.filename}`,\n                onlyDirectories\n              )),\n            ];\n          } else {\n            //Utils.log(\"is file \", `${fi.filename}`);\n            if (onlyDirectories === false) result = [...result, fi.filename];\n          }\n        }\n      }\n\n      Utils.log(\"TREE\", result);\n      return result;\n    } catch (e) {\n      return [];\n    }\n  }\n}\n\nconst normalize = (filesList: any): File[] => {\n  const folders: any[] = [];\n  const files: any[] = [];\n  //const prefix = path.split('/')[0]\n\n  Object.keys(filesList || {}).forEach((key) => {\n    //const path = prefix + '/' + key\n\n    if (filesList[key].isDirectory) {\n      folders.push({\n        filename: key,\n        data: filesList[key],\n      });\n    } else {\n      files.push({\n        filename: key,\n        data: filesList[key],\n      });\n    }\n  });\n\n  return [...folders, ...files];\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts",["182"],"import { BehaviorSubject } from \"rxjs\";\nimport { client, gitservice, ipfservice, Utils } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\nimport { default as dateFormat } from 'dateformat'\nimport { toast } from \"react-toastify\";\nexport class LocalIPFSStorage {\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  objects: any[] = [];\n\n  async init() {\n    try {\n      await this.read();\n    } catch (e) {\n      //Utils.log(e);\n      await this.write();\n    }\n  }\n\n  async read() {\n    try{\n      let r = await client.call('dGitProvider','getItem','dgit-ipfs')\n      this.objects = r? JSON.parse(r):[];\n      this.objects.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n      this.objects = await this.filterNulls();\n      //Utils.log(\"READ CONFIG\",this.objects);\n      this.boxObjects.next(this.objects);\n    }catch(e){\n      Utils.log(e)\n    }\n  }\n\n  async write() {\n    try{\n      await client.call('dGitProvider','setItem','dgit-ipfs', JSON.stringify(await this.filterNulls()) )\n    }catch(e){\n      \n    }\n  }\n\n  async addToStorage(box: boxObject) {\n    await this.init();\n    await this.deleteFromStorage(box.cid)\n    this.objects.push(box);\n    await this.write();\n    await this.read();\n  }\n\n  async filterNulls() {\n    var filtered = this.objects.filter(function (el) {\n      return el != null;\n    });\n    return filtered;\n  }\n\n  async deleteFromStorage(cid: string | undefined) {\n    if (cid !== undefined) {\n      await this.read();\n      this.objects = this.objects.filter((i) => i.cid !== cid);\n      await this.write();\n      await this.read();\n    }\n  }\n\n  async createBoxObject() {\n    await this.init();\n    try{\n      const commits = await gitservice.getCommits();\n      let key = gitservice.reponame;\n      let ob: boxObject = {\n        key: key,\n        cid: ipfservice.cid,\n        datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        datecommit: dateFormat(new Date(commits[0].commit.committer.timestamp * 1000), \"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        timestamp: Date.now(),\n        ref: commits[0].oid,\n        message: commits[0].commit.message,\n      };\n      return ob;\n    }catch(e){\n      let key = gitservice.reponame;\n      let ob: boxObject = {\n        key: key,\n        cid: ipfservice.cid,\n        datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        datecommit: \"no commits\",\n        timestamp: Date.now(),\n        ref: \"no commits\",\n        message: \"no commits\",\n      };\n      return ob;\n    }\n\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx",["183","184"],"import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Utils } from \"../App\";\ninterface ConnectionWarningProps {\n  canLoad: boolean | undefined;\n}\n\nexport const LocalHostWarning: React.FC<ConnectionWarningProps> = (props) => {\n  //Utils.log(\"WARNING\",props)\n  return (\n    <>\n      <Modal show={true} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          <Modal.Title>\n        <FontAwesomeIcon icon={faExclamationTriangle} /> Localhost is not supported\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Localhost and remixd are not supported in this app.\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx",["185","186"],"import React, { createRef, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice, Utils } from \"../../../App\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch, setNewBranch] = useState({ value: \"\" });\n  let ModalRef = createRef<ConfirmDelete>();\n  let show: boolean = false;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewBranch({ value: e.currentTarget.value });\n  };\n\n  gitservice.branches\n    .subscribe((x) => {\n      //Utils.log(branches);\n      if (branches) {\n        show = branches.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      //Utils.log(branch);\n    })\n    .unsubscribe();\n  const checkout = async (oid: string, remote: string | 'origin') => {\n    try {\n      await ModalRef.current?.show();\n      let cmd = {ref:oid, remote:remote}\n      gitservice.checkout(cmd);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n  return (\n    <>\n      <hr></hr>\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Branches</h4>\n        <ConfirmDelete\n          title={\"Checking out\"}\n          text={\n            <div>\n              Checking out a branch will delete the files in Remix.<br></br>\n              <strong>Check if you have uncommited work.</strong>\n              <br></br>Continue?\n            </div>\n          }\n          ref={ModalRef}\n        ></ConfirmDelete>\n        <Alert className=\"w-md-50 w-100 text-break\" variant=\"success\">\n          {branch}\n        </Alert>\n        {branches?.map((branch, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <div className=\"col-md-2 col-6\">{branch.name} on {branch.remote || 'local'}</div>\n              <div className=\"col\">\n                <span className=\"float-right\">\n                  <div\n                    onClick={async () => await checkout(branch.name, branch.remote)}\n                    className=\"btn btn-primary btn-sm checkout-btn\"\n                  >\n                    checkout\n                  </div>\n                </span>\n              </div>\n            </div>\n          );\n        })}\n        <hr />\n        <h4>Create branch</h4>\n        <div className=\"form-group\">\n          <label>Branchname</label>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-md-25 w-100\"\n            type=\"text\"\n            id=\"newbranchname\"\n          />\n        </div>\n        <button\n          onClick={async () => gitservice.createBranch(newBranch.value)}\n          className=\"btn w-md-25 w-100 btn-primary\"\n          id=\"createbranch-btn\"\n        >\n          git branch\n        </button>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx",["187","188"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React, { createRef } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice, Utils } from \"../../../App\";\nimport { default as dateFormat } from \"dateformat\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n  let ModalRef = createRef<ConfirmDelete>();\n  let show = false;\n\n  gitservice.commits\n    .subscribe((x) => {\n      //Utils.log(commits);\n      if (commits) {\n        show = commits.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = dateFormat(\n      commit.commit.committer.timestamp * 1000,\n      \"dddd, mmmm dS, yyyy h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const checkout = async (oid:string) => {\n    try {\n      await ModalRef.current?.show();\n      gitservice.checkout({ref:oid})\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <hr />\n      <div className={show ? \"\" : \"d-none\"}>\n\n        <ConfirmDelete title={\"Checking out\"} text={<div>Checking out a commit will delete the files in Remix.<br></br><strong>Check if you have uncommited work.</strong><br></br>Continue?</div>} ref={ModalRef}></ConfirmDelete>\n        <div className=\"container-fluid p-0\">\n        <h4>Commits</h4>\n          {commits?.map((commit) => {\n            return (\n              <div key={commit.oid} className=\"p-0\">\n                <div className=\"font-weight-bold\">{commit.commit.message}</div>\n                <div className=\"text-muted small\">{commit.commit.author.name || \"\"}</div>\n                <div className=\"text-muted small\">{getDate(commit)}</div>\n                <div className=\"text-truncate text-muted small\">{commit.oid}</div>\n                <div\n                  onClick={async () => await checkout(commit.oid)}\n                  className=\"btn btn-primary btn-sm checkout-btn ml-0 ml-md-0\"\n                >\n                  git checkout\n                </div>\n                <hr></hr>\n              </div>\n            );\n          })}\n\n          <div\n            onClick={async () => await checkout(\"main\")}\n            className=\"btn btn-primary btn-sm checkout-btn mt-2 d-none\"\n            data-oid=\"main\"\n          >\n            git checkout main\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx",["189","190","191","192","193","194"],"import React, { createRef } from \"react\";\nimport { fileservice, gitservice, ipfservice, localipfsstorage, resetFileSystem, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFileArchive } from \"@fortawesome/free-regular-svg-icons\"\nimport { faCloudDownloadAlt } from \"@fortawesome/free-solid-svg-icons\"\ninterface FileToolsProps {}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n  let ModalRef = createRef<ConfirmDelete>();\n\n  const clearAll = async () => {\n    try {  \n      await ModalRef.current?.show()\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <div onClick={async ()=> gitservice.zip()} className='btn btn-primary mb-3'>download as zip <FontAwesomeIcon icon={faFileArchive}></FontAwesomeIcon></div><br></br>\n      <div hidden onClick={async ()=> ipfservice.addAndOpenInVscode()} className='btn btn-primary'>clone in VSCode <FontAwesomeIcon icon={faCloudDownloadAlt}></FontAwesomeIcon></div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx",["195","196","197"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { client, fileservice, Utils } from \"../../../App\";\n\ninterface GitStatusProps { }\n\nexport const GitStatus: React.FC<GitStatusProps> = ({ }) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged = 0;\n  let untracked = 0;\n  let deleted = 0;\n  let modified = 0;\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesCountByStatus(\"staged\");\n      untracked = fileservice.getFilesCountByStatus(\"untracked\");\n      deleted = fileservice.getFilesCountByStatus(\"deleted\");\n      modified = fileservice.getFilesCountByStatus(\"modified\");\n      show = (deleted > 0 || staged > 0 || untracked > 0 || modified > 0)\n      let total = deleted + staged + untracked + modified\n      \n\n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: total===0? 'none':total,\n          type: total===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n\n    })\n    .unsubscribe();\n\n  useEffect(() => { }, []);\n\n  return (\n    <>\n      {show ?\n        <>\n          <hr></hr>\n          <div>Git status</div>\n          <div className=\"alert alert-success\">\n            {staged > 0 ? <div>{staged} staged</div> : <></>}\n            {modified > 0 ? <div>{modified} modified</div> : <></>}\n            {untracked > 0 ? <div>{untracked} untracked</div> : <></>}\n            {deleted > 0 ? <div>{deleted} deleted</div> : <></>}\n          </div></>\n        : <></>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx",["198","199","200"],"import React from \"react\";\nimport { async } from \"rxjs\";\nimport { gitservice } from \"../../App\";\nimport { LocalIPFSView } from \"../LocalStorage/LocalIPFSView\";\n\nimport { IPFSImporter } from \"./IPFSImporter\";\nimport { PinataImport } from \"./PinataImport\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    <>\n        <hr></hr>\n        <IPFSImporter/>\n        <PinataImport></PinataImport>\n        <LocalIPFSView/>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx",["201","202","203","204","205"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, useLocalStorage, Utils } from \"../../App\";\nimport { setConfig } from \"isomorphic-git\";\n\ninterface PinataConfigProps {}\n\nexport const PinataConfig: React.FC<PinataConfigProps> = ({}) => {\n  const [key, setKey] = useLocalStorage(\"pinatakey\", \"\");\n  const [secret, setSecret] = useLocalStorage(\"pinatasecret\", \"\");\n  const [status, setStatus] = useState<boolean>(false);\n\n  const setKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setKey(e.currentTarget.value);\n    setConfig();\n  };\n  const setSecretChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSecret(e.currentTarget.value);\n    setConfig();\n  };\n\n  useEffect(() => {\n    const check = async () => {\n      client.onload(async () => {\n        await checkconfig();\n      });\n    };\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    try {\n      setTimeout(() => {\n        client.cancel('dGitProvider' as any, 'pinList')\n      },3000)\n      let r = await client.call(\"dGitProvider\" as any, \"pinList\", key, secret);\n      setStatus(true);\n      ipfservice.pinataConnectionStatus.next(false);\n      ipfservice.pinataConnectionStatus.next(true);\n      setConfig();\n    } catch (err) {\n      Utils.log(err);\n      setStatus(false);\n      ipfservice.pinataConnectionStatus.next(false);\n    }\n  };\n\n  const setConfig = async () => {\n    ipfservice.pinataConfig = {\n      key: key,\n      secret: secret,\n    };\n  };\n\n  return (\n    <>\n      <hr></hr>\n      <h5>Pinata API credentials</h5>\n      <label>API KEY</label>\n      <input\n        onChange={setKeyChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={key}\n      />\n      <label>API SECRET</label>\n      <input\n        onChange={setSecretChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={secret}\n      />\n      <button id='btncheckpinata' className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {status ? (\n        <div id='pinatachecksuccess' className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are working correctly.\n        </div>\n      ) : (\n        <div id='pinatacheckerror' className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx",["206","207","208","209"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, useLocalStorage } from \"../../App\";\n\ninterface IPFSConfigProps {}\n\nexport const IPFSConfig: React.FC<IPFSConfigProps> = ({}) => {\n  const [host, sethost] = useLocalStorage(\n    \"IPFS_HOST\",\n    ipfservice.ipfsconfig.host\n  );\n  const [port, setport] = useLocalStorage(\n    \"IPFS_PORT\",\n    ipfservice.ipfsconfig.port.toString()\n  );\n  const [protocol, setprotocol] = useLocalStorage(\n    \"IPFS_PROTOCOL\",\n    ipfservice.ipfsconfig.protocol\n  );\n  const [url, setUrl] = useLocalStorage(\n    \"IPFS_URL\",\n    ipfservice.ipfsconfig.ipfsurl || \"\"\n  );\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  const setHostChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    sethost(e.currentTarget.value);\n    ipfservice.ipfsconfig.host = e.currentTarget.value;\n  };\n  const setPortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setport(e.currentTarget.value);\n    ipfservice.ipfsconfig.port = parseInt(e.currentTarget.value);\n  };\n  const setProtocolChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setprotocol(e.currentTarget.value);\n    ipfservice.ipfsconfig.protocol = e.currentTarget.value;\n  };\n  const setUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(e.currentTarget.value);\n    ipfservice.ipfsconfig.ipfsurl = e.currentTarget.value;\n  };\n\n  useEffect(() => {\n    const check  = async () => { \n    //  client.onload(() => {\n        ipfservice.ipfsconfig.host = host;\n        ipfservice.ipfsconfig.ipfsurl = url;\n        ipfservice.ipfsconfig.protocol = protocol;\n        ipfservice.ipfsconfig.port = port;\n    //    checkconfig();\n    //  });\n    }\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    await ipfservice.setipfsHost();\n  };\n\n  return (\n    <>\n      <h5>Custom IPFS gateway</h5>\n      <label>HOST</label>\n\n      <input\n        onChange={setHostChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"hostname\"\n        value={host}\n      />\n      <label>PORT</label>\n      <input\n        onChange={setPortChange}\n        className=\"form-control w-100\"\n        type=\"number\"\n        id=\"port\"\n        value={port}\n      />\n      <label>PROTOCOL</label>\n      <input\n        onChange={setProtocolChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={protocol}\n      />\n      <label>URL</label>\n      <input\n        onChange={setUrlChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={url}\n      />\n      <button id='btncheckipfs' className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {IPFSStatus ? (\n        <div id='ipfschecksuccess' className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are working correctly.\n        </div>\n      ) : (\n        <div id='ipfscheckerror' className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx",["210","211"],"import React, { useState } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice } from \"../../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {\n  compact: boolean\n}\n\nexport const GitControls: React.FC<gitViewProps> = (props) => {\n  const canCommit = useBehaviorSubject(gitservice.canCommit)\n  const [message,setMessage] = useState({value:''})\n\n  gitservice.canCommit.subscribe((x)=>{}).unsubscribe()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  const commitAllowed = ()=>{\n    return canCommit === false || message.value ===\"\"\n  }\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input data-id='commitMessage' className=\"form-control\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      {canCommit?<></>:<div className='alert alert-warning'>Cannot commit in detached state! Create a new branch and check it out first or checkout main.<br></br></div>}\n      <button data-id='commitButton' className=\"btn btn-primary\" disabled={commitAllowed()} onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <hr></hr>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx",["212","213","214","215","216"],"import React, { Suspense, useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport {\n  boxservice,\n  gitservice,\n  ipfservice,\n  localipfsstorage,\n  Utils,\n} from \"../../App\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  const PinataStatus = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  const canExport = useBehaviorSubject(gitservice.canExport);\n\n  ipfservice.pinataConnectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n  gitservice.canExport.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (cid !== \"\" && cid !== undefined && cid) {\n      //Utils.log(ipfservice.cid);\n      return (\n        <>\n          <div id='ipfshashresult' data-hash={ipfservice.cid} className='overflow-hidden w-100'>IPFS Hash: {ipfservice.cid}</div>\n          <br></br>\n          <CopyToClipboard\n            text={ipfservice.cid}\n            onCopy={() => {\n              toast.success(\"Copied to clipboard.\");\n            }}\n          >\n            <button className=\"btn btn-primary mb-2\">Copy to clipboard</button>\n          </CopyToClipboard>\n          <br></br>\n          <a className=\"btn btn-primary mb-2\" target=\"_blank\" href={getUrl()} id=\"CID\">\n            View files\n          </a>\n          <br></br>\n          <a className=\"btn btn-primary\" target=\"_blank\" href={getVscodeUrl()} hidden id=\"VSCODE\">\n            Clone in VSCode\n          </a>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  useEffect(() => {\n    //Utils.log(\"export view\");\n    //ipfservice.setipfsHost();\n  }, []);\n\n  const addFilesToIpfs = async () => {\n    try {\n      await ipfservice.addToIpfs();\n      await localipfsstorage.addToStorage(\n        await localipfsstorage.createBoxObject()\n      );\n    } catch (e) {}\n  };\n\n  const addFilesToPinata = async () =>{\n    try {\n      await ipfservice.addFilesToPinata();\n    } catch (e) {}\n  }\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const getVscodeUrl = () =>{\n    return `vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${cid}`;\n  }\n\n  return (\n    <>\n      <hr></hr>\n      {canExport ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-danger w-md-25 w-100 mt-2\" role=\"alert\">\n          Commit some files first, then you can export.\n        </div>\n      )}\n       <h4>Export to Pinata Cloud</h4>\n       {PinataStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your Pinata API key is incorrect or missing. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(PinataStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToPinata()}\n      >\n        Export to Pinata\n      </button>\n      <hr></hr>\n      <h4>Export to Local storage & IPFS</h4>\n      {IPFSStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(IPFSStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"addtocustomipfs\"\n        onClick={async () => await addFilesToIpfs()}\n      >\n        Export to custom IPFS & store in local storage\n      </button>\n\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx",["217","218","219"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, fileservice, gitservice, Utils } from \"../../App\";\nimport path from 'path'\nimport { Col, Row } from \"react-bootstrap\";\nimport { faUndo, faPlus, faMinus, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { async } from \"rxjs\";\n\ninterface GitStatusProps {}\n\nexport const CompactExplorer: React.FC<GitStatusProps> = ({}) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged:any[] = [];\n  let untracked:any[];\n  let deleted:any[];\n  let modified:any[];\n  let alltrackedFiles:any[];\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesByStatus(\"staged\");\n      untracked = fileservice.getFilesByStatus(\"untracked\");\n      deleted = fileservice.getFilesByStatus(\"deleted\");\n      modified = fileservice.getFilesByStatus(\"modified\");\n      show = (deleted.length>0 || staged.length>0 ||  untracked.length>0 || modified.length>0)\n      alltrackedFiles = fileservice.getFilesWithNotModifiedStatus();\n      alltrackedFiles = alltrackedFiles.filter((trackedFile) => {\n        return staged.findIndex((stagedFile) => stagedFile.filename === trackedFile.filename) === -1\n      })\n      let total = alltrackedFiles.length\n      const badges = total + staged.length\n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: badges===0? 'none':badges,\n          type: badges===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n    })\n    .unsubscribe();\n\n  useEffect(() => {}, []);\n\n  function RenderGroups(){\n      //const groups = [{name:'Staged', group: staged}, {name:'Untracked',group:untracked},{name:'Modified', group:modified},{name:'Deleted', group:deleted}]\n      const groups = [{name:'Staged', group: staged}, {name:'Changes', group: alltrackedFiles}]\n      return (<>\n        {\n           groups.map((ob:any, index:number)=>{\n                return (\n                    <div key={`h${index}`}>\n                    {ob.group.length>0? <h5 className='mb-3 mt-3'>{ob.name}</h5>:<></>}\n                    <RenderFiles Files={ob.group} Type={ob.name}></RenderFiles>\n                    </div>\n                )\n            })\n        }\n      \n      </>)\n  }\n\n  async function fileClick(file:any){\n    Utils.log(file)\n    let status = fileservice.getFileStatusForFile(file.filename || \"\");\n    if(status?.indexOf(\"modified\")  !== -1){\n      await client.call('manager', 'activatePlugin', 'gitdiff')\n      await client.call('gitdiff' as any, 'diff', file.filename)\n      await client.call('tabs' as any, 'focus', 'gitdiff')\n    }else{\n      await client.call('fileManager', 'open', file.filename)\n    }\n  }\n\n  function RenderFiles(ob:any) {\n      Utils.log('FILES', ob)\n      return (<>\n        {\n            ob.Files.map((file:any, index: number)=>{\n                return (\n                  <div key={`h${index}`}>\n                    <Row className='mb-1'>\n                        <Col className='col-8'>\n                        <div className='pointer text-truncate' onClick={async() => fileClick(file)}>\n                          <span data-id={`file${ob.Type}${path.basename(file.filename)}`} className='font-weight-bold'>{path.basename(file.filename)}</span>\n                          <div className='text-secondary'> {file.filename}</div>\n                        </div>\n                        </Col>\n                        <Col className='col-4 p-0'>\n                          <Row>\n                        <RenderButtons File={file} Type={ob.Type}></RenderButtons>\n                        </Row>\n                        </Col>\n                    </Row>\n\n\n                    </div>\n                )\n            })\n        }\n      </>)\n  }\n\n  function FunctionStatusIcons(ob: any) {\n    let status = ob.status\n    return (<>\n    <Col className='col-2 p-0'>\n    {status?.indexOf(\"modified\")  === -1? <></>: <button  className='btn btn-sm mr-1'>M</button> }\n    {status?.indexOf(\"untracked\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>U</button> }\n    {status?.indexOf(\"deleted\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>D</button> }\n    {status?.indexOf(\"added\") === -1 ? <></> : <button className='btn btn-sm  mr-1'>U</button>}\n    </Col>\n    </>)\n  }\n \n\n  function RenderButtons(ob:any){   \n        let status = fileservice.getFileStatusForFile(ob.File.filename || \"\");\n      if(ob.Type === 'Untracked'){\n        return <>\n            <button  onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Staged'){\n        return <>\n        <Col className='col-8 p-0'>\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n            {status?.indexOf(\"deleted\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n           \n            {status?.indexOf(\"deleted\") !== -1 ? <></> : <button data-id={`unStage${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faMinus} className=\"\" /></button>}\n            </Col>\n            <FunctionStatusIcons status={status}/>\n            \n        </>\n      }\n      if(ob.Type === 'Modified'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n            <button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Deleted'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n        </>\n      }\n      if(ob.Type === 'Changes'){\n        return <>\n          <Col className='col-8 p-0'>\n            {status?.indexOf(\"deleted\")  === -1? <></>:<><button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} data-id={`undo${ob.Type}${path.basename(ob.File.filename)}`} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button><button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button></>}\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} data-id={`undo${ob.Type}${path.basename(ob.File.filename)}`} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n           {(status?.indexOf(\"unstaged\")  !== -1 || status?.indexOf(\"deleted\")  !== -1)? <></>:<button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n           {(status?.indexOf(\"unstaged\")  !== -1 && status?.indexOf(\"modified\")  !== -1)? <button data-id={`addToGit${ob.Type}${path.basename(ob.File.filename)}`} onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>:<></>}  \n          </Col>\n            <FunctionStatusIcons status={status}/>\n        </>\n      }\n      return <></>\n  }\n\n  return (\n    <>\n    {show?\n    <>\n    <div>\n        <button data-id='stageAll' onClick={async () => await gitservice.addAllToGit()} className='btn btn-sm btn-primary'>Stage all</button>\n        <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary ml-2'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n        <hr></hr>\n        <RenderGroups></RenderGroups>\n    </div></>\n    :<>Nothing to commit\n    <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary ml-2'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n    </>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/github/github.tsx",["220","221","222","223","224","225","226","227"],"import { faTrash, faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, createRef } from \"react\";\nimport { useState } from \"react\";\nimport { Alert, Card } from \"react-bootstrap\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\nimport { async } from \"rxjs\";\nimport { gitservice, useLocalStorage } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport { useBehaviorSubject } from \"../usesubscribe\";\n\ninterface importerProps { }\n\nexport const GitHubImporter: React.FC<importerProps> = () => {\n\n    const [currentRemote, setCurrentRemote] = useLocalStorage(\n        \"CURRENT_REMOTE\",\n        'origin'\n    );\n    const [cloneUrl, setCloneUrl] = useLocalStorage(\n        \"CLONE_URL\",\n        ''\n    );\n\n    const [cloneDepth, setCloneDepth] = useLocalStorage(\n        \"CLONE_DEPTH\",\n        1\n    );\n\n    const [cloneBranch, setCloneBranch] = useLocalStorage(\n        \"CLONE_BRANCH\",\n        ''\n    );\n\n    const [url, setUrl] = useLocalStorage(\n        \"GITHUB_URL\",\n        ''\n    );\n\n    const branch = useBehaviorSubject(gitservice.branch);\n\n    // const [branch, setBranch] = useLocalStorage(\n    //     \"GITHUB_BRANCH\",\n    //     'main'\n    // );\n    const [remoteBranch, setRemoteBranch] = useLocalStorage(\n        \"GITHUB_REMOTE_BRANCH\",\n        'main'\n    );\n    const [token, setToken] = useLocalStorage(\n        \"GITHUB_TOKEN\",\n        ''\n    );\n    const [force, setForce] = useLocalStorage(\n        \"GITHUB_FORCE\",\n        false\n    );\n\n    const [cloneAllBranches, setcloneAllBranches] = useLocalStorage(\n        \"GITHUB_CLONE_ALL_BRANCES\",\n        false\n    );\n\n    const [remoteName, setRemoteName] = useLocalStorage(\n        \"GITHUB_REMOTE_NAME\",\n        ''\n    );\n\n    const [name, setName] = useLocalStorage(\n        \"GITHUB_NAME\",\n        ''\n    );\n\n    const [email, setEmail] = useLocalStorage(\n        \"GITHUB_EMAIL\",\n        ''\n    );\n    const remotes = useBehaviorSubject(gitservice.remotes);\n\n\n    let ModalRef = createRef<ConfirmDelete>();\n\n    const clone = async () => {\n        try {\n            await ModalRef.current?.show();\n            gitservice.clone(cloneUrl, cloneBranch, token, cloneDepth, !cloneAllBranches)\n        } catch (e) {\n\n        }\n    }\n\n    const addRemote = async () => {\n        await gitservice.addRemote(remoteName, url)\n        setCurrentRemote(remoteName)\n        await gitservice.getRemotes()\n    }\n\n    const delRemote = async (name: string) => {\n        await gitservice.delRemote(name)\n        await gitservice.getRemotes()\n    }\n\n    const push = async () => {\n        gitservice.push(currentRemote, branch || '', remoteBranch, token, force, name, email)\n    }\n\n    const pull = async () => {\n        gitservice.pull(currentRemote, branch || '', remoteBranch, token, name, email)\n    }\n\n    const fetch = async () => {\n        gitservice.fetch(currentRemote, '', '', token, name, email)\n    }\n\n    const onUrlChange = (value: string) => {\n        setUrl(value)\n    }\n    const onCloneUrlChange = (value: string) => {\n        setCloneUrl(value)\n    }\n    const onCloneBranchChange = (value: string) => {\n        setCloneBranch(value)\n    }\n    const onBranchChange = (value: string) => {\n        //setBranch(value)\n    }\n    const onRemoteBranchChange = (value: string) => {\n        setRemoteBranch(value)\n    }\n    const onTokenChange = (value: string) => {\n        setToken(value)\n    }\n    const onAllBranchChange = (event: any) => {\n        const target = event.target;\n        const value = target.checked;\n        setcloneAllBranches(value)\n    }\n    const onForceChange = (event: any) => {\n        const target = event.target;\n        const value = target.checked;\n        setForce(value)\n    }\n    const onNameChange = (value: string) => {\n        setName(value)\n    }\n    const onRemoteNameChange = (value: string) => {\n        setRemoteName(value)\n    }\n    const onEmailChange = (value: string) => {\n        setEmail(value)\n    }\n\n    const onDepthChange = (value: number) => {\n        setCloneDepth(value)\n    }\n\n    const remoteChange = (name: string) => {\n        setCurrentRemote(name)\n    }\n\n    return (\n        <>\n            <ConfirmDelete\n                title={\"Cloning\"}\n                text={\"This will create a new workspace! Your repo might be to big and crash the browser! Continue?\"}\n                ref={ModalRef}\n            ></ConfirmDelete>\n\n            {token ? <></> :\n                <Alert variant='warning'>Missing GitHub personal token. Only cloning available.<br></br>\n                    <a href='https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token' target='_blank'>More info on personal access tokens...</a>\n                </Alert>}\n            {name ? <></> :\n                <Alert variant='warning'>Missing GitHub name & email.</Alert>\n            }\n            <hr></hr>\n            <h4>Available remotes</h4>\n            {\n                remotes?.map((remote, index:number) => {\n                    return <div key={index} className='row mb-1'>\n                        <div className='col'>\n                            <Card>\n                                <Card.Body className='p-1'>\n                                <input checked={currentRemote === remote.remote} onChange={async () => remoteChange(remote.remote)} type=\"radio\" className='mr-2' value={remote.remote} id={remote.remote}\n                                name=\"remote\" />\n                            <a className='mr-2' href={remote.url} target=\"_blank\">{remote.remote}<br></br>{remote.url}</a>\n                                </Card.Body>\n                            </Card>\n\n                        </div>\n                        <div className='col'>\n                            <button\n                                onClick={async () =>\n                                    await delRemote(remote.remote)\n                                }\n                                className=\"btn btn-danger btn-sm delete3b-btn mt-1\"\n                            >\n                                <FontAwesomeIcon icon={faTrash} />\n                            </button>\n                        </div>\n                    </div>\n                })\n            }\n            {(remotes && remotes?.length > 0) ? <></> : <div>No remotes are set</div>}\n            <hr></hr>\n            <h4>commands</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>LOCAL BRANCH</label>\n                    <input name='localbranch' readOnly value={branch} className=\"form-control\" type=\"text\" id=\"localbranch\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>REMOTE BRANCH</label>\n                    <input name ='remotebranch' onChange={e => onRemoteBranchChange(e.target.value)} value={remoteBranch} className=\"form-control\" type=\"text\" id=\"remotebranch\" />\n                </div></div>\n            <button className='btn btn-primary m-1' onClick={async () => {\n                await gitservice.init()\n            }}>init</button>\n            <button className='btn btn-primary m-1' onClick={async () => {\n                push()\n            }}>push</button>\n            <button className='btn btn-primary m-1' onClick={async () => {\n                pull()\n            }}>pull</button>\n            <button className='btn btn-primary m-1' onClick={async () => {\n                fetch()\n            }}>fetch</button><br></br>\n            <label>FORCE PUSH</label>\n            <input name='force' className='ml-2' checked={force} onChange={e => onForceChange(e)} value={token} type=\"checkbox\" id=\"forecepush\" />\n            <hr></hr>\n            <h4>GIT REMOTE</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>NAME</label>\n                    <input name='remotename' onChange={e => onRemoteNameChange(e.target.value)} value={remoteName} className=\"form-control\" type=\"text\" id=\"remotename\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>URL</label>\n                    <input name='remoteurl' onChange={e => onUrlChange(e.target.value)} value={url} className=\"form-control\" type=\"text\" id=\"remoteurl\" />\n                </div>\n            </div>\n\n\n            <button className='btn btn-primary m-1' onClick={async () => {\n                addRemote()\n            }}>add remote</button><br></br>\n            <hr></hr>\n            <h4>CLONE</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>URL</label>\n                    <input name='cloneurl' onChange={e => onCloneUrlChange(e.target.value)} value={cloneUrl} className=\"form-control\" type=\"text\" id=\"cloneurl\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                <label>BRANCH</label>\n                    <input name='clonebranch' onChange={e => onCloneBranchChange(e.target.value)} value={cloneBranch} className=\"form-control\" type=\"text\" id=\"clonebranch\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>DEPTH **</label>\n                    <input name='clonedepth' onChange={e => onDepthChange(parseInt(e.target.value))} value={cloneDepth} className=\"form-control\" type=\"number\" id=\"clonedepth\" />\n                </div>\n\n            </div>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>CLONE ALL BRANCHES?</label><br></br>\n                    <input name='clonallbranches' onChange={e => onAllBranchChange(e)} checked={cloneAllBranches} className=\"\" type=\"checkbox\" id=\"clonallbranches\" />\n                </div>\n            </div>\n            <button data-id='clonebtn' className='btn btn-primary m-2' onClick={async () => {\n                clone()\n            }}>clone</button>\n            <hr></hr>\n            <h4>CONFIG</h4>\n            <label>PERSONAL GITHUB TOKEN</label>\n            <input name='token' readOnly onFocus={e => e.target.readOnly = false} onBlur={e => e.target.readOnly = true} onChange={e => onTokenChange(e.target.value)} value={token} className=\"form-control\" autoComplete=\"off\" type=\"password\" id=\"token\" />\n            <CopyToClipboard\n                text={token}\n                onCopy={() => {\n                    toast.success(\"Copied to clipboard.\");\n                }}\n            >\n                <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy token to clipboard</button>\n            </CopyToClipboard>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>NAME</label>\n                    <input name='name' onChange={e => onNameChange(e.target.value)} value={name} className=\"form-control\" type=\"text\" id=\"githubname\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>EMAIL</label>\n                    <input name='email' onChange={e => onEmailChange(e.target.value)} value={email} className=\"form-control\" type=\"text\" id=\"githubemail\" />\n                </div>\n            </div>\n\n\n\n\n\n\n            <hr></hr>\n\n            <div>\n                ** save space in your browser and clone less commits\n            </div>\n            <div>\n                To use this you need to get a personal access token on GitHub and add REPO permissions.<br></br>\n                <a href='https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token' target='_blank'>More info on personal access tokens...</a>\n            </div>\n\n        </>\n    );\n};\n","/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/utils.ts",["228","229","230","231","232"],"import path from \"path\";\nimport { isForOfStatement } from \"typescript\";\nimport { Utils } from \"../../App\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n\n  //Utils.log(\"F\", files);\n\n  files.map((f, i) => {\n    files[i] = Utils.addSlash(files[i]);\n    const dirname = path.dirname(files[i]);\n    //Utils.log(dirname, dirname.startsWith(\"/.\"));\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    //Utils.log(ob);\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      ////Utils.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n      if (f.fullname === \"/\") f.parentId = null;\n    }\n  });\n  //Utils.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  //Utils.log(\"OB\", ob);\n  //ob.sort(sortbydirectorylevel)\n\n  const nest = (items: any, id: any = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  //Utils.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  //Utils.log(\"OB\", ob);\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  ////Utils.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n\n\nexport const arrayUnique = (array:any)=>{\n  var a = array.concat();\n  for(var i=0; i<a.length; ++i) {\n      for(var j=i+1; j<a.length; ++j) {\n          if(a[i] === a[j])\n              a.splice(j--, 1);\n      }\n  }\n\n  return a;\n}","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx",["233","234"],"import { Button, Modal } from 'react-bootstrap';\nimport React from 'react'\n\n\ntype MyProps = { title:string, text:any };\ntype MyState = { show: boolean };\n\nexport default class ConfirmDelete extends React.Component<MyProps, MyState> {\n    promiseInfo:any\n    constructor(props:any){\n      super(props)\n      this.state = {\n        show: false\n      };\n  \n      this.promiseInfo = {};\n    }\n    show = async () => {\n      return new Promise((resolve, reject) => {\n        this.promiseInfo = {\n          resolve,\n          reject\n        };\n        this.setState({\n          show: true\n        });\n      });\n    };\n  \n    hide = async () => {\n      const { resolve, reject } = this.promiseInfo;\n      this.setState({\n        show: false\n      });\n      reject()\n    };\n\n    ok = async ()=>{\n        const { resolve, reject } = this.promiseInfo;\n        this.setState({\n          show: false\n        });\n        resolve()\n    }\n  \n    render() {\n      const { show } = this.state;\n      \n      return (\n        <>\n\n  \n        <Modal show={show} onHide={async ()=> await this.hide()}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.props.text}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={async ()=> await this.hide()}>\n              No\n            </Button>\n            <Button variant=\"primary\" onClick={async ()=> await this.ok()}>\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n      );\n    }\n  }","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx",["235","236"],"import React, { createRef, useState } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus)\n  let ModalRef = createRef<ConfirmDelete>();\n  ipfservice.connectionStatus.subscribe((x)=>{}).unsubscribe(); \n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid,name,false)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <div className=\"form-group\">\n        <h4>Import from IPFS hash</h4>\n        <label>IPFS HASH</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfshash\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button disabled={(IPFSStatus?false:true)||(cid.value===\"\"?true:false)} onClick={async()=> await importFromCID(cid.value, cid.value)} className=\"btn w-md-25 w-100 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      {IPFSStatus?<></>:<div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n        Your IPFS settings are incorrect. Unable to connect. Check your settings.\n      </div>}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["237","238","239","240","241"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, localipfsstorage, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\nimport dateFormat from \"dateformat\";\n\ninterface LocalIPFSViewProps { }\n\nexport const LocalIPFSView: React.FC<LocalIPFSViewProps> = ({ }) => {\n  const boxobjects = useBehaviorSubject(localipfsstorage.boxObjects);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  useEffect(() => {\n    //localipfsstorage.init();\n  }, []);\n\n  localipfsstorage.boxObjects\n    .subscribe((x) => {\n      //Utils.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a className=\"btn btn-primary btn-sm mr-2\" target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid, name, true)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteItem = async (o: any) => {\n    try {\n      await EraseModalRef.current?.show();\n      await localipfsstorage.deleteFromStorage(o?.cid)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  }\n\n  const getDate = (str: any) => {\n    let date = dateFormat(\n      str * 1000,\n      \"dd/mm/yy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  return (\n    <>\n      <h4>Import from Local Storage</h4>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <ConfirmDelete title={\"Deleting\"} text={\"Are you sure you want to erase this item?\"} ref={EraseModalRef}></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <Card className=\"w-md-75 w-100\">\n                <Card.Body>\n                  <h5>{o.key}</h5>\n                  <div className=\"row\">\n                    <div className=\"col d-none\">IPFS</div>\n                    <div className=\"col\">{o.cid}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">{getDate(o.datestored)}</div>\n                  </div>\n                  <div className=\"row d-none\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col p-0\">\n                <button\n                  data-hash = {o.cid}\n                  onClick={async () => await importFromCID(o.cid, o.key)}\n                  className=\"localipfsimportbutton btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n                {getViewButton(o.cid)}\n                <CopyToClipboard\n                  text={o.cid || \"\"}\n                  onCopy={() => {\n                    toast.success(\"Copied to clipboard.\");\n                  }}\n                >\n                  <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash</button>\n                </CopyToClipboard>\n                <button\n                  onClick={async () =>\n                    await deleteItem(o)\n                  }\n                  className=\"btn btn-danger btn-sm ml-2 delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n        {boxobjects?.length === 0 ? <>Nothing has been stored here yet.</> : <></>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx",["242","243","244","245","246","247"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect, useState } from \"react\";\nimport { Accordion, Alert, Button, Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, loaderservice, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport dateFormat from \"dateformat\";\nimport { toast } from \"react-toastify\";\n\ninterface PinataImportProps { }\n\nexport const PinataImport: React.FC<PinataImportProps> = ({ }) => {\n  const status = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  let [data, setData] = useState<any[]>([]);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  let EraseModalOld = createRef<ConfirmDelete>();\n  ipfservice.pinataConnectionStatus.subscribe((x) => { }).unsubscribe();\n\n  useEffect(() => {\n    if (status) read();\n  }, [status]);\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const read = async () => {\n    try {\n      try {\n        setTimeout(() => {\n          client.cancel('dGitProvider' as any, 'pinList')\n        }, 3000)\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"pinList\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret\n        );\n        let rows = (r.rows || []).filter((o: any) => {\n          return o.metadata.keyvalues;\n        });\n        for (let row of rows) {\n          try {\n            row.metadata.keyvalues.commits = JSON.parse(\n              row.metadata.keyvalues.commits\n            );\n          } catch (e) {\n            row.metadata.keyvalues.commits = [];\n          }\n        }\n        // find any row that is included in another row with the same tree\n        for (let row of rows) {\n          if (row.metadata.keyvalues.commits[0]) {\n            const tree = row.metadata.keyvalues.commits[0].commit.tree;\n            const oid = row.metadata.keyvalues.commits[0].oid;\n            const doubles = rows.filter((subrow: any) => {\n              if (subrow.metadata.keyvalues.commits) {\n                return subrow.metadata.keyvalues.commits.find((commit: any) => {\n                  return commit.commit.tree === tree && commit.oid === oid && subrow.metadata.keyvalues.ref !== oid\n                })\n              } else {\n                return false\n              }\n            });\n            row.hasChild = doubles.length > 0\n            row.doubles = doubles\n            //Utils.log(\"DOUBLES OF,,,\", oid, tree, doubles)\n          }\n        }\n        //Utils.log(\"ROWS\", rows);\n        setData(rows);\n      } catch (err) {\n        Utils.log(err);\n      }\n      //this.objects = r? JSON.parse(r):[];\n      //Utils.log(\"READ CONFIG\",this.objects);\n    } catch (e) { }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a\n          className=\"btn btn-primary btn-sm mr-2\"\n          target=\"_blank\"\n          href={getUrl(cid)}\n          id=\"CID\"\n        >\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getDate = (str: any) => {\n    let date = dateFormat(\n      str * 1000,\n      \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n\n      await ipfservice.importFromCID(cid, name, false);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteOldItems = async () => {\n    try {\n      await EraseModalOld.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        for (let o of data) {\n          if (o.hasChild) {\n            Utils.log(\"delete \", o)\n            let r = await client.call(\n              \"dGitProvider\" as any,\n              \"unPin\",\n              ipfservice.pinataConfig.key,\n              ipfservice.pinataConfig.secret,\n              o.ipfs_pin_hash\n            );\n          }\n        }\n\n        await read();\n      } catch (err) {\n        Utils.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n\n    } catch (e) {\n\n    }\n  }\n\n  const deleteItem = async (cid: string) => {\n    try {\n      await EraseModalRef.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"unPin\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret,\n          cid\n        );\n        await read();\n      } catch (err) {\n        Utils.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n      //await localipfsstorage.deleteFromStorage(o?.ipfs_pin_hash);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n\n      <h4>Import from Pinata</h4>\n      <Button onClick={async () => deleteOldItems()} className='mb-2 btn btn-sm btn-danger'>Remove old commits <FontAwesomeIcon icon={faTrash} /></Button>\n      <ConfirmDelete\n        title={\"Importing\"}\n        text={\"This will create a new workspace! Continue?\"}\n        ref={ModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deleting\"}\n        text={\"Are you sure you want to erase this item?\"}\n        ref={EraseModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deletingold\"}\n        text={\"Are you sure you want to delete commits that have been superseded?\"}\n        ref={EraseModalOld}\n      ></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(data || [])\n          .filter((o: any) => {\n            return o.metadata.keyvalues;\n          })\n          .map((o: any, index: any) => {\n            return (\n              <div key={index} className=\"row p-0\">\n                <Card className=\"w-md-75 w-100\">\n                  <Card.Body>\n                    <h5>{o.metadata.name}</h5>\n                    <div className=\"row d-none\">\n                      <div className=\"col\">IPFS</div>\n                      <div className=\"col\">{o?.ipfs_pin_hash}</div>\n                    </div>\n                    <div className=\"row d-none\">\n                      <div className=\"col d-none\">DATE EXPORTED</div>\n                      <div className=\"col\">\n                        {dateFormat(\n                          o?.date_pinned,\n                          \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">\n                        {o?.metadata?.keyvalues?.message}\n                      </div>\n                    </div>\n                    <div className=\"row d-none\">\n                      <div className=\"col\">OID</div>\n                      <div className=\"col\">{o?.metadata?.keyvalues?.ref}</div>\n                    </div>\n                    {o.hasChild ?\n\n                      <>\n                        <Alert className='mt-1' variant='warning'>This commit has been superseded. You can probably remove it.<br></br>\n                          Newer commits:<br></br>\n                          {\n                            o.doubles.map((double: any) => {\n                              return <div>{double.metadata?.name}</div>\n                            })\n                          }\n                        </Alert>\n                      </> : <></>}\n                    <Accordion className='p-0'>\n                      <Card className='p-0'>\n                        <Card.Header className='p-0 pb-1'>\n                          <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                            className='p-0'\n                          >\n                            history\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse className='p-0' eventKey=\"0\">\n                          <Card.Body className='p-0'>\n                            {o?.metadata?.keyvalues?.commits.map(\n                              (commit: any, index: number) => {\n                                return (\n                                  <div key={`h${index}`}>\n                                    <div className=\"row\">\n                                      <div className=\"col-md-6 col-12\">\n                                        {commit.commit?.message}\n                                      </div>\n                                      <div className=\"col-md-6 col-12\">\n                                        {commit.commit?.committer?.timestamp ? <>{getDate(commit.commit?.committer?.timestamp)}</> : <>no date</>}\n                                      </div>\n                                    </div><hr></hr></div>\n                                );\n                              }\n                            )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                  </Card.Body>\n                </Card>\n                <div className=\"col p-0\">\n                  <button\n                    onClick={async () =>\n                      await importFromCID(o.ipfs_pin_hash, o.metadata.name)\n                    }\n                    className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                  >\n                    import\n                  </button>\n                  {getViewButton(o.ipfs_pin_hash)}\n\n\n                  <CopyToClipboard\n                    text={o.ipfs_pin_hash}\n                    onCopy={() => {\n                      toast.success(\"Copied to clipboard.\");\n                    }}\n                  >\n                    <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash</button>\n                  </CopyToClipboard>\n                  <button\n                    onClick={async () => await deleteItem(o.ipfs_pin_hash)}\n                    className=\"btn btn-danger btn-sm delete3b-btn ml-2\"\n                  >\n                    <FontAwesomeIcon icon={faTrash} />\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        {data?.length === 0 ? <>Nothing has been stored here yet.</> : <></>}\n      </div>\n      <hr></hr>\n    </>\n  );\n};\n",{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":77,"column":10,"nodeType":"254","messageId":"255","endLine":77,"endColumn":19},{"ruleId":"252","severity":1,"message":"256","line":81,"column":10,"nodeType":"254","messageId":"255","endLine":81,"endColumn":17},{"ruleId":"252","severity":1,"message":"257","line":86,"column":10,"nodeType":"254","messageId":"255","endLine":86,"endColumn":21},{"ruleId":"252","severity":1,"message":"258","line":86,"column":23,"nodeType":"254","messageId":"255","endLine":86,"endColumn":37},{"ruleId":"252","severity":1,"message":"259","line":97,"column":9,"nodeType":"254","messageId":"255","endLine":97,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":99,"column":13,"nodeType":"262","messageId":"263","endLine":99,"endColumn":15},{"ruleId":"264","severity":1,"message":"265","line":247,"column":77,"nodeType":"266","endLine":247,"endColumn":186},{"ruleId":"252","severity":1,"message":"267","line":1,"column":10,"nodeType":"254","messageId":"255","endLine":1,"endColumn":13},{"ruleId":"268","severity":1,"message":"269","line":4,"column":5,"nodeType":"270","messageId":"271","endLine":4,"endColumn":21},{"ruleId":"252","severity":1,"message":"272","line":4,"column":3,"nodeType":"254","messageId":"255","endLine":4,"endColumn":13},{"ruleId":"252","severity":1,"message":"273","line":8,"column":3,"nodeType":"254","messageId":"255","endLine":8,"endColumn":8},{"ruleId":"252","severity":1,"message":"274","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":25},{"ruleId":"252","severity":1,"message":"272","line":3,"column":40,"nodeType":"254","messageId":"255","endLine":3,"endColumn":50},{"ruleId":"252","severity":1,"message":"275","line":5,"column":10,"nodeType":"254","messageId":"255","endLine":5,"endColumn":16},{"ruleId":"252","severity":1,"message":"276","line":1,"column":8,"nodeType":"254","messageId":"255","endLine":1,"endColumn":11},{"ruleId":"252","severity":1,"message":"277","line":4,"column":8,"nodeType":"254","messageId":"255","endLine":4,"endColumn":12},{"ruleId":"252","severity":1,"message":"278","line":7,"column":10,"nodeType":"254","messageId":"255","endLine":7,"endColumn":22},{"ruleId":"252","severity":1,"message":"279","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":15},{"ruleId":"252","severity":1,"message":"280","line":339,"column":13,"nodeType":"254","messageId":"255","endLine":339,"endColumn":19},{"ruleId":"252","severity":1,"message":"281","line":2,"column":8,"nodeType":"254","messageId":"255","endLine":2,"endColumn":11},{"ruleId":"252","severity":1,"message":"274","line":3,"column":3,"nodeType":"254","messageId":"255","endLine":3,"endColumn":18},{"ruleId":"252","severity":1,"message":"277","line":9,"column":8,"nodeType":"254","messageId":"255","endLine":9,"endColumn":12},{"ruleId":"252","severity":1,"message":"282","line":10,"column":10,"nodeType":"254","messageId":"255","endLine":10,"endColumn":21},{"ruleId":"252","severity":1,"message":"283","line":10,"column":23,"nodeType":"254","messageId":"255","endLine":10,"endColumn":45},{"ruleId":"252","severity":1,"message":"284","line":10,"column":47,"nodeType":"254","messageId":"255","endLine":10,"endColumn":58},{"ruleId":"285","severity":1,"message":"286","line":134,"column":35,"nodeType":"287","messageId":"288","endLine":134,"endColumn":37},{"ruleId":"285","severity":1,"message":"286","line":135,"column":29,"nodeType":"287","messageId":"288","endLine":135,"endColumn":31},{"ruleId":"285","severity":1,"message":"286","line":148,"column":35,"nodeType":"287","messageId":"288","endLine":148,"endColumn":37},{"ruleId":"285","severity":1,"message":"286","line":163,"column":35,"nodeType":"287","messageId":"288","endLine":163,"endColumn":37},{"ruleId":"285","severity":1,"message":"286","line":177,"column":35,"nodeType":"287","messageId":"288","endLine":177,"endColumn":37},{"ruleId":"252","severity":1,"message":"289","line":5,"column":10,"nodeType":"254","messageId":"255","endLine":5,"endColumn":15},{"ruleId":"252","severity":1,"message":"290","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":16},{"ruleId":"252","severity":1,"message":"273","line":5,"column":10,"nodeType":"254","messageId":"255","endLine":5,"endColumn":15},{"ruleId":"252","severity":1,"message":"273","line":4,"column":22,"nodeType":"254","messageId":"255","endLine":4,"endColumn":27},{"ruleId":"291","severity":1,"message":"292","line":9,"column":53,"nodeType":"293","messageId":"263","endLine":9,"endColumn":55},{"ruleId":"252","severity":1,"message":"273","line":4,"column":22,"nodeType":"254","messageId":"255","endLine":4,"endColumn":27},{"ruleId":"291","severity":1,"message":"292","line":9,"column":47,"nodeType":"293","messageId":"263","endLine":9,"endColumn":49},{"ruleId":"252","severity":1,"message":"294","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":21},{"ruleId":"252","severity":1,"message":"295","line":2,"column":47,"nodeType":"254","messageId":"255","endLine":2,"endColumn":63},{"ruleId":"252","severity":1,"message":"274","line":2,"column":65,"nodeType":"254","messageId":"255","endLine":2,"endColumn":80},{"ruleId":"252","severity":1,"message":"273","line":2,"column":82,"nodeType":"254","messageId":"255","endLine":2,"endColumn":87},{"ruleId":"291","severity":1,"message":"292","line":9,"column":53,"nodeType":"293","messageId":"263","endLine":9,"endColumn":55},{"ruleId":"252","severity":1,"message":"296","line":12,"column":9,"nodeType":"254","messageId":"255","endLine":12,"endColumn":17},{"ruleId":"252","severity":1,"message":"273","line":3,"column":31,"nodeType":"254","messageId":"255","endLine":3,"endColumn":36},{"ruleId":"291","severity":1,"message":"292","line":7,"column":53,"nodeType":"293","messageId":"263","endLine":7,"endColumn":56},{"ruleId":"252","severity":1,"message":"297","line":8,"column":9,"nodeType":"254","messageId":"255","endLine":8,"endColumn":14},{"ruleId":"252","severity":1,"message":"298","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":15},{"ruleId":"252","severity":1,"message":"272","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":20},{"ruleId":"291","severity":1,"message":"292","line":13,"column":51,"nodeType":"293","messageId":"263","endLine":13,"endColumn":53},{"ruleId":"252","severity":1,"message":"299","line":3,"column":10,"nodeType":"254","messageId":"255","endLine":3,"endColumn":28},{"ruleId":"252","severity":1,"message":"300","line":5,"column":10,"nodeType":"254","messageId":"255","endLine":5,"endColumn":19},{"ruleId":"291","severity":1,"message":"292","line":9,"column":59,"nodeType":"293","messageId":"263","endLine":9,"endColumn":61},{"ruleId":"301","severity":1,"message":"302","line":30,"column":6,"nodeType":"303","endLine":30,"endColumn":8,"suggestions":"304"},{"ruleId":"252","severity":1,"message":"305","line":38,"column":11,"nodeType":"254","messageId":"255","endLine":38,"endColumn":12},{"ruleId":"252","severity":1,"message":"306","line":1,"column":28,"nodeType":"254","messageId":"255","endLine":1,"endColumn":36},{"ruleId":"252","severity":1,"message":"275","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":16},{"ruleId":"291","severity":1,"message":"292","line":8,"column":55,"nodeType":"293","messageId":"263","endLine":8,"endColumn":57},{"ruleId":"301","severity":1,"message":"307","line":55,"column":6,"nodeType":"303","endLine":55,"endColumn":8,"suggestions":"308"},{"ruleId":"252","severity":1,"message":"309","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":19},{"ruleId":"252","severity":1,"message":"310","line":5,"column":10,"nodeType":"254","messageId":"255","endLine":5,"endColumn":16},{"ruleId":"252","severity":1,"message":"311","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":25},{"ruleId":"252","severity":1,"message":"273","line":8,"column":3,"nodeType":"254","messageId":"255","endLine":8,"endColumn":8},{"ruleId":"252","severity":1,"message":"312","line":17,"column":9,"nodeType":"254","messageId":"255","endLine":17,"endColumn":21},{"ruleId":"264","severity":1,"message":"265","line":44,"column":11,"nodeType":"266","endLine":44,"endColumn":88},{"ruleId":"264","severity":1,"message":"265","line":48,"column":11,"nodeType":"266","endLine":48,"endColumn":99},{"ruleId":"252","severity":1,"message":"298","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":15},{"ruleId":"291","severity":1,"message":"292","line":12,"column":59,"nodeType":"293","messageId":"263","endLine":12,"endColumn":61},{"ruleId":"252","severity":1,"message":"297","line":13,"column":9,"nodeType":"254","messageId":"255","endLine":13,"endColumn":14},{"ruleId":"252","severity":1,"message":"313","line":1,"column":19,"nodeType":"254","messageId":"255","endLine":1,"endColumn":40},{"ruleId":"252","severity":1,"message":"314","line":3,"column":17,"nodeType":"254","messageId":"255","endLine":3,"endColumn":28},{"ruleId":"252","severity":1,"message":"306","line":4,"column":10,"nodeType":"254","messageId":"255","endLine":4,"endColumn":18},{"ruleId":"252","severity":1,"message":"298","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":15},{"ruleId":"252","severity":1,"message":"315","line":125,"column":11,"nodeType":"254","messageId":"255","endLine":125,"endColumn":25},{"ruleId":"264","severity":1,"message":"265","line":172,"column":21,"nodeType":"266","endLine":172,"endColumn":176},{"ruleId":"264","severity":1,"message":"265","line":187,"column":29,"nodeType":"266","endLine":187,"endColumn":83},{"ruleId":"264","severity":1,"message":"265","line":309,"column":17,"nodeType":"266","endLine":309,"endColumn":172},{"ruleId":"252","severity":1,"message":"316","line":2,"column":10,"nodeType":"254","messageId":"255","endLine":2,"endColumn":26},{"ruleId":"285","severity":1,"message":"317","line":16,"column":20,"nodeType":"287","messageId":"318","endLine":16,"endColumn":22},{"ruleId":"285","severity":1,"message":"286","line":80,"column":17,"nodeType":"287","messageId":"288","endLine":80,"endColumn":19},{"ruleId":"285","severity":1,"message":"286","line":84,"column":17,"nodeType":"287","messageId":"288","endLine":84,"endColumn":19},{"ruleId":"252","severity":1,"message":"319","line":127,"column":7,"nodeType":"254","messageId":"255","endLine":127,"endColumn":27},{"ruleId":"252","severity":1,"message":"320","line":31,"column":15,"nodeType":"254","messageId":"255","endLine":31,"endColumn":22},{"ruleId":"252","severity":1,"message":"321","line":39,"column":26,"nodeType":"254","messageId":"255","endLine":39,"endColumn":32},{"ruleId":"252","severity":1,"message":"273","line":3,"column":22,"nodeType":"254","messageId":"255","endLine":3,"endColumn":27},{"ruleId":"291","severity":1,"message":"292","line":8,"column":59,"nodeType":"293","messageId":"263","endLine":8,"endColumn":61},{"ruleId":"252","severity":1,"message":"273","line":6,"column":40,"nodeType":"254","messageId":"255","endLine":6,"endColumn":45},{"ruleId":"291","severity":1,"message":"292","line":14,"column":61,"nodeType":"293","messageId":"263","endLine":14,"endColumn":64},{"ruleId":"252","severity":1,"message":"322","line":28,"column":9,"nodeType":"254","messageId":"255","endLine":28,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":31,"column":9,"nodeType":"266","endLine":31,"endColumn":56},{"ruleId":"264","severity":1,"message":"265","line":43,"column":9,"nodeType":"266","endLine":43,"endColumn":96},{"ruleId":"291","severity":1,"message":"292","line":15,"column":59,"nodeType":"293","messageId":"263","endLine":15,"endColumn":62},{"ruleId":"252","severity":1,"message":"322","line":27,"column":9,"nodeType":"254","messageId":"255","endLine":27,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":30,"column":9,"nodeType":"266","endLine":30,"endColumn":56},{"ruleId":"264","severity":1,"message":"265","line":95,"column":9,"nodeType":"266","endLine":100,"endColumn":10},{"ruleId":"252","severity":1,"message":"305","line":140,"column":17,"nodeType":"254","messageId":"255","endLine":140,"endColumn":18},{"ruleId":"252","severity":1,"message":"305","line":167,"column":13,"nodeType":"254","messageId":"255","endLine":167,"endColumn":14},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"@typescript-eslint/no-unused-vars","'activeKey' is assigned a value but never used.","Identifier","unusedVar","'canLoad' is assigned a value but never used.","'confirmShow' is assigned a value but never used.","'setConfirmShow' is assigned a value but never used.","'setTab' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'env' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'gitservice' is defined but never used.","'Utils' is defined but never used.","'resetFileSystem' is defined but never used.","'client' is defined but never used.","'git' is defined but never used.","'path' is defined but never used.","'fileStatuses' is defined but never used.","'names' is defined but never used.","'result' is assigned a value but never used.","'App' is defined but never used.","'removeSlash' is defined but never used.","'jsonObjectFromFileList' is defined but never used.","'arrayUnique' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'toast' is defined but never used.","'Button' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'fileservice' is defined but never used.","'localipfsstorage' is defined but never used.","'clearAll' is assigned a value but never used.","'files' is assigned a value but never used.","'async' is defined but never used.","'useBehaviorSubject' is defined but never used.","'setConfig' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkconfig'. Either include it or remove the dependency array.","ArrayExpression",["325"],"'r' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'host', 'port', 'protocol', and 'url'. Either include them or remove the dependency array.",["326"],"'GitBranch' is defined but never used.","'GitLog' is defined but never used.","'Suspense' is defined but never used.","'boxconnected' is assigned a value but never used.","'faExclamationTriangle' is defined but never used.","'ChangeEvent' is defined but never used.","'onBranchChange' is assigned a value but never used.","'isForOfStatement' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'sortbydirectorylevel' is assigned a value but never used.","'resolve' is assigned a value but never used.","'reject' is assigned a value but never used.","'getUrlLink' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},"Update the dependencies array to be: [checkconfig]",{"range":"331","text":"332"},"Update the dependencies array to be: [host, port, protocol, url]",{"range":"333","text":"334"},[959,961],"[checkconfig]",[1883,1885],"[host, port, protocol, url]"]