[{"/Users/filipmertens/code/boxtest/src/index.tsx":"1","/Users/filipmertens/code/boxtest/src/reportWebVitals.ts":"2","/Users/filipmertens/code/boxtest/src/App.tsx":"3","/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSService.ts":"4","/Users/filipmertens/code/boxtest/src/components/Remix/Client.ts":"5","/Users/filipmertens/code/boxtest/src/components/Files/FileService.ts":"6","/Users/filipmertens/code/boxtest/src/components/git/gitService.ts":"7","/Users/filipmertens/code/boxtest/src/components/3box/3boxService.ts":"8","/Users/filipmertens/code/boxtest/src/components/Files/utils.ts":"9","/Users/filipmertens/code/boxtest/src/components/Files/FileTools.tsx":"10","/Users/filipmertens/code/boxtest/src/components/Files/FileExplorer.tsx":"11","/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSView.tsx":"12","/Users/filipmertens/code/boxtest/src/components/git/gitControls.tsx":"13","/Users/filipmertens/code/boxtest/src/components/git/Diff.tsx":"14","/Users/filipmertens/code/boxtest/src/components/git/gitLog.tsx":"15","/Users/filipmertens/code/boxtest/src/components/git/gitBranch.tsx":"16","/Users/filipmertens/code/boxtest/src/components/Files/Buttons.tsx":"17","/Users/filipmertens/code/boxtest/src/components/Files/statuses.tsx":"18","/Users/filipmertens/code/boxtest/src/components/3box/Box.tsx":"19","/Users/filipmertens/code/boxtest/src/components/Import/importer.tsx":"20","/Users/filipmertens/code/boxtest/src/components/Import/BoxImporter.tsx":"21","/Users/filipmertens/code/boxtest/src/components/Import/IPFSImporter.tsx":"22","/Users/filipmertens/code/boxtest/src/components/loaderService.ts":"23","/Users/filipmertens/code/boxtest/src/components/Help.tsx":"24","/Users/filipmertens/code/boxtest/src/components/git/RepoName.tsx":"25","/Users/filipmertens/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"26","/Users/filipmertens/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"27"},{"size":500,"mtime":1607789583666,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1607789583667,"results":"30","hashOfConfig":"29"},{"size":4175,"mtime":1608053123320,"results":"31","hashOfConfig":"29"},{"size":4582,"mtime":1607965040801,"results":"32","hashOfConfig":"29"},{"size":2644,"mtime":1608029753320,"results":"33","hashOfConfig":"29"},{"size":9416,"mtime":1607964811853,"results":"34","hashOfConfig":"29"},{"size":8606,"mtime":1608049466426,"results":"35","hashOfConfig":"29"},{"size":1727,"mtime":1608053195145,"results":"36","hashOfConfig":"29"},{"size":2997,"mtime":1607792561500,"results":"37","hashOfConfig":"29"},{"size":1115,"mtime":1608053680413,"results":"38","hashOfConfig":"29"},{"size":2058,"mtime":1607950069155,"results":"39","hashOfConfig":"29"},{"size":1964,"mtime":1608055882521,"results":"40","hashOfConfig":"29"},{"size":1094,"mtime":1607964990075,"results":"41","hashOfConfig":"29"},{"size":919,"mtime":1607792561506,"results":"42","hashOfConfig":"29"},{"size":1716,"mtime":1607792561508,"results":"43","hashOfConfig":"29"},{"size":1829,"mtime":1608057092073,"results":"44","hashOfConfig":"29"},{"size":2984,"mtime":1607890858524,"results":"45","hashOfConfig":"29"},{"size":397,"mtime":1607792561499,"results":"46","hashOfConfig":"29"},{"size":1977,"mtime":1608050738008,"results":"47","hashOfConfig":"29"},{"size":1371,"mtime":1608055798583,"results":"48","hashOfConfig":"29"},{"size":2540,"mtime":1608056417341,"results":"49","hashOfConfig":"29"},{"size":884,"mtime":1608055391170,"results":"50","hashOfConfig":"29"},{"size":204,"mtime":1607853812277,"results":"51","hashOfConfig":"29"},{"size":615,"mtime":1607892075581,"results":"52","hashOfConfig":"29"},{"size":1628,"mtime":1608056978394,"results":"53","hashOfConfig":"29"},{"size":1738,"mtime":1608056312526,"results":"54","hashOfConfig":"29"},{"size":2457,"mtime":1608056653436,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"131wf7i",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/filipmertens/code/boxtest/src/index.tsx",[],["125","126"],"/Users/filipmertens/code/boxtest/src/reportWebVitals.ts",[],"/Users/filipmertens/code/boxtest/src/App.tsx",["127","128","129","130","131","132"],"import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Container, Tabs, Tab } from \"react-bootstrap\";\nimport Box from \"3box\";\nimport Web3Modal from \"web3modal\";\nimport { getAddress } from \"@ethersproject/address\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport { FileExplorer } from \"./components/Files/FileExplorer\";\nimport { BoxController } from \"./components/3box/Box\";\nimport { GitControls } from \"./components/git/gitControls\";\n\nimport { IPFSView } from \"./components/IPFS/IPFSView\";\nimport { WorkSpacePlugin } from \"./components/Remix/Client\";\nimport { gitService } from \"./components/git/gitService\";\n\nimport { LsFileService } from \"./components/Files/FileService\";\nimport { FileTools } from \"./components/Files/FileTools\";\nimport { DiffView } from \"./components/git/Diff\";\nimport { IPFSService } from \"./components/IPFS/IPFSService\";\nimport { BoxService } from \"./components/3box/3boxService\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Importer } from \"./components/Import/importer\";\nimport Loading from \"react-fullscreen-loading\";\nimport { LoaderService } from \"./components/loaderService\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { Help } from \"./components/Help\";\nimport { RepoName } from \"./components/git/RepoName\";\nimport { LocalIPFSStorage } from \"./components/LocalStorage/LocalStorage\";\n\nexport const fsConfig: any = new FS(\"remix-storage-config\");\nexport const fsConfigPromise: any = fsConfig.promises;\n\nexport var fsNoPromise: any = new FS(\"remix-workspace\");\nexport var fs: any = fsNoPromise.promises;\nexport const gitservice: gitService = new gitService();\nexport const client: WorkSpacePlugin = new WorkSpacePlugin();\nexport const fileservice: LsFileService = new LsFileService();\nexport const ipfservice: IPFSService = new IPFSService();\nexport const boxservice: BoxService = new BoxService();\nexport const loaderservice: LoaderService = new LoaderService();\nexport const localipfsstorage: LocalIPFSStorage = new LocalIPFSStorage();\n\nexport const clearFileSystem = async ()=>{\n  fsNoPromise = new FS(\"remix-workspace\",{wipe:true});\n  fs = fsNoPromise.promises;\n  fileservice.showFiles();\n}\n\nexport const providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"83d4d660ce3546299cbe048ed95b6fad\",\n    },\n  },\n};\n\nfunction App() {\n  const [activeKey, setActiveKey] = useState<string>(\"files\");\n  const loading: boolean | undefined = useBehaviorSubject(loaderservice.loading);\n  const repoName = useBehaviorSubject(gitservice.reponameSubject)\n  gitservice.reponameSubject.subscribe((x)=>{}).unsubscribe()\n  loaderservice.loading.subscribe((x) => {}).unsubscribe();\n\n  const setTab = async (key: string) => {\n    setActiveKey(key);\n    if(key==\"diff\"){\n      loaderservice.setLoading(true)\n      await gitservice.diffFiles()\n      loaderservice.setLoading(false)\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        {loading? <Loading loading background=\"#2ecc71\" loaderColor=\"#3498db\" />:<></>}\n        <RepoName/>\n        <h1>Storage: {repoName}</h1>\n        <ToastContainer position=\"bottom-right\" />\n        <Tabs activeKey={activeKey} onSelect={async (k) => await setTab(k || \"files\")}>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"files\" title=\"Files\">\n            <FileExplorer setTab={setTab} />\n            <FileTools />\n          </Tab>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"git\" title=\"Git\">\n            <GitControls />\n          </Tab>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"export\" title=\"Export\">\n            <IPFSView />\n          </Tab>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"import\" title=\"Import\">\n            <Importer />\n          </Tab>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"diff\" title=\"Diff\">\n            <DiffView />\n          </Tab>\n          <Tab className=\"mt-4 ml-1\" eventKey=\"help\" title=\"Help\">\n            <Help />\n          </Tab>\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSService.ts",[],"/Users/filipmertens/code/boxtest/src/components/Remix/Client.ts",["133"],"import { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\nimport { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { gitservice } from \"../../App\";\nimport { fileservice } from \"../../App\";\n\nexport class WorkSpacePlugin extends PluginClient {\n  clientLoaded = new BehaviorSubject(false);\n  callBackEnabled: boolean = true;\n\n  constructor() {\n    super();\n    createClient(this);\n    toast.info(\"Connecting to REMIX\");\n    this.onload().then(async () => {\n      console.log(\"workspace client loaded\", this);\n      toast.success(\"Connected to REMIX\");\n      this.clientLoaded.next(true);\n      await this.setCallBacks();\n    });\n  }\n\n  async setCallBacks() {\n    this.on(\n      \"solidity\",\n      \"compilationFinished\",\n      async (file, source, version, result) => {\n        console.log(\"compilationFinished\");\n        console.log(result.contracts);\n        const r = await this.call(\"solidity\", \"getCompilationResult\");\n        console.log(\"getCompilationResult\");\n        console.log(r.contracts);\n      }\n    );\n\n    this.on(\"fileManager\", \"fileSaved\", async (e) => {\n      // Do something\n      if (this.callBackEnabled) {\n        console.log(e);\n        await fileservice.addFileFromBrowser(e);\n        await fileservice.showFiles();\n      }\n      //await this.addFileFromBrowser(e)\n    });\n\n    this.on(\"fileManager\", \"fileAdded\", async (e) => {\n      // Do something\n      if (this.callBackEnabled) {\n        await fileservice.addFileFromBrowser(e);\n        await fileservice.showFiles();\n        console.log(e);\n      }\n    });\n\n    this.on(\"fileManager\", \"fileRemoved\", async (e) => {\n      // Do something\n      console.log(e);\n      if (this.callBackEnabled) {\n        await fileservice.rmFile(e);\n        //await gitservice.gitrm(e)\n        await fileservice.showFiles();\n      }\n      // await this.rmFile(e)\n    });\n\n    this.on(\"fileManager\", \"currentFileChanged\", async (e) => {\n      // Do something\n      if (this.callBackEnabled) {\n        console.log(e, this);\n      }\n      //await this.rmFile(e)\n    });\n\n    this.on(\"fileManager\", \"fileRenamed\", async (oldfile, newfile) => {\n      // Do something\n      if (this.callBackEnabled) {\n        console.log(oldfile, newfile);\n        await fileservice.rmFile(oldfile);\n        await fileservice.addFileFromBrowser(newfile);\n        await fileservice.showFiles();\n      }\n      //await this.addFileFromBrowser(e)\n    });\n    this.callBackEnabled = true;\n  }\n\n  async disableCallBacks() {\n    this.callBackEnabled = false;\n  }\n  async enableCallBacks() {\n    this.callBackEnabled = true;\n  }\n}\n","/Users/filipmertens/code/boxtest/src/components/Files/FileService.ts",["134","135","136","137","138"],"import { toast } from \"react-toastify\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport {\n  clearFileSystem,\n  fileservice,\n  fsNoPromise,\n  gitservice,\n  loaderservice,\n} from \"../../App\";\nimport { client } from \"../../App\";\nimport path from \"path\";\nimport { fs } from \"../../App\";\nimport { removeSlash, jsonObjectFromFileList } from \"./utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileExplorerNode, fileStatusResult, statusMatrix } from \"./types\";\n\nexport const fileStatuses = [\n  [\"new,untracked\", 0, 2, 0], // new, untracked\n  [\"added,staged\", 0, 2, 2], //\n  [\"added,staged, with unstaged changes\", 0, 2, 3], // added, staged, with unstaged changes\n  [\"unmodified\", 1, 1, 1], // unmodified\n  [\"modified,unstaged\", 1, 2, 1], // modified, unstaged\n  [\"modified,staged\", 1, 2, 2], // modified, staged\n  [\"modified,staged,with unstaged changes\", 1, 2, 3], // modified, staged, with unstaged changes\n  [\"deleted,unstaged\", 1, 0, 1], // deleted, unstaged\n  [\"deleted,staged\", 1, 0, 0],\n  [\"deleted\", 1, 1, 0], // deleted, staged\n  [\"unmodified\", 1, 1, 3],\n  [\"deleted,not in git\", 0, 0, 3],\n];\n\nconst statusmatrix: statusMatrix[] = fileStatuses.map((x: any) => {\n  return {\n    matrix: x.shift().split(\",\"),\n    status: x,\n  };\n});\nconsole.log(\"matrix\", statusmatrix);\n\nexport class LsFileService {\n  filetreecontent = new BehaviorSubject<fileExplorerNode>({ children: [] });\n  fileStatusResult: fileStatusResult[] = [];\n\n  async addFileFromBrowser(file: string) {\n    try {\n      const content = await client.call(\"fileManager\", \"readFile\", file);\n      console.log(content);\n      await this.addFile(file, content);\n      //return content\n    } catch (e) {}\n  }\n\n  // RESET FUNCTIONS\n\n  async clearDb() {\n    const req = indexedDB.deleteDatabase(\"remix-workspace\");\n    let me = this;\n    req.onsuccess = async function () {\n      toast(\"Deleted database successfully\");\n      //await me.gitlog()\n\n      await me.showFiles();\n      await gitservice.init();\n    };\n  }\n\n  async clearFilesInWorkSpace() {\n    await client.disableCallBacks();\n    await this.clearFilesInIde()\n    await this.clearFilesInWorkingDirectory()\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async clearFilesInIde(){\n    const files = await this.getDirectoryFromIde(\"/\");\n    console.log(files);\n    for (let i = 0; i < files.length; i++) {\n      await client.call(\"fileManager\", \"remove\", files[i]);\n    }\n  }\n\n  async clearFilesInWorkingDirectory() {\n    // files in FS\n    const files = await gitservice.getStatusMatrixFiles();\n    for (let i = 0; i < files.length; i++) {\n      await this.rmFile(files[i]);\n    }\n  }\n\n  async startNewRepo() {\n    await clearFileSystem();\n    await this.syncFromBrowser();\n    await gitservice.init();\n    await gitservice.clearRepoName()\n  }\n\n  async clearAll() {\n    await this.clearFilesInWorkSpace();\n    await clearFileSystem();\n    await gitservice.clearRepoName()\n  }\n\n  // SYNC FUNCTIONS\n\n  async syncToBrowser() {\n    //this.showspinner();\n    loaderservice.setLoading(true);\n    await client.disableCallBacks();\n    let filesToSync = [];\n    // first get files in current commit, not the files in the FS because they can be changed or unstaged\n\n    let filescommited = await gitservice.listFiles();\n    const currentcommitoid = await gitservice.getCommitFromRef(\"HEAD\");\n    for (let i = 0; i < filescommited.length; i++) {\n      const ob = {\n        path: filescommited[i],\n        content: await gitservice.getFileContentCommit(\n          filescommited[i],\n          currentcommitoid\n        ),\n      };\n      console.log(\"sync file\", ob);\n      try {\n        await client.call(\"fileManager\", \"setFile\", ob.path, ob.content);\n      } catch (e) {\n        console.log(\"could not load file\", e);\n        loaderservice.setLoading(false);\n      }\n      filesToSync.push(ob);\n    }\n    console.log(\"files to sync\", filesToSync);\n\n    await this.showFiles();\n    await client.enableCallBacks();\n    toast.success(\"Import successfull\");\n    loaderservice.setLoading(false);\n  }\n\n  async syncFromBrowser() {\n    await client.disableCallBacks();\n    /// remove the files in the working area\n\n    /// get files from ID and sync them\n    let files = await this.getDirectoryFromIde(\"/\");\n\n    console.log(files);\n    for (let i = 0; i < files.length; i++) {\n      await this.addFileFromBrowser(files[i]);\n    }\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async addFile(file: string, content: string) {\n    console.log(\"add file \", file);\n    const directories = path.dirname(file);\n    await this.createDirectoriesFromString(directories);\n    console.log(fs);\n    await fs.writeFile(\"/\" + file, content);\n  }\n\n  async rmFile(file: string) {\n    try {\n      console.log(\"rm file \", file);\n      await fs.unlink(\"/\" + file);\n    } catch (e) {}\n    //await this.showFiles();\n  }\n\n  async createDirectoriesFromString(strdirectories: string) {\n    const ignore = [\".\", \"/.\", \"\"];\n    console.log(\"directory\", strdirectories, ignore.indexOf(strdirectories));\n    if (ignore.indexOf(strdirectories) > -1) return false;\n    let directories: string[] = strdirectories.split(\"/\");\n    console.log(\"create directory\", directories);\n    for (let i = 0; i < directories.length; i++) {\n      console.log(directories[i]);\n      let previouspath = \"\";\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      console.log(\"creating \", finalPath);\n      try {\n        await fs.mkdir(finalPath);\n      } catch (e) {\n        // console.log(e)\n      }\n    }\n  }\n\n  async viewFile(args: any) {\n    const filename = args;\n    console.log(\"view file\", filename);\n    //$(args[0].currentTarget).data('file')\n    try {\n      await client.call(\"fileManager\", \"open\", `${removeSlash(filename)}`);\n    } catch (e) {\n      toast.error(\"file does not exist in Remix\");\n    }\n  }\n\n  async getFileStatusMatrix() {\n    this.fileStatusResult = await gitservice.statusMatrix();\n    console.log(\"STATUS MATRIX\", this.fileStatusResult);\n    // let filesinstaging = await gitservice.listFilesInstaging();\n    // console.log(\"FILES IN STAGING\", filesinstaging);\n    // let filesingit = await gitservice.listFiles();\n    // console.log(\"FILES IN GIT\", filesingit);\n\n    this.fileStatusResult.map((m) => {\n      statusmatrix.map((sm) => {\n        if (JSON.stringify(sm.status) === JSON.stringify(m.status)) {\n          console.log(m, sm);\n          m.statusNames = sm.matrix;\n        }\n      });\n    });\n    //console.log(\"file status\", this.fileStatusResult);\n  }\n\n  getFileStatusForFile(filename: string) {\n    //console.log(\"checking file status\", filename);\n    for (let i: number = 0; i < this.fileStatusResult.length; i++) {\n      if (this.fileStatusResult[i].filename === filename)\n        return this.fileStatusResult[i].statusNames;\n    }\n  }\n\n  async showFiles() {\n    //$('#files').show()\n    //$('#diff-container').hide()\n    let files = await gitservice.getStatusMatrixFiles(); //await this.getDirectory(\"/\");\n    console.log(\"get directory result\", files);\n\n    try {\n      await this.getFileStatusMatrix();\n      let jsonfiles = await jsonObjectFromFileList(files);\n      console.log(\"files\", jsonfiles);\n      this.filetreecontent.next(jsonfiles);\n    } catch (e) {\n      console.log(e);\n    }\n    try {\n      await gitservice.gitlog();\n    } catch (e) {}\n    try {\n      await gitservice.getBranches();\n    } catch (e) {}\n    //await gitservice.diffFiles()\n    return true;\n  }\n\n  async getDirectory(dir: string) {\n    console.log(\"get directory\");\n    let result: string[] = [];\n    const files = await fs.readdir(`${dir}`);\n    console.log(files);\n\n    for (let i = 0; i < files.length; i++) {\n      const fi = files[i];\n      if (typeof fi !== \"undefined\") {\n        // console.log('looking into ', fi, dir)\n        if (dir === \"/\") dir = \"\";\n        const type = await fs.stat(`${dir}/${fi}`);\n        if (type.type === \"dir\") {\n          // console.log('is directory, so get ', `${dir}/${fi}`)\n          result = [...result, ...(await this.getDirectory(`${dir}/${fi}`))];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          result.push(`${dir}/${fi}`);\n        }\n      }\n    }\n    console.log(result);\n    return result;\n  }\n\n  async getDirectoryFromIde(dir: string) {\n    console.log(\"get directory\", dir);\n    let result: string[] = [];\n    const files = await client.call(\"fileManager\", \"readdir\", dir);\n    console.log(files);\n\n    let fileArray = Object.keys(files).map(function (i: any) {\n      // do something with person\n      return { filename: i, data: files[i] };\n    });\n\n    console.log(fileArray);\n\n    for (let i = 0; i < fileArray.length; i++) {\n      const fi: any = fileArray[i];\n      if (typeof fi !== \"undefined\") {\n        //console.log('looking into ', fi, dir)\n        //if (dir === \"/\") dir = \"\";\n        //dir = removeSlash(dir)\n        const type = fi.data.isDirectory;\n        //console.log(\"type\",type)\n        if (type === true) {\n          //console.log('is directory, so get ', `${fi.filename}`)\n          result = [\n            ...result,\n            ...(await this.getDirectoryFromIde(`${fi.filename}`)),\n          ];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          result.push(`browser/${fi.filename}`);\n        }\n      }\n    }\n\n    console.log(result);\n    return result;\n  }\n}\n","/Users/filipmertens/code/boxtest/src/components/git/gitService.ts",["139"],"import git, { ReadCommitResult } from \"isomorphic-git\";\nimport { fileservice, fs, fsNoPromise } from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport path from \"path\";\nimport { removeSlash } from \"../Files/utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileStatuses } from \"../Files/FileService\";\n\nexport interface diffObject {\n  originalFileName: string;\n  updatedFileName: string;\n  past: string;\n  current: string;\n}\nexport class gitService {\n  commits = new BehaviorSubject<ReadCommitResult[] | undefined>(undefined);\n  branch = new BehaviorSubject<string>(\"\");\n  branches = new BehaviorSubject<string[] | undefined>(undefined);\n  diffResult = new BehaviorSubject<diffObject[] | undefined>(undefined);\n  reponameSubject = new BehaviorSubject<string>(\"\");\n  reponame = \"\"\n\n  constructor() {\n    this.init();\n  }\n\n  async init() {\n    await git.init({\n      fs: fsNoPromise,\n      dir: \"/\",\n      defaultBranch: \"master\",\n    });\n    toast.info(`Git version ${git.version()}`);\n\n    await fileservice.showFiles();\n  }\n\n  async clearRepoName(){\n    this.reponameSubject.next(\"\")\n  }\n\n  async addToGit(args: string | undefined) {\n    if (args !== undefined) {\n      //console.log('ADD TO GIT', $(args[0].currentTarget).data('file'))\n      const filename = args; // $(args[0].currentTarget).data('file')\n      const basename = path.basename(filename);\n      const directory = path.dirname(filename);\n      console.log(\"will add\", basename, directory);\n\n      await git.add({\n        fs: fsNoPromise,\n        dir: \"/\",\n        filepath: removeSlash(filename),\n      });\n      await fileservice.showFiles();\n      toast.success(`Added file ${filename}`);\n    }\n  }\n\n  async gitrm(args: any) {\n    //console.log('RM GIT', $(args[0].currentTarget).data('file'))\n    const filename = args; // $(args[0].currentTarget).data('file')\n\n    await git.remove({\n      fs: fsNoPromise,\n      dir: \"/\",\n      filepath: removeSlash(filename),\n    });\n    await fileservice.showFiles();\n    toast.success(`Removed file file ${filename}`);\n  }\n\n  async checkoutfile(args: any) {\n    const filename = \"\"; //$(args[0].currentTarget).data('file')\n    console.log(\"checkout\", filename);\n\n    try {\n      await git.checkout({\n        fs: fsNoPromise,\n        dir: \"/\",\n        filepaths: [`/${filename}`],\n      });\n    } catch (e) {\n      console.log(e);\n      //this.addAlert(\"checkoutMessage\", e)\n    }\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n  }\n\n  async checkout(args: string) {\n    const oid = args; //$(args[0].currentTarget).data('oid')\n    console.log(\"checkout\", oid);\n\n    try {\n      await git.checkout({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: oid,\n      });\n\n      this.gitlog();\n    } catch (e) {\n      console.log(e);\n      toast.error(\" \" + e);\n    }\n\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n  }\n\n  async getCommits() {\n    console.log(\"get commits\");\n    try {\n      const commits: ReadCommitResult[] = await git.log({\n        fs: fsNoPromise,\n        dir: \"/\",\n        depth: 200,\n      });\n      return commits;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async gitlog() {\n    console.log(\"log\");\n    try {\n      const commits: ReadCommitResult[] = await this.getCommits();\n      this.commits.next(commits);\n      console.log(commits);\n    } catch (e) {\n      this.commits.next([]);\n      console.log(e);\n    }\n\n    await this.showCurrentBranch();\n  }\n\n  async createBranch(name: string = \"\") {\n    const branch = name; //|| $(\"#newbranchname\").val();\n    if (branch)\n      await git.branch({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: branch,\n      });\n\n    fileservice.showFiles();\n  }\n\n  async showCurrentBranch() {\n    try {\n      const branch = await this.currentBranch();\n      const currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      this.branch.next(branch);\n      if (typeof branch === \"undefined\" || branch === \"\") {\n        toast.warn(`You are in a detached state`);\n        this.branch.next(`HEAD detached at ${currentcommitoid}`);\n      } else {\n        this.branch.next(`Branch is: ${branch} at commit ${currentcommitoid}`);\n      }\n    } catch (e) {}\n  }\n\n  async getLastCommmit() {\n    try {\n      let currentcommitoid = \"\";\n      currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      return currentcommitoid;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async currentBranch() {\n    try {\n      const branch: string =\n        (await git.currentBranch({\n          fs: fsNoPromise,\n          dir: \"/\",\n          fullname: false,\n        })) || \"\";\n      console.log(\"BRANCH\", branch);\n      return branch;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async commit(message: string = \"\") {\n    const sha = await git.commit({\n      fs: fsNoPromise,\n      dir: \"/\",\n      author: {\n        name: \"Remix Workspace\",\n        email: \"\",\n      },\n      message: message, //$('#message').val()\n    });\n    toast.success(`Commited: ${sha}`);\n    await fileservice.showFiles();\n  }\n\n  async getBranches() {\n    let branches: string[] = await git.listBranches({\n      fs: fsNoPromise,\n      dir: \"/\",\n    });\n    this.branches.next(branches);\n  }\n\n  async getCommitFromRef(ref: string) {\n    const commitOid = await git.resolveRef({\n      fs: fsNoPromise,\n      dir: \"/\",\n      ref: ref,\n    });\n    return commitOid;\n  }\n\n  async getFileContentCommit(fullfilename: string, commitOid: string) {\n    let content = \"\";\n    try {\n      const { blob } = await git.readBlob({\n        fs: fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n      content = Buffer.from(blob).toString(\"utf8\");\n    } catch (e) {\n      console.log(e);\n    }\n    return content;\n  }\n\n  async statusMatrix(dir: string = \"/\", ref: string = \"HEAD\") {\n    const matrix = await git\n      .statusMatrix({\n        fs: fsNoPromise,\n        dir: \"/\",\n      })\n      .catch((e) => {});\n\n    let result = (matrix || []).map((x) => {\n      return {\n        filename: `/${x.shift()}`,\n        status: x,\n      };\n    });\n    return result;\n  }\n\n  async getStatusMatrixFiles() {\n    let files = await (await this.statusMatrix()).map((f) => {\n      return f.filename;\n    });\n    return files;\n  }\n\n  async listFiles(dir: string = \"/\", ref: string = \"HEAD\") {\n    let filescommited = await git.listFiles({\n      fs: fsNoPromise,\n      dir: dir,\n      ref: ref,\n    });\n    return filescommited;\n  }\n\n  async listFilesInstaging(dir: string = \"/\") {\n    let filesInStaging = await git.listFiles({\n      fs: fsNoPromise,\n      dir: dir,\n    });\n    return filesInStaging;\n  }\n\n  async addAll() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n\n    for (let i: number = 0; i < statuses.length; i++) {\n      await this.addToGit(statuses[i].filename);\n    }\n  }\n\n  async diffFiles() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n    const diffs: diffObject[] = [];\n    for (let i: number = 0; i < statuses.length; i++) {\n      if ((statuses[i].statusNames?.indexOf(\"modified\") || false) > -1) {\n        console.log(statuses[i].statusNames?.indexOf(\"modified\"));\n        const diff: diffObject = await this.diffFile(statuses[i].filename);\n        diffs.push(diff);\n      }\n    }\n    this.diffResult.next(diffs);\n  }\n\n  async diffFile(args: any) {\n    //$('#files').hide()\n    //$('#diff-container').show()\n    console.log(\"DIFF\", args);\n    const fullfilename = args; // $(args[0].currentTarget).data('file')\n    try {\n      const commitOid = await git.resolveRef({\n        fs: fsNoPromise,\n        dir: \"/\",\n        ref: \"HEAD\",\n      });\n\n      const { blob } = await git.readBlob({\n        fs: fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n\n      const newcontent = await fs.readFile(fullfilename, {\n        encoding: \"utf8\",\n      });\n      const original = Buffer.from(blob).toString(\"utf8\");\n\n      console.log(original);\n      console.log(newcontent);\n      //const filediff = createPatch(filename, original, newcontent); // diffLines(original,newcontent)\n      //console.log(filediff)\n      const filediff: diffObject = {\n        originalFileName: fullfilename,\n        updatedFileName: fullfilename,\n        current: newcontent,\n        past: original,\n      };\n\n      return filediff;\n    } catch (e) {\n      toast(\"Nothing to diff! \" + fullfilename);\n\n      const filediff: diffObject = {\n        originalFileName: \"\",\n        updatedFileName: \"\",\n        current: \"\",\n        past: \"\",\n      };\n      return filediff;\n    }\n  }\n}\n","/Users/filipmertens/code/boxtest/src/components/3box/3boxService.ts",["140"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { gitservice, ipfservice, loaderservice, localipfsstorage } from \"../../App\";\n\nexport interface boxObject {\n  key?: string;\n  cid?: string;\n  datestored?: string | number | Date;\n  datecommit?: number | string | Date;\n  ref?: string;\n  message?: string;\n  links?: string;\n}\nexport class BoxService {\n  status = new BehaviorSubject<boolean>(false);\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  box: any;\n  space: any;\n\n  showspinner() {}\n\n  hidespinner() {}\n  // 3BOX connection\n\n  async setSpace(space: any) {\n    this.space = space;\n  }\n\n  async storeHashIn3Box(space: any) {\n    if (typeof this.space == \"undefined\") {\n      toast.error(\"You should connect to 3Box first\");\n      return false;\n    }\n    loaderservice.setLoading(true)\n    await ipfservice.addToIpfs();\n    console.log(\"export 3box\", ipfservice.cid, this.space);\n\n    const ob = await localipfsstorage.createBoxObject()\n\n    await this.space.private.set(ob.key, ob);\n    toast.success(\"Stored in 3box\");\n    await this.getObjectsFrom3Box(space);\n    loaderservice.setLoading(false)\n  }\n\n  async getObjectsFrom3Box(space: any) {\n    console.log(\"get objects from box\");\n    const hashes: boxObject[] = await space.private.all();\n    this.boxObjects.next(Object.values(hashes));\n    console.log(hashes);\n    return Object.values(hashes);\n  }\n\n  async deleteFrom3Box(args: string | undefined) {\n    if (args !== undefined) {\n      const key = args;\n      console.log(\"key\", key);\n      loaderservice.setLoading(true)\n      await this.space.private.remove(key);\n      await this.getObjectsFrom3Box(this.space);\n      loaderservice.setLoading(false)\n    }\n  }\n}\n","/Users/filipmertens/code/boxtest/src/components/Files/utils.ts",["141","142","143"],"import path from \"path\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n  files.map((f, i) => {\n    const dirname = path.dirname(files[i]);\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      //console.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    }\n  });\n  console.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  const nest = (items: any, id = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  console.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  // console.log('OB', ob)\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  //console.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n","/Users/filipmertens/code/boxtest/src/components/Files/FileTools.tsx",["144"],"import React from 'react'\nimport { fileservice, localipfsstorage } from '../../App'\n\ninterface FileToolsProps {\n\n}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n        return (\n        <>\n        <hr/>\n        <button className=\"btn btn-danger w-10 d-none\" onClick={async()=>fileservice.getDirectory(\"/\")}>get dir</button>\n        <button className=\"btn btn-danger w-10 d-none\" onClick={async()=>fileservice.syncFromBrowser()}>Sync from IDE</button>\n        <button className=\"btn btn-primary w-10 ml-2\" onClick={async()=>fileservice.startNewRepo()}>Start new repo</button> |\n        <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.clearAll()}>Clear all files & git</button>\n        <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.clearFilesInWorkSpace()}>Clear files in browser</button>\n\n        <button className=\"btn btn-danger w-10 d-none\" onClick={async()=>fileservice.showFiles()}>show files</button>\n\n        <button className=\"btn btn-danger w-10\" onClick={async()=>localipfsstorage.init()}>show config</button>\n        </>\n        );\n}","/Users/filipmertens/code/boxtest/src/components/Files/FileExplorer.tsx",[],"/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSView.tsx",["145","146"],"/Users/filipmertens/code/boxtest/src/components/git/gitControls.tsx",["147"],"import React, { useState } from \"react\";\nimport { gitservice } from \"../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {}\n\nexport const GitControls: React.FC<gitViewProps> = ({}) => {\n\n  const [message,setMessage] = useState({value:''})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  return (\n    <>\n      <hr />\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async () =>await gitservice.init()}>git init</button> */}\n\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.addAll()} >git add all</button> */}\n      <hr />\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input className=\"form-control w-25\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <br /><hr />\n      <GitLog/>\n      <br /><hr />\n      <GitBranch/>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/Diff.tsx",["148","149","150","151"],"import React, { useEffect, useState } from \"react\";\nimport { ReactGhLikeDiff } from \"react-gh-like-diff\";\nimport \"./diff.css\"\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../App\";\n\ninterface DiffProps {}\n\nexport const DiffView: React.FC<DiffProps> = ({}) => {\n  const [mock, setMock] = useState(\"\");\n  const diffs = useBehaviorSubject(gitservice.diffResult);\n\n  gitservice.diffResult.subscribe((x) => console.log(\"diff\", x)).unsubscribe();\n\n  return (\n    <div className='container-fluid'>\n      {diffs?.map((diff) => {\n        return (\n           \n          <ReactGhLikeDiff key={diff.originalFileName}\n            options={{\n              originalFileName: diff?.originalFileName,\n              updatedFileName: diff?.updatedFileName,\n            }}\n            past={diff?.past}\n            current={diff?.current}\n          />\n         \n        );\n      })}\n </div>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/gitLog.tsx",["152"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../App\";\n\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n\n  gitservice.commits\n    .subscribe((x) => {\n      console.log(commits);\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = new Date(commit.commit.committer.timestamp * 1000);\n    return `${date.getDay()}-${date.getMonth()}-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary\"\n        onClick={async () => gitservice.gitlog()}\n      >\n        git log\n      </button>\n\n      <hr />\n      <h4>Commits</h4>\n\n      <div className=\"container-fluid\">\n        {commits?.map((commit) => {\n          return (\n            <div key={commit.oid} className=\"row p-1 small\">\n              <div className=\"col-2\">{commit.commit.message}</div>\n              <div className=\"col\">{getDate(commit)}</div>\n              <div className=\"col\">{commit.oid}</div>\n              <div\n                onClick={async () => gitservice.checkout(commit.oid)}\n                className=\"btn btn-primary btn-sm checkout-btn\"\n              >\n                git checkout\n              </div>\n            </div>\n          );\n        })}\n        <div\n          onClick={async () => gitservice.checkout(\"master\")}\n          className=\"btn btn-primary btn-sm checkout-btn\"\n          data-oid=\"master\"\n        >\n          git checkout master\n        </div>\n      </div>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/gitBranch.tsx",["153"],"/Users/filipmertens/code/boxtest/src/components/Files/Buttons.tsx",["154","155"],"import React from \"react\";\nimport { client, fileservice, gitservice } from \"../../App\";\nimport \"./FileExplorer.css\";\nimport { fileExplorerNode } from \"./types\";\ninterface FileButtonsProps {\n  file: fileExplorerNode;\n  setTab: (key: string) => void;\n}\n\nexport const FileButtons: React.FC<FileButtonsProps> = ({\n  file,\n  setTab,\n}: FileButtonsProps) => {\n  const diffFile = (file: fileExplorerNode) => {\n    gitservice.diffFiles();\n    ///setTab(\"diff\")\n  };\n\n  const gitaddButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"deleted\") === -1 &&\n      status?.indexOf(\"unmodified\") === -1\n    ) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.addToGit(file.fullname)}\n        >\n          git add\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>git add</div>;\n    }\n  };\n\n  const giteditButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await fileservice.viewFile(file.fullname)}\n        >\n          edit\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>edit</div>;\n    }\n  };\n\n  const gitrmbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n    } else {\n      if (status?.indexOf(\"staged\") === -1) {\n        return (\n          <div\n            className={\"badge badge-primary addgit\"}\n            onClick={async () => await gitservice.gitrm(file.fullname)}\n          >\n            git rm\n          </div>\n        );\n      }else{\n        return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n      }\n    }\n  };\n\n  const checkoutbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"modified\") === -1 &&\n      (status?.indexOf(\"deleted\") === -1 ||\n        status?.indexOf(\"staged\") ||\n        status?.indexOf(\"unstaged\"))\n    ) {\n      return <div className={\"badge badge-secondary addgit\"}>git checkout</div>;\n    } else {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.checkoutfile(file.fullname)}\n        >\n          git checkout\n        </div>\n      );\n    }\n  };\n\n  if (file.type === \"file\") {\n    return (\n      <span className=\"status float-right ml-3\">\n        {giteditButton(file)}\n        {gitrmbutton(file)}\n        {gitaddButton(file)}\n        {checkoutbutton(file)}\n      </span>\n    );\n  } else {\n    return <></>;\n  }\n};\n","/Users/filipmertens/code/boxtest/src/components/Files/statuses.tsx",[],"/Users/filipmertens/code/boxtest/src/components/3box/Box.tsx",["156"],"import React, { useState } from \"react\";\nimport Box from \"3box\";\nimport Web3Modal from \"web3modal\";\nimport { getAddress } from \"@ethersproject/address\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { boxservice, loaderservice, providerOptions } from \"../../App\";\nimport { toast } from \"react-toastify\";\n\ninterface BoxProps {\n  buttonTitle:string,\n  storeData:boolean\n}\n\nexport const BoxController: React.FC<BoxProps> = (p) => {\n  const [status, setStatus] = useState(false);\n  let address = \"\";\n  let mybox;\n  let space;\n\n  \n  const modal = new Web3Modal({\n    providerOptions: providerOptions, // required\n  });\n\n  modal.on(\"connect\", async (provider) => {\n    \n    if (!status) {\n      const [eth] = await provider.enable();\n      address = getAddress(eth);\n      loaderservice.setLoading(true);\n      toast.info(\"Please wait... this can take a while\");\n      console.log(address);\n      mybox = await Box.openBox(address, window.ethereum);\n      toast.success(\"3box connected... waiting for space to open\");\n      console.log(mybox);\n      space = await mybox.openSpace(\"remix-workspace\");\n      //toast.success(\"space opened... getting data\")\n      console.log(space);\n\n      await boxservice.setSpace(space);\n      await boxservice.getObjectsFrom3Box(space);\n      boxservice.status.next(true);\n\n      setStatus(true);\n    }\n    if(p.storeData)\n    await boxservice.storeHashIn3Box(boxservice.space);\n    loaderservice.setLoading(false);\n    // .then((x) => toast.success(\"connected to 3box\"))\n    // .catch((x) => toast.error(\"can't connect to 3box\"));\n  });\n\n  const startConnect = async () => {\n    modal.connect();\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary 3boxbtn\"\n        id=\"boxconnect\"\n        onClick={async () => await startConnect()}\n      >\n        {p.buttonTitle}\n      </button>\n      <div id=\"3boxconnection\">\n        {status ? <>connected</> : <>disconnected</>}\n      </div>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/Import/importer.tsx",["157"],"/Users/filipmertens/code/boxtest/src/components/Import/BoxImporter.tsx",["158","159","160"],"/Users/filipmertens/code/boxtest/src/components/Import/IPFSImporter.tsx",["161"],"import React, { useState } from \"react\";\nimport { ipfservice } from \"../../App\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n  return (\n    <>\n      <div className=\"alert alert-warning\" role=\"alert\">\n        Importing files will clear the filelist.\n      </div>\n      <div className=\"form-group\">\n        <label>IPFS CID</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button onClick={async()=>ipfservice.importFromCID(cid.value)} className=\"btn w-25 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      <hr />\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/loaderService.ts",[],"/Users/filipmertens/code/boxtest/src/components/Help.tsx",["162"],"import React, { useEffect, useState } from 'react'\nimport marked from \"marked\";\ninterface HelpProps {\n\n}\n\nexport const Help: React.FC<HelpProps> = ({}) => {\n    const [markdown,setMarkdown] = useState(\"\")\n    useEffect(()=>{\n        fetch(\"https://raw.githubusercontent.com/bunsenstraat/remix-storage-plugin/master/README.md\").then(response => {\n            return response.text()\n          })\n          .then(text => {\n            setMarkdown(text)\n          })\n    },[])\n    return (\n        <section>\n          <article dangerouslySetInnerHTML={{__html: marked(markdown)}}></article>\n        </section>\n      )\n}","/Users/filipmertens/code/boxtest/src/components/git/RepoName.tsx",["163","164"],"/Users/filipmertens/code/boxtest/src/components/LocalStorage/LocalStorage.ts",["165"],"/Users/filipmertens/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["166","167"],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":12},{"ruleId":"172","severity":1,"message":"176","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":11},{"ruleId":"172","severity":1,"message":"177","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":17},{"ruleId":"172","severity":1,"message":"178","line":7,"column":10,"nodeType":"174","messageId":"175","endLine":7,"endColumn":20},{"ruleId":"172","severity":1,"message":"179","line":11,"column":10,"nodeType":"174","messageId":"175","endLine":11,"endColumn":23},{"ruleId":"180","severity":1,"message":"181","line":70,"column":11,"nodeType":"182","messageId":"183","endLine":70,"endColumn":13},{"ruleId":"172","severity":1,"message":"184","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":20},{"ruleId":"172","severity":1,"message":"185","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":10},{"ruleId":"172","severity":1,"message":"186","line":5,"column":3,"nodeType":"174","messageId":"175","endLine":5,"endColumn":14},{"ruleId":"172","severity":1,"message":"187","line":6,"column":3,"nodeType":"174","messageId":"175","endLine":6,"endColumn":14},{"ruleId":"188","severity":1,"message":"189","line":210,"column":35,"nodeType":"190","messageId":"191","endLine":210,"endColumn":37},{"ruleId":"188","severity":1,"message":"189","line":211,"column":29,"nodeType":"190","messageId":"191","endLine":211,"endColumn":31},{"ruleId":"172","severity":1,"message":"192","line":7,"column":10,"nodeType":"174","messageId":"175","endLine":7,"endColumn":22},{"ruleId":"172","severity":1,"message":"184","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":20},{"ruleId":"188","severity":1,"message":"193","line":11,"column":20,"nodeType":"190","messageId":"194","endLine":11,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":71,"column":17,"nodeType":"190","messageId":"191","endLine":71,"endColumn":19},{"ruleId":"188","severity":1,"message":"189","line":75,"column":17,"nodeType":"190","messageId":"191","endLine":75,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":8,"column":53,"nodeType":"197","messageId":"183","endLine":8,"endColumn":55},{"ruleId":"172","severity":1,"message":"198","line":10,"column":9,"nodeType":"174","messageId":"175","endLine":10,"endColumn":21},{"ruleId":"199","severity":1,"message":"200","line":18,"column":12,"nodeType":"201","endLine":18,"endColumn":27},{"ruleId":"195","severity":1,"message":"196","line":8,"column":53,"nodeType":"197","messageId":"183","endLine":8,"endColumn":55},{"ruleId":"172","severity":1,"message":"202","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":9,"column":47,"nodeType":"197","messageId":"183","endLine":9,"endColumn":49},{"ruleId":"172","severity":1,"message":"203","line":10,"column":10,"nodeType":"174","messageId":"175","endLine":10,"endColumn":14},{"ruleId":"172","severity":1,"message":"204","line":10,"column":16,"nodeType":"174","messageId":"175","endLine":10,"endColumn":23},{"ruleId":"195","severity":1,"message":"196","line":8,"column":47,"nodeType":"197","messageId":"183","endLine":8,"endColumn":49},{"ruleId":"195","severity":1,"message":"196","line":8,"column":53,"nodeType":"197","messageId":"183","endLine":8,"endColumn":55},{"ruleId":"172","severity":1,"message":"205","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":16},{"ruleId":"172","severity":1,"message":"206","line":14,"column":9,"nodeType":"174","messageId":"175","endLine":14,"endColumn":17},{"ruleId":"172","severity":1,"message":"207","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":10,"column":51,"nodeType":"197","messageId":"183","endLine":10,"endColumn":53},{"ruleId":"172","severity":1,"message":"208","line":7,"column":10,"nodeType":"174","messageId":"175","endLine":7,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":12,"column":57,"nodeType":"197","messageId":"183","endLine":12,"endColumn":59},{"ruleId":"199","severity":1,"message":"200","line":24,"column":12,"nodeType":"201","endLine":24,"endColumn":27},{"ruleId":"195","severity":1,"message":"196","line":6,"column":59,"nodeType":"197","messageId":"183","endLine":6,"endColumn":61},{"ruleId":"195","severity":1,"message":"196","line":7,"column":43,"nodeType":"197","messageId":"183","endLine":7,"endColumn":45},{"ruleId":"172","severity":1,"message":"209","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":9,"column":51,"nodeType":"197","messageId":"183","endLine":9,"endColumn":53},{"ruleId":"172","severity":1,"message":"210","line":1,"column":10,"nodeType":"174","messageId":"175","endLine":1,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":12,"column":61,"nodeType":"197","messageId":"183","endLine":12,"endColumn":63},{"ruleId":"199","severity":1,"message":"200","line":29,"column":14,"nodeType":"201","endLine":29,"endColumn":29},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Web3Modal' is defined but never used.","'getAddress' is defined but never used.","'BoxController' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'gitservice' is defined but never used.","'FS' is defined but never used.","'fileservice' is defined but never used.","'fsNoPromise' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fileStatuses' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'boxconnected' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useEffect' is defined but never used.","'mock' is assigned a value but never used.","'setMock' is assigned a value but never used.","'client' is defined but never used.","'diffFile' is assigned a value but never used.","'WalletConnectProvider' is defined but never used.","'boxObject' is defined but never used.","'gitService' is defined but never used.","'unstable_batchedUpdates' is defined but never used.","no-global-assign","no-unsafe-negation"]