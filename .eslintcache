[{"/Volumes/butbut/code/boxtest/src/index.tsx":"1","/Volumes/butbut/code/boxtest/src/reportWebVitals.ts":"2","/Volumes/butbut/code/boxtest/src/App.tsx":"3","/Volumes/butbut/code/boxtest/src/components/loaderService.ts":"4","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts":"5","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts":"6","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts":"7","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts":"8","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts":"9","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"10","/Volumes/butbut/code/boxtest/src/components/Help.tsx":"11","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx":"12","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx":"13","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx":"14","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx":"15","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts":"16","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx":"17","/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx":"18","/Volumes/butbut/code/boxtest/src/components/3box/Box.tsx":"19","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"20","/Volumes/butbut/code/boxtest/src/components/Import/BoxImporter.tsx":"21","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx":"22","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx":"23","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx":"24","/Volumes/butbut/code/boxtest/src/components/git/UI/RepoName.tsx":"25","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx":"26","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx":"27","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx":"28","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx":"29"},{"size":521,"mtime":1608219890000,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1607789583000,"results":"32","hashOfConfig":"31"},{"size":6505,"mtime":1608223759000,"results":"33","hashOfConfig":"31"},{"size":204,"mtime":1607853812000,"results":"34","hashOfConfig":"31"},{"size":9739,"mtime":1608222888000,"results":"35","hashOfConfig":"31"},{"size":4866,"mtime":1608224304000,"results":"36","hashOfConfig":"31"},{"size":8711,"mtime":1608201204000,"results":"37","hashOfConfig":"31"},{"size":2913,"mtime":1608116468000,"results":"38","hashOfConfig":"31"},{"size":1825,"mtime":1608221981000,"results":"39","hashOfConfig":"31"},{"size":2209,"mtime":1608221996000,"results":"40","hashOfConfig":"31"},{"size":615,"mtime":1607892075000,"results":"41","hashOfConfig":"31"},{"size":2058,"mtime":1607950069000,"results":"42","hashOfConfig":"31"},{"size":1249,"mtime":1608222416000,"results":"43","hashOfConfig":"31"},{"size":1939,"mtime":1608221355000,"results":"44","hashOfConfig":"31"},{"size":1371,"mtime":1608055798000,"results":"45","hashOfConfig":"31"},{"size":2997,"mtime":1607792561000,"results":"46","hashOfConfig":"31"},{"size":397,"mtime":1607792561000,"results":"47","hashOfConfig":"31"},{"size":2984,"mtime":1607890858000,"results":"48","hashOfConfig":"31"},{"size":2455,"mtime":1608221095000,"results":"49","hashOfConfig":"31"},{"size":2845,"mtime":1608222358000,"results":"50","hashOfConfig":"31"},{"size":3242,"mtime":1608222302000,"results":"51","hashOfConfig":"31"},{"size":895,"mtime":1608222351000,"results":"52","hashOfConfig":"31"},{"size":1067,"mtime":1608204074000,"results":"53","hashOfConfig":"31"},{"size":922,"mtime":1608135583000,"results":"54","hashOfConfig":"31"},{"size":1632,"mtime":1608135572000,"results":"55","hashOfConfig":"31"},{"size":1138,"mtime":1608135574000,"results":"56","hashOfConfig":"31"},{"size":1832,"mtime":1608135577000,"results":"57","hashOfConfig":"31"},{"size":1689,"mtime":1608135591000,"results":"58","hashOfConfig":"31"},{"size":2059,"mtime":1608224475000,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"19py97w",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"62"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"62"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"62"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Volumes/butbut/code/boxtest/src/index.tsx",[],["139","140"],"/Volumes/butbut/code/boxtest/src/reportWebVitals.ts",[],"/Volumes/butbut/code/boxtest/src/App.tsx",["141","142","143","144","145"],"/Volumes/butbut/code/boxtest/src/components/loaderService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts",["146","147","148","149","150","151"],"import { toast } from \"react-toastify\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport {\n  resetFileSystem,\n  fileservice,\n  fsNoPromise,\n  gitservice,\n  loaderservice,\n} from \"../../App\";\nimport { client } from \"../../App\";\nimport path from \"path\";\nimport { fs } from \"../../App\";\nimport { removeSlash, jsonObjectFromFileList } from \"./utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileExplorerNode, fileStatusResult, statusMatrix } from \"./types\";\n\nexport const fileStatuses = [\n  [\"new,untracked\", 0, 2, 0], // new, untracked\n  [\"added,staged\", 0, 2, 2], //\n  [\"added,staged, with unstaged changes\", 0, 2, 3], // added, staged, with unstaged changes\n  [\"unmodified\", 1, 1, 1], // unmodified\n  [\"modified,unstaged\", 1, 2, 1], // modified, unstaged\n  [\"modified,staged\", 1, 2, 2], // modified, staged\n  [\"modified,staged,with unstaged changes\", 1, 2, 3], // modified, staged, with unstaged changes\n  [\"deleted,unstaged\", 1, 0, 1], // deleted, unstaged\n  [\"deleted,staged\", 1, 0, 0],\n  [\"deleted\", 1, 1, 0], // deleted, staged\n  [\"unmodified\", 1, 1, 3],\n  [\"deleted,not in git\", 0, 0, 3],\n];\n\nconst statusmatrix: statusMatrix[] = fileStatuses.map((x: any) => {\n  return {\n    matrix: x.shift().split(\",\"),\n    status: x,\n  };\n});\nconsole.log(\"matrix\", statusmatrix);\n\nexport class LsFileService {\n  filetreecontent = new BehaviorSubject<fileExplorerNode>({ children: [] });\n  fileStatusResult: fileStatusResult[] = [];\n\n  constructor(){\n\n  }\n\n  async addFileFromBrowser(file: string) {\n    try {\n      const content = await client.call(\"fileManager\", \"readFile\", file);\n      console.log(content);\n      await this.addFile(file, content);\n      //return content\n    } catch (e) {}\n  }\n\n  // RESET FUNCTIONS\n\n  async clearDb() {\n    const req = indexedDB.deleteDatabase(\"remix-workspace\");\n    let me = this;\n    req.onsuccess = async function () {\n      toast(\"Deleted database successfully\");\n      //await me.gitlog()\n\n      await me.showFiles();\n      await gitservice.init();\n    };\n  }\n\n  async clearFilesInWorkSpace() {\n    await client.disableCallBacks();\n    await this.clearFilesInIde()\n    await this.clearFilesInWorkingDirectory()\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async clearFilesInIde(){\n    const files = await this.getDirectoryFromIde(\"/\");\n    console.log(files);\n    for (let i = 0; i < files.length; i++) {\n      await client.call(\"fileManager\", \"remove\", files[i]);\n    }\n  }\n\n  async clearFilesInWorkingDirectory() {\n    // files in FS\n    const files = await gitservice.getStatusMatrixFiles();\n    for (let i = 0; i < files.length; i++) {\n      await this.rmFile(files[i]);\n    }\n  }\n\n  async startNewRepo() {\n    await resetFileSystem(true);\n    await this.syncFromBrowser();\n    await gitservice.init();\n    await gitservice.clearRepoName()\n  }\n\n  async syncStart(){\n    //await resetFileSystem();\n    await this.clearFilesInWorkingDirectory();\n    await this.syncFromBrowser()\n    await gitservice.init();\n  }\n\n  async clearLocalAndSyncFromBrowser(){\n    await this.clearFilesInWorkingDirectory();\n    await this.syncFromBrowser()\n  }\n\n\n  async clearAll() {\n    await this.clearFilesInWorkSpace();\n    await resetFileSystem(true);\n    await gitservice.clearRepoName()\n  }\n\n  // SYNC FUNCTIONS\n\n  async syncToBrowser() {\n    //this.showspinner();\n    loaderservice.setLoading(true);\n    await client.disableCallBacks();\n    let filesToSync = [];\n    // first get files in current commit, not the files in the FS because they can be changed or unstaged\n\n    let filescommited = await gitservice.listFiles();\n    const currentcommitoid = await gitservice.getCommitFromRef(\"HEAD\");\n    for (let i = 0; i < filescommited.length; i++) {\n      const ob = {\n        path: filescommited[i],\n        content: await gitservice.getFileContentCommit(\n          filescommited[i],\n          currentcommitoid\n        ),\n      };\n      console.log(\"sync file\", ob);\n      try {\n        await client.call(\"fileManager\", \"setFile\", ob.path, ob.content);\n      } catch (e) {\n        console.log(\"could not load file\", e);\n        loaderservice.setLoading(false);\n      }\n      filesToSync.push(ob);\n    }\n    console.log(\"files to sync\", filesToSync);\n\n    await this.showFiles();\n    await client.enableCallBacks();\n    toast.success(\"Import successfull\");\n    loaderservice.setLoading(false);\n  }\n\n  async syncFromBrowser() {\n    await client.disableCallBacks();\n    /// remove the files in the working area\n\n    /// get files from ID and sync them\n    let files = await this.getDirectoryFromIde(\"/\");\n\n    console.log(files);\n    for (let i = 0; i < files.length; i++) {\n      await this.addFileFromBrowser(files[i]);\n    }\n    await this.showFiles();\n    await client.enableCallBacks();\n  }\n\n  async addFile(file: string, content: string) {\n    console.log(\"add file \", file);\n    const directories = path.dirname(file);\n    await this.createDirectoriesFromString(directories);\n    console.log(fs);\n    await fs.writeFile(\"/\" + file, content);\n  }\n\n  async rmFile(file: string) {\n    try {\n      console.log(\"rm file \", file);\n      await fs.unlink(\"/\" + file);\n    } catch (e) {}\n    //await this.showFiles();\n  }\n\n  async createDirectoriesFromString(strdirectories: string) {\n    const ignore = [\".\", \"/.\", \"\"];\n    console.log(\"directory\", strdirectories, ignore.indexOf(strdirectories));\n    if (ignore.indexOf(strdirectories) > -1) return false;\n    let directories: string[] = strdirectories.split(\"/\");\n    console.log(\"create directory\", directories);\n    for (let i = 0; i < directories.length; i++) {\n      console.log(directories[i]);\n      let previouspath = \"\";\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      console.log(\"creating \", finalPath);\n      try {\n        await fs.mkdir(finalPath);\n      } catch (e) {\n        // console.log(e)\n      }\n    }\n  }\n\n  async viewFile(args: any) {\n    const filename = args;\n    console.log(\"view file\", filename);\n    //$(args[0].currentTarget).data('file')\n    try {\n      await client.call(\"fileManager\", \"open\", `${removeSlash(filename)}`);\n    } catch (e) {\n      toast.error(\"file does not exist in Remix\");\n    }\n  }\n\n  async getFileStatusMatrix() {\n    this.fileStatusResult = await gitservice.statusMatrix();\n    console.log(\"STATUS MATRIX\", this.fileStatusResult);\n    // let filesinstaging = await gitservice.listFilesInstaging();\n    // console.log(\"FILES IN STAGING\", filesinstaging);\n    // let filesingit = await gitservice.listFiles();\n    // console.log(\"FILES IN GIT\", filesingit);\n\n    this.fileStatusResult.map((m) => {\n      statusmatrix.map((sm) => {\n        if (JSON.stringify(sm.status) === JSON.stringify(m.status)) {\n          console.log(m, sm);\n          m.statusNames = sm.matrix;\n        }\n      });\n    });\n    //console.log(\"file status\", this.fileStatusResult);\n  }\n\n  getFileStatusForFile(filename: string) {\n    //console.log(\"checking file status\", filename);\n    for (let i: number = 0; i < this.fileStatusResult.length; i++) {\n      if (this.fileStatusResult[i].filename === filename)\n        return this.fileStatusResult[i].statusNames;\n    }\n  }\n\n  async showFiles() {\n    //$('#files').show()\n    //$('#diff-container').hide()\n    let files = await gitservice.getStatusMatrixFiles(); //await this.getDirectory(\"/\");\n    console.log(\"get directory result\", files);\n\n    try {\n      await this.getFileStatusMatrix();\n      let jsonfiles = await jsonObjectFromFileList(files);\n      console.log(\"files\", jsonfiles);\n      this.filetreecontent.next(jsonfiles);\n    } catch (e) {\n      console.log(e);\n    }\n    try {\n      await gitservice.gitlog();\n    } catch (e) {}\n    try {\n      await gitservice.getBranches();\n    } catch (e) {}\n    //await gitservice.diffFiles()\n    return true;\n  }\n\n  async getDirectory(dir: string) {\n    console.log(\"get directory\");\n    let result: string[] = [];\n    const files = await fs.readdir(`${dir}`);\n    console.log(files);\n\n    for (let i = 0; i < files.length; i++) {\n      const fi = files[i];\n      if (typeof fi !== \"undefined\") {\n        // console.log('looking into ', fi, dir)\n        if (dir === \"/\") dir = \"\";\n        const type = await fs.stat(`${dir}/${fi}`);\n        if (type.type === \"dir\") {\n          // console.log('is directory, so get ', `${dir}/${fi}`)\n          result = [...result, ...(await this.getDirectory(`${dir}/${fi}`))];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          result.push(`${dir}/${fi}`);\n        }\n      }\n    }\n    console.log(result);\n    return result;\n  }\n\n  async getDirectoryFromIde(dir: string) {\n    console.log(\"get directory\", dir);\n    let result: string[] = [];\n    const files = await client.call(\"fileManager\", \"readdir\", dir);\n    console.log(files);\n\n    let fileArray = Object.keys(files).map(function (i: any) {\n      // do something with person\n      return { filename: i, data: files[i] };\n    });\n\n    console.log(fileArray);\n\n    for (let i = 0; i < fileArray.length; i++) {\n      const fi: any = fileArray[i];\n      if (typeof fi !== \"undefined\") {\n        //console.log('looking into ', fi, dir)\n        //if (dir === \"/\") dir = \"\";\n        //dir = removeSlash(dir)\n        const type = fi.data.isDirectory;\n        //console.log(\"type\",type)\n        if (type === true) {\n          //console.log('is directory, so get ', `${fi.filename}`)\n          result = [\n            ...result,\n            ...(await this.getDirectoryFromIde(`${fi.filename}`)),\n          ];\n        } else {\n          // console.log('is file ', `${dir}/${fi}`)\n          result.push(`browser/${fi.filename}`);\n        }\n      }\n    }\n\n    console.log(result);\n    return result;\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts",[],"/Volumes/butbut/code/boxtest/src/components/git/gitService.ts",["152"],"import git, { ReadCommitResult } from \"isomorphic-git\";\nimport { fileservice } from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport path from \"path\";\nimport { removeSlash } from \"../Files/utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fileStatuses } from \"../Files/FileService\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nexport interface diffObject {\n  originalFileName: string;\n  updatedFileName: string;\n  past: string;\n  current: string;\n}\nexport class gitService {\n  commits = new BehaviorSubject<ReadCommitResult[] | undefined>(undefined);\n  branch = new BehaviorSubject<string>(\"\");\n  branches = new BehaviorSubject<string[] | undefined>(undefined);\n  diffResult = new BehaviorSubject<diffObject[] | undefined>(undefined);\n  reponameSubject = new BehaviorSubject<string>(\"\");\n  reponame = \"\"\n\n  fsConfig:any\n  fsConfigPromise:any\n  fsNoPromise:any\n  fs:any\n\n  constructor() {\n    //this.init();\n    this.fsConfig = new FS(\"remix-storage-config\");\n    this.fsConfigPromise = this.fsConfig.promises;\n    this.fsNoPromise = new FS(\"remix-workspace\");\n    this.fs = this.fsNoPromise.promises;\n  }\n\n  async init() {\n    await git.init({\n      fs: this.fsNoPromise,\n      dir: \"/\",\n      defaultBranch: \"master\",\n    });\n    //toast.info(`Git version ${git.version()}`);\n\n    await fileservice.showFiles();\n  }\n\n  async clearRepoName(){\n    this.reponameSubject.next(\"\")\n  }\n\n  async addToGit(args: string | undefined) {\n    if (args !== undefined) {\n      //console.log('ADD TO GIT', $(args[0].currentTarget).data('file'))\n      const filename = args; // $(args[0].currentTarget).data('file')\n      const basename = path.basename(filename);\n      const directory = path.dirname(filename);\n      console.log(\"will add\", basename, directory);\n\n      await git.add({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        filepath: removeSlash(filename),\n      });\n      await fileservice.showFiles();\n      toast.success(`Added file ${filename}`);\n    }\n  }\n\n  async gitrm(args: any) {\n    //console.log('RM GIT', $(args[0].currentTarget).data('file'))\n    const filename = args; // $(args[0].currentTarget).data('file')\n\n    await git.remove({\n      fs: this.fsNoPromise,\n      dir: \"/\",\n      filepath: removeSlash(filename),\n    });\n    await fileservice.showFiles();\n    toast.success(`Removed file file ${filename}`);\n  }\n\n  async checkoutfile(args: any) {\n    const filename = \"\"; //$(args[0].currentTarget).data('file')\n    console.log(\"checkout\", filename);\n\n    try {\n      await git.checkout({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        filepaths: [`/${filename}`],\n      });\n    } catch (e) {\n      console.log(e);\n      //this.addAlert(\"checkoutMessage\", e)\n    }\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n    await fileservice.syncStart()\n  }\n\n  async checkout(args: string) {\n    const oid = args; //$(args[0].currentTarget).data('oid')\n    console.log(\"checkout\", oid);\n\n    try {\n      await git.checkout({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        ref: oid,\n      });\n\n      this.gitlog();\n    } catch (e) {\n      console.log(e);\n      toast.error(\" \" + e);\n    }\n\n    console.log(\"done\");\n    await fileservice.syncToBrowser();\n    await fileservice.syncStart()\n  }\n\n  async getCommits() {\n    console.log(\"get commits\");\n    try {\n      const commits: ReadCommitResult[] = await git.log({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        depth: 200,\n      });\n      return commits;\n    } catch (e) {\n      return []\n    }\n  }\n\n  async gitlog() {\n    console.log(\"log\");\n    try {\n      const commits: ReadCommitResult[] = await this.getCommits();\n      this.commits.next(commits);\n      console.log(commits);\n    } catch (e) {\n      this.commits.next([]);\n      console.log(e);\n    }\n\n    await this.showCurrentBranch();\n  }\n\n  async createBranch(name: string = \"\") {\n    const branch = name; //|| $(\"#newbranchname\").val();\n    if (branch)\n      await git.branch({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        ref: branch,\n      });\n\n    fileservice.showFiles();\n  }\n\n  async showCurrentBranch() {\n    try {\n      const branch = await this.currentBranch();\n      const currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      this.branch.next(branch);\n      if (typeof branch === \"undefined\" || branch === \"\") {\n        toast.warn(`You are in a detached state`);\n        this.branch.next(`HEAD detached at ${currentcommitoid}`);\n      } else {\n        this.branch.next(`Branch is: ${branch} at commit ${currentcommitoid}`);\n      }\n    } catch (e) {\n      this.branch.next('')\n    }\n  }\n\n  async getLastCommmit() {\n    try {\n      let currentcommitoid = \"\";\n      currentcommitoid = await this.getCommitFromRef(\"HEAD\");\n      return currentcommitoid;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async currentBranch() {\n    try {\n      const branch: string =\n        (await git.currentBranch({\n          fs: this.fsNoPromise,\n          dir: \"/\",\n          fullname: false,\n        })) || \"\";\n      console.log(\"BRANCH\", branch);\n      return branch;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async commit(message: string = \"\") {\n    const sha = await git.commit({\n      fs: this.fsNoPromise,\n      dir: \"/\",\n      author: {\n        name: \"Remix Workspace\",\n        email: \"\",\n      },\n      message: message, //$('#message').val()\n    });\n    toast.success(`Commited: ${sha}`);\n    await fileservice.showFiles();\n  }\n\n  async getBranches() {\n    let branches: string[] = await git.listBranches({\n      fs: this.fsNoPromise,\n      dir: \"/\",\n    });\n    this.branches.next(branches);\n  }\n\n  async getCommitFromRef(ref: string) {\n    const commitOid = await git.resolveRef({\n      fs: this.fsNoPromise,\n      dir: \"/\",\n      ref: ref,\n    });\n    return commitOid;\n  }\n\n  async getFileContentCommit(fullfilename: string, commitOid: string) {\n    let content = \"\";\n    try {\n      const { blob } = await git.readBlob({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n      content = Buffer.from(blob).toString(\"utf8\");\n    } catch (e) {\n      console.log(e);\n    }\n    return content;\n  }\n\n  async statusMatrix(dir: string = \"/\", ref: string = \"HEAD\") {\n    const matrix = await git\n      .statusMatrix({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n      })\n      .catch((e) => {});\n\n    let result = (matrix || []).map((x) => {\n      return {\n        filename: `/${x.shift()}`,\n        status: x,\n      };\n    });\n    return result;\n  }\n\n  async getStatusMatrixFiles() {\n    let files = await (await this.statusMatrix()).map((f) => {\n      return f.filename;\n    });\n    return files;\n  }\n\n  async listFiles(dir: string = \"/\", ref: string = \"HEAD\") {\n    let filescommited = await git.listFiles({\n      fs: this.fsNoPromise,\n      dir: dir,\n      ref: ref,\n    });\n    return filescommited;\n  }\n\n  async listFilesInstaging(dir: string = \"/\") {\n    let filesInStaging = await git.listFiles({\n      fs: this.fsNoPromise,\n      dir: dir,\n    });\n    return filesInStaging;\n  }\n\n  async addAll() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n\n    for (let i: number = 0; i < statuses.length; i++) {\n      await this.addToGit(statuses[i].filename);\n    }\n  }\n\n  async diffFiles() {\n    const statuses = fileservice.fileStatusResult;\n    console.log(statuses);\n    const diffs: diffObject[] = [];\n    for (let i: number = 0; i < statuses.length; i++) {\n      if ((statuses[i].statusNames?.indexOf(\"modified\") || false) > -1) {\n        console.log(statuses[i].statusNames?.indexOf(\"modified\"));\n        const diff: diffObject = await this.diffFile(statuses[i].filename);\n        diffs.push(diff);\n      }\n    }\n    this.diffResult.next(diffs);\n  }\n\n  async diffFile(args: any) {\n    //$('#files').hide()\n    //$('#diff-container').show()\n    console.log(\"DIFF\", args);\n    const fullfilename = args; // $(args[0].currentTarget).data('file')\n    try {\n      const commitOid = await git.resolveRef({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        ref: \"HEAD\",\n      });\n\n      const { blob } = await git.readBlob({\n        fs: this.fsNoPromise,\n        dir: \"/\",\n        oid: commitOid,\n        filepath: removeSlash(fullfilename),\n      });\n\n      const newcontent = await this.fs.readFile(fullfilename, {\n        encoding: \"utf8\",\n      });\n      const original = Buffer.from(blob).toString(\"utf8\");\n\n      console.log(original);\n      console.log(newcontent);\n      //const filediff = createPatch(filename, original, newcontent); // diffLines(original,newcontent)\n      //console.log(filediff)\n      const filediff: diffObject = {\n        originalFileName: fullfilename,\n        updatedFileName: fullfilename,\n        current: newcontent,\n        past: original,\n      };\n\n      return filediff;\n    } catch (e) {\n      toast(\"Nothing to diff! \" + fullfilename);\n\n      const filediff: diffObject = {\n        originalFileName: \"\",\n        updatedFileName: \"\",\n        current: \"\",\n        past: \"\",\n      };\n      return filediff;\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts",[],"/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts",["153"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport {\n  gitservice,\n  ipfservice,\n  loaderservice,\n  localipfsstorage,\n} from \"../../App\";\n\nexport interface boxObject {\n  key?: string;\n  cid?: string;\n  datestored?: string | number | Date;\n  datecommit?: number | string | Date;\n  timestamp: number;\n  ref?: string;\n  message?: string;\n  links?: string;\n}\nexport class BoxService {\n  status = new BehaviorSubject<boolean>(false);\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  box: any;\n  space: any;\n\n  showspinner() {}\n\n  hidespinner() {}\n  // 3BOX connection\n\n  async setSpace(space: any) {\n    this.space = space;\n  }\n\n  async getStatus() {}\n\n  async storeHashIn3Box(space: any) {\n    if (typeof this.space == \"undefined\") {\n      toast.error(\"You should connect to 3Box first\");\n      return false;\n    }\n    loaderservice.setLoading(true);\n    await ipfservice.addToIpfs();\n    console.log(\"export 3box\", ipfservice.cid, this.space);\n\n    try {\n      const ob = await localipfsstorage.createBoxObject();\n\n      await this.space.private.set(ob.key, ob);\n      toast.success(\"Stored in 3box\");\n      await this.getObjectsFrom3Box(space);\n      loaderservice.setLoading(false);\n    } catch (e) {}\n  }\n\n  async getObjectsFrom3Box(space: any) {\n    console.log(\"get objects from box\");\n    const hashes: boxObject[] = await space.private.all();\n    this.boxObjects.next(Object.values(hashes));\n    console.log(hashes);\n    return Object.values(hashes);\n  }\n\n  async deleteFrom3Box(args: string | undefined) {\n    if (args !== undefined) {\n      const key = args;\n      console.log(\"key\", key);\n      loaderservice.setLoading(true);\n      await this.space.private.remove(key);\n      await this.getObjectsFrom3Box(this.space);\n      loaderservice.setLoading(false);\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts",["154"],"import { unstable_batchedUpdates } from \"react-dom\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { fsConfigPromise, gitservice, ipfservice } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\nimport { default as dateFormat } from 'dateformat'\nexport class LocalIPFSStorage {\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  objects: any[] = [];\n\n  async init() {\n    try {\n      await this.read();\n    } catch (e) {\n      console.log(e);\n      await this.write();\n    }\n  }\n\n  async read() {\n    let r = await fsConfigPromise.readFile(\"/objects.json\", {\n      encoding: \"utf8\",\n    });\n    this.objects = JSON.parse(r);\n    this.objects.sort((a, b) => (a.datecommit > b.datecommit) ? -1 : 1)\n    this.objects = await this.filterNulls();\n    console.log(\"READ CONFIG\",this.objects);\n    this.boxObjects.next(this.objects);\n  }\n\n  async write() {\n    await fsConfigPromise.writeFile(\n      \"/objects.json\",\n      JSON.stringify(await this.filterNulls()),\n      { encoding: \"utf8\" }\n    );\n  }\n\n  async addToStorage(box: boxObject) {\n    await this.init();\n    await this.deleteFromStorage(box.cid)\n    this.objects.push(box);\n    await this.write();\n    await this.read();\n  }\n\n  async filterNulls() {\n    var filtered = this.objects.filter(function (el) {\n      return el != null;\n    });\n    return filtered;\n  }\n\n  async deleteFromStorage(cid: string | undefined) {\n    if (cid !== undefined) {\n      await this.read();\n      this.objects = this.objects.filter((i) => i.cid !== cid);\n      await this.write();\n      await this.read();\n    }\n  }\n\n  async createBoxObject() {\n    await this.init();\n    const commits = await gitservice.getCommits();\n    let key = gitservice.reponame;\n\n    let ob: boxObject = {\n      key: key,\n      cid: ipfservice.cid,\n      datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n      datecommit: dateFormat(new Date(commits[0].commit.committer.timestamp * 1000), \"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n      timestamp: commits[0].commit.committer.timestamp,\n      ref: commits[0].oid,\n      message: commits[0].commit.message,\n    };\n\n    return ob;\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Help.tsx",["155"],"import React, { useEffect, useState } from 'react'\nimport marked from \"marked\";\ninterface HelpProps {\n\n}\n\nexport const Help: React.FC<HelpProps> = ({}) => {\n    const [markdown,setMarkdown] = useState(\"\")\n    useEffect(()=>{\n        fetch(\"https://raw.githubusercontent.com/bunsenstraat/remix-storage-plugin/master/README.md\").then(response => {\n            return response.text()\n          })\n          .then(text => {\n            setMarkdown(text)\n          })\n    },[])\n    return (\n        <section>\n          <article dangerouslySetInnerHTML={{__html: marked(markdown)}}></article>\n        </section>\n      )\n}","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx",["156","157","158"],"import React from 'react'\nimport { fileservice, localipfsstorage, resetFileSystem } from '../../App'\n\ninterface FileToolsProps {\n\n}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n        return (\n        <>\n        <hr/>\n{/*         <button className=\"btn btn-danger w-10\" onClick={async()=>fileservice.getDirectory(\"/\")}>get dir</button> */}\n        <button className=\"btn btn-danger w-10 d-none\" onClick={async()=>fileservice.syncFromBrowser()}>Sync from IDE</button>\n        <button className=\"btn btn-primary w-10 ml-2\" onClick={async()=>fileservice.startNewRepo()}>Start new repo</button> |\n        <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.clearAll()}>Clear all files & git init</button>\n{/*         <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.clearFilesInWorkSpace()}>Clear files in browser</button>\n        <button className=\"btn btn-danger w-10 ml-2\" onClick={async()=>fileservice.syncStart()}>sync start</button>\n\n        <button className=\"btn btn-danger w-10\" onClick={async()=>fileservice.showFiles()}>show files</button>\n\n        <button className=\"btn btn-danger w-10\" onClick={async()=>resetFileSystem()}>show config</button> */}\n        </>\n        );\n}","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx",["159","160"],"import React, { Suspense } from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { boxservice, ipfservice, localipfsstorage } from \"../../App\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n  const BoxController = React.lazy(() =>\n    import(\"../3box/Box\").then(({ BoxController }) => ({\n      default: BoxController,\n    }))\n  );\n\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (ipfservice.cid !== \"\" && ipfservice.cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl()} id=\"CID\">\n          Your data is here: {getUrl()}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const addFilesToIpfs = async () => {\n    try {\n      await ipfservice.addToIpfs();\n      await localipfsstorage.addToStorage(\n        await localipfsstorage.createBoxObject()\n      );\n    } catch (e) {}\n  };\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      <h4>Local storage & IPFS</h4>\n      <button\n        className=\"btn w-25 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToIpfs()}\n      >\n        Export to IPFS only & store in local storage\n      </button>\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n      <h4>3Box Storage</h4>\n      <div className=\"alert alert-info w-25\" role=\"alert\">\n        This will export the files to IPFS and store a key in your 3Box account.\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BoxController buttonTitle=\"Export to 3Box\" storeData={true} />\n      </Suspense>\n      <div id=\"boxexportstatus\"></div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx",["161"],"import React from \"react\";\nimport { LocalIPFSView } from \"../LocalStorage/LocalIPFSView\";\nimport { BoxImporter } from \"./BoxImporter\";\nimport { IPFSImporter } from \"./IPFSImporter\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    /* \n            <>\n\n<h4>3Box storage</h4>\n<div className=\"alert alert-info\" role=\"alert\">This will import the IPFS repo from a key stored in your 3Box account.\n</div>\n<div className=\"container-fluid\">\n\n    <div className=\"row p-1 small\">\n        <div className=\"col-4\">\n            IPFS: <a target=\"_blank\" href=\"{{link}}\">{{cid}}</a><br>\n            DATE: {{datestored}}<br>\n            DATE OF COMMIT: {{datecommit}}<br>\n            MESSAGE: {{message}}<br>\n            COMMIT: {{ref}}<br>\n        </div>\n        <div className=\"col\">\n            <button className=\"btn btn-primary btn-sm float-right import3b-btn float-right\" data-cid=\"{{cid}}\">\n                import\n            </button>\n        </div>\n        <div className=\"col\">\n            <button className=\"btn btn-danger btn-sm float-right delete3b-btn float-right\" data-key=\"{{key}}\">\n                <span className=\"fas fa-trash\"></span>\n            </button>\n        </div>\n    </div>\n\n</div>\n            </> */\n    <>\n        <IPFSImporter/>\n        <LocalIPFSView/>\n        <BoxImporter/>\n        \n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts",["162","163","164"],"import path from \"path\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n  files.map((f, i) => {\n    const dirname = path.dirname(files[i]);\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      //console.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    }\n  });\n  console.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  const nest = (items: any, id = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  console.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  // console.log('OB', ob)\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  //console.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx",["165","166"],"import React from \"react\";\nimport { client, fileservice, gitservice } from \"../../App\";\nimport \"./FileExplorer.css\";\nimport { fileExplorerNode } from \"./types\";\ninterface FileButtonsProps {\n  file: fileExplorerNode;\n  setTab: (key: string) => void;\n}\n\nexport const FileButtons: React.FC<FileButtonsProps> = ({\n  file,\n  setTab,\n}: FileButtonsProps) => {\n  const diffFile = (file: fileExplorerNode) => {\n    gitservice.diffFiles();\n    ///setTab(\"diff\")\n  };\n\n  const gitaddButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"deleted\") === -1 &&\n      status?.indexOf(\"unmodified\") === -1\n    ) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.addToGit(file.fullname)}\n        >\n          git add\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>git add</div>;\n    }\n  };\n\n  const giteditButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await fileservice.viewFile(file.fullname)}\n        >\n          edit\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>edit</div>;\n    }\n  };\n\n  const gitrmbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n    } else {\n      if (status?.indexOf(\"staged\") === -1) {\n        return (\n          <div\n            className={\"badge badge-primary addgit\"}\n            onClick={async () => await gitservice.gitrm(file.fullname)}\n          >\n            git rm\n          </div>\n        );\n      }else{\n        return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n      }\n    }\n  };\n\n  const checkoutbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"modified\") === -1 &&\n      (status?.indexOf(\"deleted\") === -1 ||\n        status?.indexOf(\"staged\") ||\n        status?.indexOf(\"unstaged\"))\n    ) {\n      return <div className={\"badge badge-secondary addgit\"}>git checkout</div>;\n    } else {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.checkoutfile(file.fullname)}\n        >\n          git checkout\n        </div>\n      );\n    }\n  };\n\n  if (file.type === \"file\") {\n    return (\n      <span className=\"status float-right ml-3\">\n        {giteditButton(file)}\n        {gitrmbutton(file)}\n        {gitaddButton(file)}\n        {checkoutbutton(file)}\n      </span>\n    );\n  } else {\n    return <></>;\n  }\n};\n","/Volumes/butbut/code/boxtest/src/components/3box/Box.tsx",["167","168"],"import React, { useState } from \"react\";\nimport Box from \"3box\";\nimport Web3Modal from \"web3modal\";\nimport { getAddress } from \"@ethersproject/address\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { boxservice, loaderservice, providerOptions } from \"../../App\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"use-subscribable\";\n\ninterface BoxProps {\n  buttonTitle: string;\n  storeData: boolean;\n}\n\nexport const BoxController: React.FC<BoxProps> = (p) => {\n  const status = useBehaviorSubject(boxservice.status);\n  let address = \"\";\n  let mybox: Box;\n  let space;\n\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n\n  let modal: Web3Modal;\n\n  const setModalListener = async () => {\n    modal.on(\"connect\", async (provider:any) => {\n      if (!status) {\n        const [eth] = await provider.enable();\n        address = getAddress(eth);\n        loaderservice.setLoading(true);\n        toast.info(\"Please wait... this can take a while\");\n        console.log(address);\n        mybox = await Box.openBox(address, window.ethereum);\n        toast.success(\"3box connected... waiting for space to open\");\n        console.log(mybox);\n        space = await mybox.openSpace(\"remix-workspace\");\n        //toast.success(\"space opened... getting data\")\n        console.log(space);\n\n        await boxservice.setSpace(space);\n        await boxservice.getObjectsFrom3Box(space);\n        boxservice.status.next(true);\n      }\n      if (p.storeData) await boxservice.storeHashIn3Box(boxservice.space);\n      loaderservice.setLoading(false);\n      // .then((x) => toast.success(\"connected to 3box\"))\n      // .catch((x) => toast.error(\"can't connect to 3box\"));\n    });\n  };\n  const startConnect = async () => {\n    modal = new Web3Modal({\n      providerOptions: providerOptions, // required\n    });\n    await setModalListener();\n    // console.log(\"get box\", status,)\n    if (!status) {\n      await modal.connect();\n    } else {\n      loaderservice.setLoading(true);\n      if (p.storeData) await boxservice.storeHashIn3Box(boxservice.space);\n      loaderservice.setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary 3boxbtn\"\n        id=\"boxconnect\"\n        onClick={async () => await startConnect()}\n      >\n        {p.buttonTitle}\n      </button>\n      <div id=\"3boxconnection\">\n        {status ? <>connected</> : <>disconnected</>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["169","170"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { ipfservice, localipfsstorage } from \"../../App\";\n\ninterface LocalIPFSViewProps {}\n\nexport const LocalIPFSView: React.FC<LocalIPFSViewProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(localipfsstorage.boxObjects);\n\n  useEffect(() => {\n    //localipfsstorage.init();\n  }, []);\n\n  localipfsstorage.boxObjects\n    .subscribe((x) => {\n      console.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      <h4>Local Storage</h4>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o, index) => {\n          return (\n            <div key={index} className=\"row p-1 small\">\n              <Card className=\"w-75\">\n                <Card.Body>\n                  <Card.Title>{o.key}</Card.Title>\n                  <div className=\"row\">\n                    <div className=\"col\">IPFS</div>\n                    <div className=\"col\">{getUrlLink(o.cid)}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE EXPORTED</div>\n                    <div className=\"col\">{o.datestored}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">MESSAGE</div>\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button\n                  onClick={async () => await ipfservice.importFromCID(o.cid, o.key)}\n                  className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n                <button\n                  onClick={async () =>\n                    await localipfsstorage.deleteFromStorage(o?.cid)\n                  }\n                  className=\"btn btn-danger btn-sm delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/BoxImporter.tsx",["171","172","173"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Suspense } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { boxservice, ipfservice } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\n//import { BoxController } from \"../3box/Box\";\n\ninterface boximporterProps {}\n\nexport const BoxImporter: React.FC<boximporterProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(boxservice.boxObjects);\n  const BoxController = React.lazy(() =>\n    import(\"../3box/Box\").then(({ BoxController }) => ({\n      default: BoxController,\n    }))\n  );\n\n  boxservice.boxObjects\n    .subscribe((x) => {\n      console.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      <hr></hr>\n      <h4>3Box storage</h4>\n      <div className=\"alert alert-info\" role=\"alert\">\n        This will import the IPFS repo from a key stored in your 3Box account.\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <BoxController buttonTitle=\"Connect to 3Box\" storeData={false} />\n      </Suspense>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o) => {\n          return (\n            <div key={o.key} className=\"row p-1 small\">\n              <Card className=\"w-75\">\n                <Card.Body>\n                  <Card.Title>{o.key}</Card.Title>\n                  <div className=\"row\">\n                    <div className=\"col\">IPFS</div>\n                    <div className=\"col\">{getUrlLink(o.cid)}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE EXPORTED</div>\n                    <div className=\"col\">{o.datestored}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">MESSAGE</div>\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button\n                  onClick={async () => await ipfservice.importFromCID(o.cid)}\n                  className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n                <button\n                  onClick={async () => await boxservice.deleteFrom3Box(o.key)}\n                  className=\"btn btn-danger btn-sm delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx",["174"],"import React, { useState } from \"react\";\nimport { ipfservice } from \"../../App\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n  return (\n    <>\n      <div className=\"alert alert-warning\" role=\"alert\">\n        Importing files will clear the filelist.\n      </div>\n      <div className=\"form-group\">\n        <label>IPFS CID</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button onClick={async()=>ipfservice.importFromCID(cid.value, cid.value)} className=\"btn w-25 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx",["175"],"import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\ninterface ConnectionWarningProps {\n  canLoad: boolean;\n}\n\nexport const ConnectionWarning: React.FC<ConnectionWarningProps> = (props) => {\n  console.log(\"WARNING\",props)\n  return (\n    <>\n      <Modal show={!props.canLoad} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          <Modal.Title>\n        <FontAwesomeIcon icon={faExclamationTriangle} /> Change your browser settings\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          This app won't work properly when you are not on https and your\n          browser blocks third party cookies.<br></br>\n          Running it in incognito mode might not work unless you allow third part cookies.<br></br>\n          3Box services are not available unless you are on https.<br></br>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx",["176","177","178","179"],"import React, { useEffect, useState } from \"react\";\nimport { ReactGhLikeDiff } from \"react-gh-like-diff\";\nimport \"./diff.css\"\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\n\ninterface DiffProps {}\n\nexport const DiffView: React.FC<DiffProps> = ({}) => {\n  const [mock, setMock] = useState(\"\");\n  const diffs = useBehaviorSubject(gitservice.diffResult);\n\n  gitservice.diffResult.subscribe((x) => console.log(\"diff\", x)).unsubscribe();\n\n  return (\n    <div className='container-fluid'>\n      {diffs?.map((diff) => {\n        return (\n           \n          <ReactGhLikeDiff key={diff.originalFileName}\n            options={{\n              originalFileName: diff?.originalFileName,\n              updatedFileName: diff?.updatedFileName,\n            }}\n            past={diff?.past}\n            current={diff?.current}\n          />\n         \n        );\n      })}\n </div>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/RepoName.tsx",["180","181"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport { gitService } from \"../gitService\";\n\ninterface RepoNameProps {}\n\nexport const RepoName: React.FC<RepoNameProps> = ({}) => {\n  const [name, setNAme] = useState({ value: \"\" });\n  const reponame = useBehaviorSubject(gitservice.reponameSubject)\n\n  gitservice.reponameSubject.subscribe((x)=>{}).unsubscribe()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNAme({ value: e.currentTarget.value });\n  };\n  const saveName = () => {\n      gitservice.reponameSubject.next(name.value)\n      gitservice.reponame = name.value\n      localStorage.setItem(\"currentRepo\",name.value)\n  };\n\n  useEffect(()=>{\n    let name:string = localStorage.getItem(\"currentRepo\") || \"\"\n    gitservice.reponame = name\n    gitservice.reponameSubject.next(name)\n  },[])\n\n  return (\n    <>\n      <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={reponame===\"\"?true:false} centered>\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Give your repo a name\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-100\"\n            type=\"text\"\n            id=\"reponame\"\n            \n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => saveName()}>Save</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx",["182"],"import React, { useState } from \"react\";\nimport { gitservice } from \"../../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {}\n\nexport const GitControls: React.FC<gitViewProps> = ({}) => {\n\n  const [message,setMessage] = useState({value:''})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  return (\n    <>\n      <hr />\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async () =>await gitservice.init()}>git init</button> */}\n\n      {/* <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.addAll()} >git add all</button> */}\n      <hr />\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input className=\"form-control w-25\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      <button className=\"btn w-25 btn-primary\" disabled={message.value!==\"\"?false:true} onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <br /><hr />\n      <GitLog/>\n      <br /><hr />\n      <GitBranch/>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx",["183"],"import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch,setNewBranch] = useState({value:''})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setNewBranch({value:e.currentTarget.value})\n  }\n\n  gitservice.branches\n    .subscribe((x) => {\n      console.log(branches);\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      console.log(branch);\n    })\n    .unsubscribe();\n\n  return (\n    <>\n      <h4>Branches</h4>\n      <Alert className=\"w-50\" variant=\"success\">\n        {branch}\n      </Alert>\n      {branches?.map((branch) => {\n        return (\n          <div key={branch} className=\"row p-1\">\n            <div className=\"col-2\">{branch}</div>\n            <div className=\"col\">\n              <span className=\"float-right\">\n                <div\n                  onClick={async () => gitservice.checkout(branch)}\n                  className=\"btn btn-primary btn-sm checkout-btn\"\n                >\n                  checkout\n                </div>\n              </span>\n            </div>\n          </div>\n        );\n      })}\n      <hr />\n      <h4>Create branch</h4>\n      <div className=\"form-group\">\n        <label>Branchname</label>\n        <input onChange={handleChange} className=\"form-control w-25\" type=\"text\" id=\"newbranchname\" />\n      </div>\n      <button onClick={async()=>gitservice.createBranch(newBranch.value)} className=\"btn w-25 btn-primary\" id=\"createbranch-btn\">\n        git branch\n      </button>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx",["184"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../../App\";\nimport { default as dateFormat } from 'dateformat'\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n\n  gitservice.commits\n    .subscribe((x) => {\n      console.log(commits);\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = dateFormat(commit.commit.committer.timestamp * 1000, \"dddd, mmmm dS, yyyy, h:MM:ss TT\");\n    return date\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary\"\n        onClick={async () => gitservice.gitlog()}\n      >\n        git log\n      </button>\n\n      <hr />\n      <h4>Commits</h4>\n\n      <div className=\"container-fluid\">\n        {commits?.map((commit) => {\n          return (\n            <div key={commit.oid} className=\"row p-1 small\">\n              <div className=\"col-2\">{commit.commit.message}</div>\n              <div className=\"col\">{getDate(commit)}</div>\n              <div className=\"col\">{commit.oid}</div>\n              <div\n                onClick={async () => gitservice.checkout(commit.oid)}\n                className=\"btn btn-primary btn-sm checkout-btn\"\n              >\n                git checkout\n              </div>\n            </div>\n          );\n        })}\n        <div\n          onClick={async () => gitservice.checkout(\"master\")}\n          className=\"btn btn-primary btn-sm checkout-btn\"\n          data-oid=\"master\"\n        >\n          git checkout master\n        </div>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx",["185"],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":12},{"ruleId":"190","severity":1,"message":"194","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":11},{"ruleId":"190","severity":1,"message":"195","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":17},{"ruleId":"190","severity":1,"message":"196","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":20},{"ruleId":"197","severity":1,"message":"198","line":86,"column":13,"nodeType":"199","messageId":"200","endLine":86,"endColumn":15},{"ruleId":"190","severity":1,"message":"201","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":10},{"ruleId":"190","severity":1,"message":"202","line":5,"column":3,"nodeType":"192","messageId":"193","endLine":5,"endColumn":14},{"ruleId":"190","severity":1,"message":"203","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":14},{"ruleId":"204","severity":1,"message":"205","line":44,"column":3,"nodeType":"206","messageId":"207","endLine":46,"endColumn":4},{"ruleId":"208","severity":1,"message":"209","line":227,"column":35,"nodeType":"210","messageId":"211","endLine":227,"endColumn":37},{"ruleId":"208","severity":1,"message":"209","line":228,"column":29,"nodeType":"210","messageId":"211","endLine":228,"endColumn":31},{"ruleId":"190","severity":1,"message":"212","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":22},{"ruleId":"190","severity":1,"message":"213","line":4,"column":3,"nodeType":"192","messageId":"193","endLine":4,"endColumn":13},{"ruleId":"190","severity":1,"message":"214","line":1,"column":10,"nodeType":"192","messageId":"193","endLine":1,"endColumn":33},{"ruleId":"215","severity":1,"message":"216","line":7,"column":43,"nodeType":"217","messageId":"200","endLine":7,"endColumn":45},{"ruleId":"190","severity":1,"message":"218","line":2,"column":23,"nodeType":"192","messageId":"193","endLine":2,"endColumn":39},{"ruleId":"190","severity":1,"message":"219","line":2,"column":41,"nodeType":"192","messageId":"193","endLine":2,"endColumn":56},{"ruleId":"215","severity":1,"message":"216","line":8,"column":53,"nodeType":"217","messageId":"200","endLine":8,"endColumn":55},{"ruleId":"190","severity":1,"message":"220","line":9,"column":9,"nodeType":"192","messageId":"193","endLine":9,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":22,"column":12,"nodeType":"223","endLine":22,"endColumn":27},{"ruleId":"215","severity":1,"message":"216","line":10,"column":51,"nodeType":"217","messageId":"200","endLine":10,"endColumn":53},{"ruleId":"208","severity":1,"message":"224","line":11,"column":20,"nodeType":"210","messageId":"225","endLine":11,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":71,"column":17,"nodeType":"210","messageId":"211","endLine":71,"endColumn":19},{"ruleId":"208","severity":1,"message":"209","line":75,"column":17,"nodeType":"210","messageId":"211","endLine":75,"endColumn":19},{"ruleId":"190","severity":1,"message":"226","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":16},{"ruleId":"190","severity":1,"message":"227","line":14,"column":9,"nodeType":"192","messageId":"193","endLine":14,"endColumn":17},{"ruleId":"190","severity":1,"message":"228","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"229","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":29},{"ruleId":"215","severity":1,"message":"216","line":10,"column":61,"nodeType":"217","messageId":"200","endLine":10,"endColumn":63},{"ruleId":"221","severity":1,"message":"222","line":26,"column":12,"nodeType":"223","endLine":26,"endColumn":27},{"ruleId":"190","severity":1,"message":"230","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":19},{"ruleId":"215","severity":1,"message":"216","line":12,"column":57,"nodeType":"217","messageId":"200","endLine":12,"endColumn":59},{"ruleId":"221","severity":1,"message":"222","line":29,"column":12,"nodeType":"223","endLine":29,"endColumn":27},{"ruleId":"215","severity":1,"message":"216","line":6,"column":59,"nodeType":"217","messageId":"200","endLine":6,"endColumn":61},{"ruleId":"190","severity":1,"message":"231","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":16},{"ruleId":"190","severity":1,"message":"232","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"215","severity":1,"message":"216","line":9,"column":47,"nodeType":"217","messageId":"200","endLine":9,"endColumn":49},{"ruleId":"190","severity":1,"message":"233","line":10,"column":10,"nodeType":"192","messageId":"193","endLine":10,"endColumn":14},{"ruleId":"190","severity":1,"message":"234","line":10,"column":16,"nodeType":"192","messageId":"193","endLine":10,"endColumn":23},{"ruleId":"190","severity":1,"message":"235","line":5,"column":10,"nodeType":"192","messageId":"193","endLine":5,"endColumn":20},{"ruleId":"215","severity":1,"message":"216","line":9,"column":51,"nodeType":"217","messageId":"200","endLine":9,"endColumn":53},{"ruleId":"215","severity":1,"message":"216","line":8,"column":53,"nodeType":"217","messageId":"200","endLine":8,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":8,"column":53,"nodeType":"217","messageId":"200","endLine":8,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":8,"column":47,"nodeType":"217","messageId":"200","endLine":8,"endColumn":49},{"ruleId":"215","severity":1,"message":"216","line":6,"column":55,"nodeType":"217","messageId":"200","endLine":6,"endColumn":57},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Web3Modal' is defined but never used.","'getAddress' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FS' is defined but never used.","'fileservice' is defined but never used.","'fsNoPromise' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fileStatuses' is defined but never used.","'gitservice' is defined but never used.","'unstable_batchedUpdates' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'localipfsstorage' is defined but never used.","'resetFileSystem' is defined but never used.","'boxconnected' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'client' is defined but never used.","'diffFile' is assigned a value but never used.","'useState' is defined but never used.","'WalletConnectProvider' is defined but never used.","'boxObject' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'mock' is assigned a value but never used.","'setMock' is assigned a value but never used.","'gitService' is defined but never used.","no-global-assign","no-unsafe-negation"]