[{"/Users/filipmertens/code/boxtest/src/index.tsx":"1","/Users/filipmertens/code/boxtest/src/reportWebVitals.ts":"2","/Users/filipmertens/code/boxtest/src/App.tsx":"3","/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSService.ts":"4","/Users/filipmertens/code/boxtest/src/components/Remix/Client.ts":"5","/Users/filipmertens/code/boxtest/src/components/Files/FileService.ts":"6","/Users/filipmertens/code/boxtest/src/components/git/gitService.ts":"7","/Users/filipmertens/code/boxtest/src/components/3box/3boxService.ts":"8","/Users/filipmertens/code/boxtest/src/components/Files/utils.ts":"9","/Users/filipmertens/code/boxtest/src/components/Files/FileTools.tsx":"10","/Users/filipmertens/code/boxtest/src/components/Files/FileExplorer.tsx":"11","/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSView.tsx":"12","/Users/filipmertens/code/boxtest/src/components/git/gitControls.tsx":"13","/Users/filipmertens/code/boxtest/src/components/git/Diff.tsx":"14","/Users/filipmertens/code/boxtest/src/components/git/gitLog.tsx":"15","/Users/filipmertens/code/boxtest/src/components/git/gitBranch.tsx":"16","/Users/filipmertens/code/boxtest/src/components/Files/Buttons.tsx":"17","/Users/filipmertens/code/boxtest/src/components/Files/statuses.tsx":"18","/Users/filipmertens/code/boxtest/src/components/3box/Box.tsx":"19","/Users/filipmertens/code/boxtest/src/components/Import/importer.tsx":"20","/Users/filipmertens/code/boxtest/src/components/Import/BoxImporter.tsx":"21","/Users/filipmertens/code/boxtest/src/components/Import/IPFSImporter.tsx":"22","/Users/filipmertens/code/boxtest/src/components/loaderService.ts":"23"},{"size":500,"mtime":1607789583666,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1607789583667,"results":"26","hashOfConfig":"25"},{"size":3360,"mtime":1607878000818,"results":"27","hashOfConfig":"25"},{"size":4584,"mtime":1607853765855,"results":"28","hashOfConfig":"25"},{"size":2315,"mtime":1607878743382,"results":"29","hashOfConfig":"25"},{"size":6527,"mtime":1607879063724,"results":"30","hashOfConfig":"25"},{"size":8925,"mtime":1607877563797,"results":"31","hashOfConfig":"25"},{"size":1942,"mtime":1607853744966,"results":"32","hashOfConfig":"25"},{"size":2997,"mtime":1607792561500,"results":"33","hashOfConfig":"25"},{"size":335,"mtime":1607792561498,"results":"34","hashOfConfig":"25"},{"size":1892,"mtime":1607792561497,"results":"35","hashOfConfig":"25"},{"size":1578,"mtime":1607851563767,"results":"36","hashOfConfig":"25"},{"size":1096,"mtime":1607792561507,"results":"37","hashOfConfig":"25"},{"size":919,"mtime":1607792561506,"results":"38","hashOfConfig":"25"},{"size":1716,"mtime":1607792561508,"results":"39","hashOfConfig":"25"},{"size":1829,"mtime":1607792561507,"results":"40","hashOfConfig":"25"},{"size":1189,"mtime":1607878102344,"results":"41","hashOfConfig":"25"},{"size":397,"mtime":1607792561499,"results":"42","hashOfConfig":"25"},{"size":1952,"mtime":1607853997327,"results":"43","hashOfConfig":"25"},{"size":1283,"mtime":1607848069857,"results":"44","hashOfConfig":"25"},{"size":2408,"mtime":1607852698940,"results":"45","hashOfConfig":"25"},{"size":894,"mtime":1607852803968,"results":"46","hashOfConfig":"25"},{"size":204,"mtime":1607853812277,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"131wf7i",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/filipmertens/code/boxtest/src/index.tsx",[],["105","106"],"/Users/filipmertens/code/boxtest/src/reportWebVitals.ts",[],"/Users/filipmertens/code/boxtest/src/App.tsx",["107","108","109","110","111","112"],"/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSService.ts",[],"/Users/filipmertens/code/boxtest/src/components/Remix/Client.ts",["113"],"/Users/filipmertens/code/boxtest/src/components/Files/FileService.ts",["114","115","116"],"/Users/filipmertens/code/boxtest/src/components/git/gitService.ts",["117"],"/Users/filipmertens/code/boxtest/src/components/3box/3boxService.ts",[],"/Users/filipmertens/code/boxtest/src/components/Files/utils.ts",["118","119","120"],"import path from \"path\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n  files.map((f, i) => {\n    const dirname = path.dirname(files[i]);\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      //console.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    }\n  });\n  console.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  const nest = (items: any, id = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  console.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  // console.log('OB', ob)\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  //console.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n","/Users/filipmertens/code/boxtest/src/components/Files/FileTools.tsx",["121"],"import React from 'react'\nimport { fileservice } from '../../App'\n\ninterface FileToolsProps {\n\n}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n        return (\n        <>\n        <hr/>\n        <button className=\"btn btn-danger w-10\" onClick={async()=>fileservice.clearDb()}>Clear files</button>\n        </>\n        );\n}","/Users/filipmertens/code/boxtest/src/components/Files/FileExplorer.tsx",[],"/Users/filipmertens/code/boxtest/src/components/IPFS/IPFSView.tsx",["122"],"import React from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { boxservice, ipfservice } from \"../../App\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (ipfservice.cid !== \"\" && ipfservice.cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl()} id=\"CID\">\n          Your data is here: {getUrl()}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => ipfservice.addToIpfs()}\n      >\n        upload to IPFS only\n      </button>\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n      <div className=\"alert alert-info\" role=\"alert\">\n        This will export the files to IPFS and store a key in your 3Box account.\n      </div>\n\n      <button\n        className=\"btn w-25 btn-primary 3boxbtn\"\n        disabled={!boxconnected || ipfservice.cid === \"\"}\n        onClick={async () => await boxservice.storeHashIn3Box(boxservice.space)}\n      >\n        Export to 3Box & IPFS\n      </button>\n      <div id=\"boxexportstatus\"></div>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/gitControls.tsx",["123"],"import React, { useState } from \"react\";\nimport { gitservice } from \"../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {}\n\nexport const GitControls: React.FC<gitViewProps> = ({}) => {\n\n  const [message,setMessage] = useState({value:''})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  return (\n    <>\n      <hr />\n      <button className=\"btn w-25 btn-primary\" onClick={async () =>await gitservice.init()}>git init</button>\n      <hr /><br/>\n\n      <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.addAll()} >git add all</button>\n      <hr />\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input className=\"form-control w-25\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      <button className=\"btn w-25 btn-primary\" onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <br /><hr />\n      <GitLog/>\n      <br /><hr />\n      <GitBranch/>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/Diff.tsx",["124","125","126","127"],"import React, { useEffect, useState } from \"react\";\nimport { ReactGhLikeDiff } from \"react-gh-like-diff\";\nimport \"./diff.css\"\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../App\";\n\ninterface DiffProps {}\n\nexport const DiffView: React.FC<DiffProps> = ({}) => {\n  const [mock, setMock] = useState(\"\");\n  const diffs = useBehaviorSubject(gitservice.diffResult);\n\n  gitservice.diffResult.subscribe((x) => console.log(\"diff\", x)).unsubscribe();\n\n  return (\n    <div className='container-fluid'>\n      {diffs?.map((diff) => {\n        return (\n           \n          <ReactGhLikeDiff key={diff.originalFileName}\n            options={{\n              originalFileName: diff?.originalFileName,\n              updatedFileName: diff?.updatedFileName,\n            }}\n            past={diff?.past}\n            current={diff?.current}\n          />\n         \n        );\n      })}\n </div>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/gitLog.tsx",["128"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React from \"react\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../App\";\n\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n\n  gitservice.commits\n    .subscribe((x) => {\n      console.log(commits);\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = new Date(commit.commit.committer.timestamp * 1000);\n    return `${date.getDay()}-${date.getMonth()}-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  };\n\n  return (\n    <>\n      <button\n        className=\"btn w-25 btn-primary\"\n        onClick={async () => gitservice.gitlog()}\n      >\n        git log\n      </button>\n\n      <hr />\n      <h4>Commits</h4>\n\n      <div className=\"container-fluid\">\n        {commits?.map((commit) => {\n          return (\n            <div key={commit.oid} className=\"row p-1 small\">\n              <div className=\"col-2\">{commit.commit.message}</div>\n              <div className=\"col\">{getDate(commit)}</div>\n              <div className=\"col\">{commit.oid}</div>\n              <div\n                onClick={async () => gitservice.checkout(commit.oid)}\n                className=\"btn btn-primary btn-sm checkout-btn\"\n              >\n                git checkout\n              </div>\n            </div>\n          );\n        })}\n        <div\n          onClick={async () => gitservice.checkout(\"master\")}\n          className=\"btn btn-primary btn-sm checkout-btn\"\n          data-oid=\"master\"\n        >\n          git checkout master\n        </div>\n      </div>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/git/gitBranch.tsx",["129"],"import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { gitservice } from \"../../App\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch,setNewBranch] = useState({value:''})\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setNewBranch({value:e.currentTarget.value})\n  }\n\n  gitservice.branches\n    .subscribe((x) => {\n      console.log(branches);\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      console.log(branch);\n    })\n    .unsubscribe();\n\n  return (\n    <>\n      <h2>Branches</h2>\n      <Alert className=\"w-50\" variant=\"success\">\n        {branch}\n      </Alert>\n      {branches?.map((branch) => {\n        return (\n          <div key={branch} className=\"row p-1\">\n            <div className=\"col-2\">{branch}</div>\n            <div className=\"col\">\n              <span className=\"float-right\">\n                <div\n                  onClick={async () => gitservice.checkout(branch)}\n                  className=\"btn btn-primary btn-sm checkout-btn\"\n                >\n                  checkout\n                </div>\n              </span>\n            </div>\n          </div>\n        );\n      })}\n      <hr />\n      <h4>Create branch</h4>\n      <div className=\"form-group\">\n        <label>Branchname</label>\n        <input onChange={handleChange} className=\"form-control w-25\" type=\"text\" id=\"newbranchname\" />\n      </div>\n      <button onClick={async()=>gitservice.createBranch(newBranch.value)} className=\"btn w-25 btn-primary\" id=\"createbranch-btn\">\n        git branch\n      </button>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/Files/Buttons.tsx",["130","131"],"/Users/filipmertens/code/boxtest/src/components/Files/statuses.tsx",[],"/Users/filipmertens/code/boxtest/src/components/3box/Box.tsx",[],"/Users/filipmertens/code/boxtest/src/components/Import/importer.tsx",["132"],"import React from \"react\";\nimport { BoxImporter } from \"./BoxImporter\";\nimport { IPFSImporter } from \"./IPFSImporter\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    /* \n            <>\n\n<h4>3Box storage</h4>\n<div className=\"alert alert-info\" role=\"alert\">This will import the IPFS repo from a key stored in your 3Box account.\n</div>\n<div className=\"container-fluid\">\n\n    <div className=\"row p-1 small\">\n        <div className=\"col-4\">\n            IPFS: <a target=\"_blank\" href=\"{{link}}\">{{cid}}</a><br>\n            DATE: {{datestored}}<br>\n            DATE OF COMMIT: {{datecommit}}<br>\n            MESSAGE: {{message}}<br>\n            COMMIT: {{ref}}<br>\n        </div>\n        <div className=\"col\">\n            <button className=\"btn btn-primary btn-sm float-right import3b-btn float-right\" data-cid=\"{{cid}}\">\n                import\n            </button>\n        </div>\n        <div className=\"col\">\n            <button className=\"btn btn-danger btn-sm float-right delete3b-btn float-right\" data-key=\"{{key}}\">\n                <span className=\"fas fa-trash\"></span>\n            </button>\n        </div>\n    </div>\n\n</div>\n            </> */\n    <>\n        <IPFSImporter/>\n        <BoxImporter/>\n        \n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/Import/BoxImporter.tsx",["133","134","135"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"use-subscribable\";\nimport { boxservice, ipfservice } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\n\ninterface boximporterProps {}\n\nexport const BoxImporter: React.FC<boximporterProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(boxservice.boxObjects);\n\n  boxservice.boxObjects\n    .subscribe((x) => {\n      console.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  return (\n    <>\n      <h4>3Box storage</h4>\n      <div className=\"alert alert-info\" role=\"alert\">\n        This will import the IPFS repo from a key stored in your 3Box account.\n      </div>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o) => {\n          return (\n            <div className=\"row p-1 small\">\n              <Card className=\"w-75\">\n                <Card.Body>\n                    <Card.Title>\n                  {o.key}\n                  </Card.Title>\n                  <br />\n                  IPFS: {getUrlLink(o.cid)}\n                  <br />\n                  DATE: {o.datestored}\n                  <br />\n                  DATE OF LAST COMMIT: {o.datecommit}\n                  <br />\n                  MESSAGE: {o.message}\n                  <br />\n                  COMMIT: {o.ref}\n                  <br />\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button onClick={async()=> await ipfservice.importFromCID(o.cid)} className=\"btn btn-primary btn-sm mr-2 import3b-btn\">\n                  import\n                </button>\n                <button onClick={async()=> await boxservice.deleteFrom3Box(o.key)} className=\"btn btn-danger btn-sm delete3b-btn\">\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/Import/IPFSImporter.tsx",["136"],"import React, { useState } from \"react\";\nimport { ipfservice } from \"../../App\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n  return (\n    <>\n      <div className=\"alert alert-warning\" role=\"alert\">\n        Importing files from IPFS will clear the filelist.\n      </div>\n      <div className=\"form-group\">\n        <label>IPFS CID</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button onClick={async()=>ipfservice.importFromCID(cid.value)} className=\"btn w-25 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      <hr />\n    </>\n  );\n};\n","/Users/filipmertens/code/boxtest/src/components/loaderService.ts",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":2,"column":8,"nodeType":"143","messageId":"144","endLine":2,"endColumn":12},{"ruleId":"141","severity":1,"message":"145","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":11},{"ruleId":"141","severity":1,"message":"146","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":17},{"ruleId":"141","severity":1,"message":"147","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":20},{"ruleId":"141","severity":1,"message":"148","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":46,"column":11,"nodeType":"151","messageId":"152","endLine":46,"endColumn":13},{"ruleId":"141","severity":1,"message":"153","line":5,"column":10,"nodeType":"143","messageId":"144","endLine":5,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":144,"column":35,"nodeType":"156","messageId":"157","endLine":144,"endColumn":37},{"ruleId":"154","severity":1,"message":"155","line":145,"column":29,"nodeType":"156","messageId":"157","endLine":145,"endColumn":31},{"ruleId":"149","severity":1,"message":"150","line":158,"column":45,"nodeType":"151","messageId":"152","endLine":158,"endColumn":47},{"ruleId":"141","severity":1,"message":"158","line":313,"column":11,"nodeType":"143","messageId":"144","endLine":313,"endColumn":19},{"ruleId":"154","severity":1,"message":"159","line":11,"column":20,"nodeType":"156","messageId":"160","endLine":11,"endColumn":22},{"ruleId":"154","severity":1,"message":"155","line":71,"column":17,"nodeType":"156","messageId":"157","endLine":71,"endColumn":19},{"ruleId":"154","severity":1,"message":"155","line":75,"column":17,"nodeType":"156","messageId":"157","endLine":75,"endColumn":19},{"ruleId":"161","severity":1,"message":"162","line":8,"column":53,"nodeType":"163","messageId":"152","endLine":8,"endColumn":55},{"ruleId":"164","severity":1,"message":"165","line":17,"column":12,"nodeType":"166","endLine":17,"endColumn":27},{"ruleId":"161","severity":1,"message":"162","line":8,"column":53,"nodeType":"163","messageId":"152","endLine":8,"endColumn":55},{"ruleId":"141","severity":1,"message":"167","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":26},{"ruleId":"161","severity":1,"message":"162","line":9,"column":47,"nodeType":"163","messageId":"152","endLine":9,"endColumn":49},{"ruleId":"141","severity":1,"message":"168","line":10,"column":10,"nodeType":"143","messageId":"144","endLine":10,"endColumn":14},{"ruleId":"141","severity":1,"message":"169","line":10,"column":16,"nodeType":"143","messageId":"144","endLine":10,"endColumn":23},{"ruleId":"161","severity":1,"message":"162","line":8,"column":47,"nodeType":"163","messageId":"152","endLine":8,"endColumn":49},{"ruleId":"161","severity":1,"message":"162","line":8,"column":53,"nodeType":"163","messageId":"152","endLine":8,"endColumn":55},{"ruleId":"141","severity":1,"message":"170","line":16,"column":9,"nodeType":"143","messageId":"144","endLine":16,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":21,"column":16,"nodeType":"151","messageId":"152","endLine":21,"endColumn":18},{"ruleId":"161","severity":1,"message":"162","line":9,"column":51,"nodeType":"163","messageId":"152","endLine":9,"endColumn":53},{"ruleId":"141","severity":1,"message":"171","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":19},{"ruleId":"161","severity":1,"message":"162","line":11,"column":57,"nodeType":"163","messageId":"152","endLine":11,"endColumn":59},{"ruleId":"164","severity":1,"message":"165","line":23,"column":12,"nodeType":"166","endLine":23,"endColumn":27},{"ruleId":"161","severity":1,"message":"162","line":6,"column":59,"nodeType":"163","messageId":"152","endLine":6,"endColumn":61},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Web3Modal' is defined but never used.","'getAddress' is defined but never used.","'WalletConnectProvider' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'gitservice' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'filename' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useEffect' is defined but never used.","'mock' is assigned a value but never used.","'setMock' is assigned a value but never used.","'diffFile' is assigned a value but never used.","'boxObject' is defined but never used.","no-global-assign","no-unsafe-negation"]