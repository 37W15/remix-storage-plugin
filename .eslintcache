[{"/Volumes/butbut/code/boxtest/src/index.tsx":"1","/Volumes/butbut/code/boxtest/src/reportWebVitals.ts":"2","/Volumes/butbut/code/boxtest/src/App.tsx":"3","/Volumes/butbut/code/boxtest/src/components/loaderService.ts":"4","/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts":"5","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts":"6","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts":"7","/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts":"8","/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts":"9","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts":"10","/Volumes/butbut/code/boxtest/src/components/Help.tsx":"11","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx":"12","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx":"13","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx":"14","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx":"15","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts":"16","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx":"17","/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx":"18","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx":"19","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx":"20","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx":"21","/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx":"22","/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx":"23","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx":"24","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx":"25","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx":"26","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx":"27","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx":"28","/Volumes/butbut/code/boxtest/src/components/Files/FileHelp.tsx":"29","/Volumes/butbut/code/boxtest/src/components/git/UI/GitHelp.tsx":"30","/Volumes/butbut/code/boxtest/src/components/IPFS/ExportHelp.tsx":"31","/Volumes/butbut/code/boxtest/src/components/Import/ImportHelp.tsx":"32","/Volumes/butbut/code/boxtest/src/components/IPFS/ConfigHelp.tsx":"33","/Volumes/butbut/code/boxtest/src/components/Utils.ts":"34","/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts":"35","/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts":"36","/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx":"37","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx":"38","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx":"39","/Volumes/butbut/code/boxtest/src/components/github/github.tsx":"40","/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx":"41"},{"size":523,"mtime":1622458988000,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1607789583000,"results":"44","hashOfConfig":"43"},{"size":12097,"mtime":1630233764000,"results":"45","hashOfConfig":"43"},{"size":204,"mtime":1607853812000,"results":"46","hashOfConfig":"43"},{"size":8821,"mtime":1630238213000,"results":"47","hashOfConfig":"43"},{"size":4718,"mtime":1629984072000,"results":"48","hashOfConfig":"43"},{"size":13994,"mtime":1630237715000,"results":"49","hashOfConfig":"43"},{"size":3597,"mtime":1630233576000,"results":"50","hashOfConfig":"43"},{"size":2354,"mtime":1611674750000,"results":"51","hashOfConfig":"43"},{"size":2506,"mtime":1622458988000,"results":"52","hashOfConfig":"43"},{"size":615,"mtime":1607892075000,"results":"53","hashOfConfig":"43"},{"size":4023,"mtime":1630236580000,"results":"54","hashOfConfig":"43"},{"size":1085,"mtime":1622458988000,"results":"55","hashOfConfig":"43"},{"size":4073,"mtime":1630171442000,"results":"56","hashOfConfig":"43"},{"size":466,"mtime":1630171279000,"results":"57","hashOfConfig":"43"},{"size":3565,"mtime":1611841662000,"results":"58","hashOfConfig":"43"},{"size":397,"mtime":1607792561000,"results":"59","hashOfConfig":"43"},{"size":3154,"mtime":1630232358000,"results":"60","hashOfConfig":"43"},{"size":4530,"mtime":1630171279000,"results":"61","hashOfConfig":"43"},{"size":1767,"mtime":1630171019000,"results":"62","hashOfConfig":"43"},{"size":1099,"mtime":1616403591000,"results":"63","hashOfConfig":"64"},{"size":1353,"mtime":1630236156000,"results":"65","hashOfConfig":"43"},{"size":1258,"mtime":1630157930000,"results":"66","hashOfConfig":"43"},{"size":2997,"mtime":1630161853000,"results":"67","hashOfConfig":"43"},{"size":2437,"mtime":1630169388000,"results":"68","hashOfConfig":"43"},{"size":3278,"mtime":1630171582000,"results":"69","hashOfConfig":"43"},{"size":1585,"mtime":1609755215000,"results":"70","hashOfConfig":"43"},{"size":1623,"mtime":1630172069000,"results":"71","hashOfConfig":"43"},{"size":582,"mtime":1622458988000,"results":"72","hashOfConfig":"43"},{"size":625,"mtime":1609766112000,"results":"73","hashOfConfig":"43"},{"size":793,"mtime":1622458988000,"results":"74","hashOfConfig":"43"},{"size":675,"mtime":1622458988000,"results":"75","hashOfConfig":"43"},{"size":913,"mtime":1609766127000,"results":"76","hashOfConfig":"43"},{"size":310,"mtime":1611768045000,"results":"77","hashOfConfig":"43"},{"size":33,"mtime":1622458988000,"results":"78","hashOfConfig":"43"},{"size":775,"mtime":1622458988000,"results":"79","hashOfConfig":"43"},{"size":856,"mtime":1622458988000,"results":"80","hashOfConfig":"43"},{"size":2433,"mtime":1630172464000,"results":"81","hashOfConfig":"43"},{"size":10542,"mtime":1630172434000,"results":"82","hashOfConfig":"43"},{"size":11196,"mtime":1630160155000,"results":"83","hashOfConfig":"43"},{"size":7169,"mtime":1630237185000,"results":"84","hashOfConfig":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"1j68zhh",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"87"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"87"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"87"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"87"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"87"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"87"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"87"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"87"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},"19py97w",{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"87"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"87"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"87"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"87"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"87"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"87"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"87"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"87"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"87"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"87"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"87"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"87"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"87"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"87"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"87"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"87"},"/Volumes/butbut/code/boxtest/src/index.tsx",[],["200","201"],"/Volumes/butbut/code/boxtest/src/reportWebVitals.ts",[],"/Volumes/butbut/code/boxtest/src/App.tsx",["202","203","204","205","206","207"],"import React, { useContext, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Tabs, Tab, ProgressBar, Accordion, Card, AccordionContext, Button, useAccordionToggle } from \"react-bootstrap\";\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport { FileExplorer } from \"./components/Files/FileExplorer\";\nimport { GitControls } from \"./components/git/UI/gitControls\";\n\nimport { IPFSView } from \"./components/IPFS/IPFSView\";\nimport { WorkSpacePlugin } from \"./components/Remix/Client\";\nimport { gitService } from \"./components/git/gitService\";\n\nimport { LsFileService } from \"./components/Files/FileService\";\nimport { FileTools } from \"./components/Files/FileTools\";\nimport { DiffView } from \"./components/git/diff/Diff\";\nimport { IPFSService } from \"./components/IPFS/IPFSService\";\nimport { BoxService } from \"./components/3box/3boxService\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Importer } from \"./components/Import/importer\";\nimport Loading from \"react-fullscreen-loading\";\nimport { LoaderService } from \"./components/loaderService\";\nimport { useBehaviorSubject } from \"./components/usesubscribe/index\";\nimport { Help } from \"./components/Help\";\nimport { LocalIPFSStorage } from \"./components/LocalStorage/LocalStorage\";\nimport { LocalHostWarning } from \"./components/LocalHostWarning\";\nimport { IPFSConfig } from \"./components/IPFS/IPFSConfig\";\nimport { GitStatus } from \"./components/git/UI/gitStatus\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle, faCaretDown, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FileHelp } from \"./components/Files/FileHelp\";\nimport { GitHelp } from \"./components/git/UI/GitHelp\";\nimport { ExportHelp } from \"./components/IPFS/ExportHelp\";\nimport { ImportHelp } from \"./components/Import/ImportHelp\";\nimport { ConfigHelp } from \"./components/IPFS/ConfigHelp\";\nimport { devutils } from \"./components/Utils\";\nimport { PinataConfig } from \"./components/IPFS/PinataConfig\";\nimport { GitHubImporter } from \"./components/github/github\";\nimport { CompactExplorer } from \"./components/Files/CompactExplorer\";\nimport { GitBranch } from \"./components/git/UI/gitBranch\";\nimport { GitLog } from \"./components/git/UI/gitLog\";\n\n\nexport const Utils: devutils = new devutils();\n\nexport const gitservice: gitService = new gitService();\nexport const client: WorkSpacePlugin = new WorkSpacePlugin();\nexport const fileservice: LsFileService = new LsFileService();\nexport const ipfservice: IPFSService = new IPFSService();\nexport const boxservice: BoxService = new BoxService();\nexport const loaderservice: LoaderService = new LoaderService();\nexport const localipfsstorage: LocalIPFSStorage = new LocalIPFSStorage();\n\nexport const resetFileSystem = async (wipe: boolean = false) => {\n  try {\n\n    client.clientLoaded.subscribe(async (load: boolean) => {\n      await localipfsstorage.init();\n      //if (load) await ipfservice.setipfsHost();\n      if (load) await fileservice.syncStart();\n      if (load) await ipfservice.setipfsHost();\n    });\n    return true;\n    //await fileservice.showFiles();\n  } catch (e) {\n    //Utils.log(\"FS WARNING\")\n    return false;\n  }\n};\n\nexport const providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"83d4d660ce3546299cbe048ed95b6fad\",\n      bridge: 'https://wallet-connect-bridge.dyn.plugin.remixproject.org:8080/'\n    },\n  },\n};\n\nfunction App() {\n  const [activeKey, setActiveKey] = useState<string>(\"files\");\n  const loading: boolean | undefined = useBehaviorSubject(\n    loaderservice.loading\n  );\n  const [canLoad, setCanLoad] = useState<boolean>(false);\n  const repoName = useBehaviorSubject(gitservice.reponameSubject);\n  const storageUsed = useBehaviorSubject(gitservice.storageUsed);\n  const canCommit = useBehaviorSubject(gitservice.canCommit);\n  const canUseApp = useBehaviorSubject(fileservice.canUseApp);\n  const [confirmShow, setConfirmShow] = React.useState(false);\n  const [compact, setCompact] = useState<boolean>(false)\n  const [diffViewer, setDiffViewer] = useState<boolean>(false)\n\n  const maxStorage: number = 10000;\n\n  gitservice.reponameSubject.subscribe((x) => { }).unsubscribe();\n  gitservice.canCommit.subscribe((x) => { }).unsubscribe();\n  loaderservice.loading.subscribe((x) => { }).unsubscribe();\n  fileservice.canUseApp.subscribe((x) => { }).unsubscribe();\n\n  const setTab = async (key: string) => {\n    setActiveKey(key);\n    if (key == \"diff\") {\n      //loaderservice.setLoading(true);\n      await gitservice.diffFiles('');\n      //loaderservice.setLoading(false);\n    }\n  };\n\n  const storageVariant = () => {\n    const percentageUsed = parseFloat(storageUsed || '0') / maxStorage * 100\n    let variant = 'success'\n    if (percentageUsed > 50) variant = 'warning'\n    if (percentageUsed > 80) variant = 'danger'\n    return variant\n  }\n\n  useEffect(() => {\n    console.log(window.location.href)\n    if (window.location.href.includes('compact')) {\n      setCompact(true)\n    }\n    if (window.location.href.includes('diff')) {\n      setDiffViewer(true)\n    }\n    resetFileSystem(false).then((x) => setCanLoad(x));\n  }, []);\n\n  function CustomToggle(ob: any) {\n\n    const currentEventKey = useContext(AccordionContext);\n    const isCurrentEventKey = currentEventKey === ob.eventKey\n    const decoratedOnClick = useAccordionToggle(\n      ob.eventKey,\n      () => ob.callback && ob.callback(ob.eventKey),\n    );\n\n\n    return (\n      <>\n        <div onClick={decoratedOnClick} className='w-100 list-group-item p-0 pointer'>\n          <Accordion.Toggle eventKey={ob.eventKey}\n            as={Button}\n            variant=\"link\"\n          >\n            {ob.children}\n          </Accordion.Toggle>\n          {\n            isCurrentEventKey ? <FontAwesomeIcon className='ml-2 mr-2 mt-2 float-right' icon={faCaretUp}></FontAwesomeIcon> : <FontAwesomeIcon className='ml-2 mr-2 mt-2 float-right' icon={faCaretDown}></FontAwesomeIcon>\n          }\n        </div>\n        <hr></hr>\n      </>\n    );\n  }\n\n\n  return (\n    <div className=\"App\">\n      {!canUseApp ? (\n        <LocalHostWarning canLoad={canUseApp} />\n      ) : (\n        diffViewer? <>\n          <Container fluid>\n            \n            <h4 className='mt-3'>dGit Diff viewer</h4>\n            <DiffView />\n          </Container>\n        \n        </>:\n\n        (<Container fluid>\n          {loading ? (\n            <Loading loading background=\"#2ecc71\" loaderColor=\"#3498db\" />\n          ) : (\n            <></>\n          )}\n          <FontAwesomeIcon icon={faExclamationTriangle}></FontAwesomeIcon><a className='small pl-2' href='https://github.com/bunsenstraat/remix-storage-plugin/issues' target='_blank'>Submit issues</a>\n          <div className=\"nav navbar bg-light p-3\"><div><div className=\"float-left pr-1 m-0\">dGit</div> | repo: {repoName} | storage: {storageUsed}KB / 10000KB</div></div>\n          <ProgressBar variant={storageVariant()} label=\"storage used\" now={parseFloat(storageUsed || '0')} min={0} max={10000} />\n          {compact ? <><hr></hr></>:<GitStatus></GitStatus>}\n          {canCommit ? (\n            <></>\n          ) : (\n            <div className=\"alert alert-warning w-md-25 w-100\">\n              You are in a detached state.<br></br>\n            </div>\n          )}\n          <ToastContainer position={compact ? \"bottom-right\" : \"top-right\"} />\n          {compact ?\n\n            <Accordion defaultActiveKey=\"0\">\n              <CustomToggle eventKey=\"0\">Files</CustomToggle>\n              <Accordion.Collapse eventKey=\"0\">\n                <>\n                  <GitControls compact={true} />\n                  <CompactExplorer />\n                  <hr></hr>\n                  <FileTools />\n                  <hr></hr>\n                </>\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"1\">GitHub</CustomToggle>\n              <Accordion.Collapse eventKey=\"1\">\n                <GitHubImporter />\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"3\">Log</CustomToggle>\n              <Accordion.Collapse eventKey=\"3\">\n                <>\n                  <GitLog /><hr></hr>\n                </>\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"2\">Branch</CustomToggle>\n              <Accordion.Collapse eventKey=\"2\">\n                <>\n                  <GitBranch /><hr></hr></>\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"4\">Export</CustomToggle>\n              <Accordion.Collapse eventKey=\"4\">\n                <>\n                  <IPFSView />\n                  <hr></hr>\n                  <FileTools />\n                </>\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"5\">Import</CustomToggle>\n              <Accordion.Collapse eventKey=\"5\">\n                <Importer />\n              </Accordion.Collapse>\n              <CustomToggle eventKey=\"6\">Settings</CustomToggle>\n              <Accordion.Collapse eventKey=\"6\">\n                <>\n                  <PinataConfig></PinataConfig>\n                  <IPFSConfig />\n                </>\n              </Accordion.Collapse>\n\n            </Accordion> :\n\n            <Tabs\n              activeKey={activeKey}\n              onSelect={async (k) => await setTab(k || \"files\")}\n            >\n              <Tab className=\"mt-4 ml-1\" eventKey=\"files\" title=\"FILES\">\n                <FileExplorer setTab={setTab} />\n                <FileTools />\n                <FileHelp />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"git\" title=\"GIT\">\n                <GitControls compact={false} />\n                <br /><hr />\n                <GitLog />\n                <br /><hr />\n                <GitBranch />\n                <GitHelp />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"github\" title=\"GITHUB\">\n                <GitHubImporter />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"export\" title=\"EXPORT\">\n                <IPFSView />\n                <ExportHelp />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"import\" title=\"IMPORT\">\n                <Importer />\n                <ImportHelp></ImportHelp>\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"diff\" title=\"DIFF\">\n                <DiffView />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"config\" title=\"SETTINGS\">\n                <PinataConfig></PinataConfig>\n                <IPFSConfig />\n                <ConfigHelp />\n              </Tab>\n              <Tab className=\"mt-4 ml-1\" eventKey=\"help\" title=\"HELP\">\n                <Help />\n              </Tab>\n            </Tabs>}\n        </Container>)\n      )}\n    </div>\n  );\n}\n\n// Hook\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<any>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any | ((val: any) => any)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue] as const;\n}\n\nexport default App;\n","/Volumes/butbut/code/boxtest/src/components/loaderService.ts",[],"/Volumes/butbut/code/boxtest/src/components/Files/FileService.ts",["208","209","210","211","212","213","214","215","216","217"],"/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSService.ts",["218","219","220"],"import IpfsHttpClient from \"ipfs-http-client\";\nimport { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { resetFileSystem, fileservice, gitservice, ipfservice, loaderservice, client, Utils } from \"../../App\";\n\nexport interface ipfsConfig {\n  host: string;\n  port: number;\n  protocol: string;\n  ipfsurl?: string;\n}\n\nexport interface ipfsFileObject {\n  path: string;\n  content: string;\n}\n\nexport class IPFSService {\n  ipfsconfig: ipfsConfig = {\n    host: process.env.REACT_APP_DEFAULT_IPFS_HOST || \"\",\n    port: parseInt(process.env.REACT_APP_DEFAULT_IPFS_PORT || \"0\"),\n    protocol: process.env.REACT_APP_DEFAULT_IPFS_PROTOCOL || \"\",\n    ipfsurl: process.env.REACT_APP_DEFAULT_IPFS_GATEWAY || \"\",\n  };\n\n  pinataConfig = {\n    key: \"\",\n    secret: \"\"\n  }\n\n  filesToSend: ipfsFileObject[] = [];\n  cid: string = \"\";\n  cidBehavior = new BehaviorSubject<string>(\"\");\n  connectionStatus = new BehaviorSubject<boolean>(false)\n  pinataConnectionStatus = new BehaviorSubject<boolean>(false)\n  \n  async getipfsurl() {\n    return this.ipfsconfig.ipfsurl;\n    //return $(\"#IPFS-url\").val() != \"\" ? $(\"#IPFS-url\").val() : false || ipfsurl;\n  }\n\n  async setipfsHost() {\n    Utils.log(this.ipfsconfig)\n    try {\n      const c = await client.call(\"dGitProvider\", \"setIpfsConfig\", this.ipfsconfig ) \n      Utils.log(c)\n      this.connectionStatus.next(c)\n      return true;\n    } catch (e) {\n      Utils.log(e)\n      toast.error(\n        \"There was an error connecting to IPFS, please check your IPFS settings if applicable.\"\n      );\n      this.connectionStatus.next(false)\n      loaderservice.setLoading(false)\n      return false;\n    }\n  }\n\n  async addFilesToPinata(){\n    loaderservice.setLoading(true)\n    try{\n      let result = await client.call(\"dGitProvider\" as any, \"pin\",this.pinataConfig.key,this.pinataConfig.secret);\n      this.cid = result;\n      this.cidBehavior.next(this.cid);\n      toast.success(`You files were uploaded to Pinata IPFS`);\n      loaderservice.setLoading(false)\n      this.pinataConnectionStatus.next(false)\n      this.pinataConnectionStatus.next(true)\n    }catch(err){\n      toast.error(\n        \"There was an error uploading to Pinata, please check your Pinata settings.\"\n      );\n      toast.error(\"There was an error uploading to Pinata!\",{autoClose:false});\n      loaderservice.setLoading(false)\n    }\n  }\n\n  async addToIpfs() {\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    loaderservice.setLoading(true)\n    try {\n      const result = await client.call('dGitProvider', 'export' as any)\n      Utils.log(result)\n      this.cid = result;\n      this.cidBehavior.next(this.cid);\n      toast.success(`You files were uploaded to IPFS`);\n      loaderservice.setLoading(false)\n    } catch (e) {\n      toast.error(\n        \"There was an error uploading to IPFS, please check your IPFS settings if applicable.\"\n      );\n      toast.error(\"There was an error uploading to IPFS!\",{autoClose:false});\n      loaderservice.setLoading(false)\n      //Utils.log(e);\n    }\n\n    return true;\n  }\n\n  async addAndOpenInVscode(){\n    await this.addToIpfs()\n    window.open(`vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${this.cid}`)\n    return `vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${this.cid}`;\n  }\n\n  async importFromCID(cid: string | undefined, name:string = \"\", local:boolean = false) {\n    toast.dismiss()\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    if (cid !== undefined) {\n      //Utils.log(\"cid\", cid);\n      this.cid = cid;\n      //$(\"#ipfs\").val(ipfservice.cid);\n      await ipfservice.clone(local);\n    }\n  }\n\n  async clone(local:boolean) {\n    await client.disableCallBacks()\n    loaderservice.setLoading(true)\n    const connect = await this.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\",{autoClose:false}); return false;}\n    const cid = this.cid;\n    //Utils.log(cid);\n    if (cid === \"\" || typeof cid == \"undefined\" || !cid) {\n      return false;\n    }\n    try {\n      await client.call('dGitProvider', 'import' as any, {cid:cid, local:local})\n      loaderservice.setLoading(false)\n      //await fileservice.syncToBrowser();\n      await fileservice.syncStart()\n    } catch (e) {\n      loaderservice.setLoading(false)\n      await client.enableCallBacks()\n      console.log(e.message)\n      toast.error(e.message,{autoClose:false});\n      toast.error('Sometimes the IPFS data is not yet available. Please try again later.',{autoClose:false});\n    }\n    \n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/git/gitService.ts",["221","222","223","224"],"/Volumes/butbut/code/boxtest/src/components/Remix/Client.ts",[],"/Volumes/butbut/code/boxtest/src/components/3box/3boxService.ts",["225","226"],"import { toast } from \"react-toastify\";\nimport { BehaviorSubject } from \"rxjs\";\nimport {\n  gitservice,\n  ipfservice,\n  loaderservice,\n  localipfsstorage,\n  Utils,\n} from \"../../App\";\n\nexport interface boxObject {\n  key?: string;\n  cid?: string;\n  datestored?: string | number | Date;\n  datecommit?: number | string | Date;\n  timestamp: number;\n  ref?: string;\n  message?: string;\n  links?: string;\n}\nexport class BoxService {\n  status = new BehaviorSubject<boolean>(false);\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  box: any;\n  space: any;\n\n  showspinner() {}\n\n  hidespinner() {}\n  // 3BOX connection\n\n  async setSpace(space: any) {\n    this.space = space;\n  }\n\n  async getStatus() {}\n\n  async storeHashIn3Box(space: any) {\n    const connect = await ipfservice.setipfsHost()\n    if(!connect){toast.error(\"Unable to connect to IPFS check your settings.\", {autoClose:false}); return false;}\n    if (typeof this.space == \"undefined\") {\n      toast.error(\"You should connect to 3Box first\", {autoClose:false});\n      return false;\n    }\n    loaderservice.setLoading(true);\n    await ipfservice.addToIpfs();\n    //Utils.log(\"export 3box\", ipfservice.cid, this.space);\n\n    try {\n      const ob = await localipfsstorage.createBoxObject();\n\n      await this.space.private.set(ob.key, ob);\n      toast.success(\"Stored in 3box\");\n      await this.getObjectsFrom3Box(space);\n      loaderservice.setLoading(false);\n    } catch (e) {}\n  }\n\n  async getObjectsFrom3Box(space: any) {\n    //Utils.log(\"get objects from box\");\n    const hashes: boxObject[] = await space.private.all();\n    let vals = Object.values(hashes)\n    vals = await this.filterNulls(vals)\n    //Utils.log(vals)\n    vals.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n    this.boxObjects.next(vals);\n    //Utils.log(hashes);\n    return Object.values(hashes);\n  }\n\n  async filterNulls(objects: boxObject[]) {\n    var filtered = objects.filter(function (el) {\n      return el.timestamp != null && el.timestamp!== undefined;\n    });\n    return filtered;\n  }\n\n  async deleteFrom3Box(args: string | undefined) {\n    if (args !== undefined) {\n      const key = args;\n      //Utils.log(\"key\", key);\n      loaderservice.setLoading(true);\n      await this.space.private.remove(key);\n      await this.getObjectsFrom3Box(this.space);\n      loaderservice.setLoading(false);\n    }\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalStorage.ts",["227","228"],"import { BehaviorSubject } from \"rxjs\";\nimport { client, gitservice, ipfservice, Utils } from \"../../App\";\nimport { boxObject } from \"../3box/3boxService\";\nimport { default as dateFormat } from 'dateformat'\nimport { toast } from \"react-toastify\";\nexport class LocalIPFSStorage {\n  boxObjects = new BehaviorSubject<boxObject[] | []>([]);\n  objects: any[] = [];\n\n  async init() {\n    try {\n      await this.read();\n    } catch (e) {\n      //Utils.log(e);\n      await this.write();\n    }\n  }\n\n  async read() {\n    try{\n      let r = await client.call('dGitProvider','getItem','dgit-ipfs')\n      this.objects = r? JSON.parse(r):[];\n      this.objects.sort((a, b) => (a.timestamp > b.timestamp) ? -1 : 1)\n      this.objects = await this.filterNulls();\n      //Utils.log(\"READ CONFIG\",this.objects);\n      this.boxObjects.next(this.objects);\n    }catch(e){\n\n    }\n  }\n\n  async write() {\n    try{\n      await client.call('dGitProvider','setItem','dgit-ipfs', JSON.stringify(await this.filterNulls()) )\n    }catch(e){\n      \n    }\n  }\n\n  async addToStorage(box: boxObject) {\n    await this.init();\n    await this.deleteFromStorage(box.cid)\n    this.objects.push(box);\n    await this.write();\n    await this.read();\n  }\n\n  async filterNulls() {\n    var filtered = this.objects.filter(function (el) {\n      return el != null;\n    });\n    return filtered;\n  }\n\n  async deleteFromStorage(cid: string | undefined) {\n    if (cid !== undefined) {\n      await this.read();\n      this.objects = this.objects.filter((i) => i.cid !== cid);\n      await this.write();\n      await this.read();\n    }\n  }\n\n  async createBoxObject() {\n    await this.init();\n    try{\n      const commits = await gitservice.getCommits();\n      let key = gitservice.reponame;\n      let ob: boxObject = {\n        key: key,\n        cid: ipfservice.cid,\n        datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        datecommit: dateFormat(new Date(commits[0].commit.committer.timestamp * 1000), \"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        timestamp: Date.now(),\n        ref: commits[0].oid,\n        message: commits[0].commit.message,\n      };\n      return ob;\n    }catch(e){\n      let key = gitservice.reponame;\n      let ob: boxObject = {\n        key: key,\n        cid: ipfservice.cid,\n        datestored: dateFormat(new Date(),\"dddd, mmmm dS, yyyy, h:MM:ss TT\"),\n        datecommit: \"no commits\",\n        timestamp: Date.now(),\n        ref: \"no commits\",\n        message: \"no commits\",\n      };\n      return ob;\n    }\n\n  }\n}\n","/Volumes/butbut/code/boxtest/src/components/Help.tsx",["229"],"import React, { useEffect, useState } from 'react'\nimport marked from \"marked\";\ninterface HelpProps {\n\n}\n\nexport const Help: React.FC<HelpProps> = ({}) => {\n    const [markdown,setMarkdown] = useState(\"\")\n    useEffect(()=>{\n        fetch(\"https://raw.githubusercontent.com/bunsenstraat/remix-storage-plugin/master/README.md\").then(response => {\n            return response.text()\n          })\n          .then(text => {\n            setMarkdown(text)\n          })\n    },[])\n    return (\n        <section>\n          <article dangerouslySetInnerHTML={{__html: marked(markdown)}}></article>\n        </section>\n      )\n}","/Volumes/butbut/code/boxtest/src/components/Files/FileExplorer.tsx",["230","231","232","233","234"],"import React, { useState } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { fileservice, gitservice, Utils } from \"../../App\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faFolderPlus,\n  faFolderMinus,\n  faFolderOpen,\n  faFolder,\n  faSync\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faFileAlt,\n  faFile\n}from \"@fortawesome/free-regular-svg-icons\"\nimport \"./FileExplorer.css\";\nimport { fileExplorerNode } from \"./types\";\nimport { StatusButtons } from \"./statuses\";\nimport { FileButtons } from \"./Buttons\";\n\ninterface FileExplorerProps {\n  setTab: (key: string) => void;\n}\n\nexport const FileExplorer: React.FC<FileExplorerProps> = (props) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  const [fileVisibility, setfileVisibility] = useState<Record<string, boolean>>(\n    {}\n  );\n  const [render, setRender] = useState({});\n\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"SUB FILES\", files);\n    })\n    .unsubscribe();\n\n  const getFileStatus = function (file: fileExplorerNode) {\n    let result = fileservice.getFileStatusForFile(file.fullname || \"\");\n    //Utils.log(\"file status\", file, result);\n    return <StatusButtons statuses={result} />;\n  };\n\n  const handleClick = async (files: fileExplorerNode) => {\n    if (files.type !== \"dir\") {\n      await fileservice.viewFile(files.fullname);\n    } else {\n      await toggleVisibility(files);\n    }\n  };\n\n  const toggleVisibility = async (files: fileExplorerNode) => {\n    let v = fileVisibility;\n    files.collapse = !files.collapse;\n    ////Utils.log(\"toggle\", files);\n\n    if (files.fullname && v) {\n      v[files.fullname] = files.collapse;\n      setfileVisibility(v);\n      ////Utils.log(v);\n      setRender({});\n    }\n  };\n\n  const getVisisbilityForNode = (files: fileExplorerNode) => {\n    let v = fileVisibility;\n    if (files.fullname && v) {\n      if (v[files.fullname]) {\n        files.collapse = v[files.fullname];\n      }\n    }\n    return files.collapse;\n  };\n\n  const renderChildren = function (files: fileExplorerNode) {\n    return (\n      <li className={`${files.type === \"file\" ? \"fileborder\" : \"\"}`}>\n        {files.type === `dir` ? (\n          <FontAwesomeIcon\n            onClick={async () => await toggleVisibility(files)}\n            icon={getVisisbilityForNode(files) ? faFolder : faFolderOpen}\n            style={{ cursor: \"pointer\" }}\n          />\n        ) : (\n          <FontAwesomeIcon icon={faFile} />\n        )}\n        <span className=\"pr-1\" />\n        <span\n          style={{ cursor: \"pointer\" }}\n          onClick={async () => await handleClick(files)}\n        >\n          {files.fullname === \"/\"?gitservice.reponame:files.name}\n        </span>\n        {files.type === `dir` ? (\n          <span className=\"status float-right ml-3\">\n            <div\n              className={\"badge badge-primary addgit\"}\n              onClick={async () => await gitservice.addToGit(files.fullname)}\n            >\n              {files.fullname === \"/\"?\"git add -A\":\"git add\"}\n            </div>\n          </span>\n        ) : (\n          \"\"\n        )}\n        {(files || { children: [] }).children?.map((x: any) => {\n          return (\n            <ul\n              className={`${files.collapse ? \"d-none\" : \"d-block\"}`}\n              key={x.id}\n              id=\"filetree\"\n            >\n              {renderChildren(x)}\n            </ul>\n          );\n        })}\n\n        <FileButtons setTab={props.setTab} file={files} />\n        {getFileStatus(files)}\n      </li>\n    );\n  };\n\n  return (\n    <>\n      {(files || { children: [] }).children?.map((x: any) => {\n        return (\n          <>\n          <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary mb-4'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n          <ul className=\"mw-50 basefiletree\" key={x.id} id=\"filetree\">\n            {renderChildren(x)}\n          </ul>\n          </>\n        );\n      })}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/FileTools.tsx",["235","236","237","238","239","240"],"import React, { createRef } from \"react\";\nimport { fileservice, gitservice, ipfservice, localipfsstorage, resetFileSystem, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFileArchive } from \"@fortawesome/free-regular-svg-icons\"\nimport { faCloudDownloadAlt } from \"@fortawesome/free-solid-svg-icons\"\ninterface FileToolsProps {}\n\nexport const FileTools: React.FC<FileToolsProps> = ({}) => {\n  let ModalRef = createRef<ConfirmDelete>();\n\n  const clearAll = async () => {\n    try {  \n      await ModalRef.current?.show()\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <div onClick={async ()=> gitservice.zip()} className='btn btn-primary mb-3'>download as zip <FontAwesomeIcon icon={faFileArchive}></FontAwesomeIcon></div><br></br>\n      <div hidden onClick={async ()=> ipfservice.addAndOpenInVscode()} className='btn btn-primary'>clone in VSCode <FontAwesomeIcon icon={faCloudDownloadAlt}></FontAwesomeIcon></div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSView.tsx",["241","242","243","244","245"],"import React, { Suspense, useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport {\n  boxservice,\n  gitservice,\n  ipfservice,\n  localipfsstorage,\n  Utils,\n} from \"../../App\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\ninterface IPFSViewProps {}\n\nexport const IPFSView: React.FC<IPFSViewProps> = () => {\n  const cid = useBehaviorSubject(ipfservice.cidBehavior);\n  const boxconnected = useBehaviorSubject(boxservice.status);\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  const PinataStatus = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  const canExport = useBehaviorSubject(gitservice.canExport);\n\n  ipfservice.pinataConnectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  ipfservice.cidBehavior.subscribe((x) => {}).unsubscribe();\n  boxservice.status.subscribe((x) => {}).unsubscribe();\n  gitservice.canExport.subscribe((x) => {}).unsubscribe();\n\n  const getUrlLink = () => {\n    if (cid !== \"\" && cid !== undefined && cid) {\n      //Utils.log(ipfservice.cid);\n      return (\n        <>\n          <div className='overflow-hidden w-100'>IPFS Hash: {ipfservice.cid}</div>\n          <br></br>\n          <CopyToClipboard\n            text={ipfservice.cid}\n            onCopy={() => {\n              toast.success(\"Copied to clipboard.\");\n            }}\n          >\n            <button className=\"btn btn-primary mb-2\">Copy to clipboard</button>\n          </CopyToClipboard>\n          <br></br>\n          <a className=\"btn btn-primary mb-2\" target=\"_blank\" href={getUrl()} id=\"CID\">\n            View files\n          </a>\n          <br></br>\n          <a className=\"btn btn-primary\" target=\"_blank\" href={getVscodeUrl()} hidden id=\"VSCODE\">\n            Clone in VSCode\n          </a>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  useEffect(() => {\n    //Utils.log(\"export view\");\n    //ipfservice.setipfsHost();\n  }, []);\n\n  const addFilesToIpfs = async () => {\n    try {\n      await ipfservice.addToIpfs();\n      await localipfsstorage.addToStorage(\n        await localipfsstorage.createBoxObject()\n      );\n    } catch (e) {}\n  };\n\n  const addFilesToPinata = async () =>{\n    try {\n      await ipfservice.addFilesToPinata();\n    } catch (e) {}\n  }\n\n  const getUrl = () => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const getVscodeUrl = () =>{\n    return `vscode://${process.env.REACT_APP_REMIX_EXTENSION}/pull?cid=${cid}`;\n  }\n\n  return (\n    <>\n\n      {canExport ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-danger w-md-25 w-100 mt-2\" role=\"alert\">\n          Commit some files first, then you can export.\n        </div>\n      )}\n       <h4>Export to Pinata Cloud</h4>\n       {PinataStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your Pinata API key is incorrect or missing. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(PinataStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToPinata()}\n      >\n        Export to Pinata\n      </button>\n      <hr></hr>\n      <h4>Export to Local storage & IPFS</h4>\n      {IPFSStatus ? (\n        <></>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n      <button\n        disabled={(IPFSStatus ? false : true) || (canExport ? false : true)}\n        className=\"btn w-md-25 w-100 btn-primary\"\n        id=\"main-btn\"\n        onClick={async () => await addFilesToIpfs()}\n      >\n        Export to custom IPFS & store in local storage\n      </button>\n\n      <br />\n      <div id=\"ipfsAlert\" role=\"alert\"></div>\n      <br />\n      {getUrlLink()}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/importer.tsx",["246","247","248"],"import React from \"react\";\nimport { async } from \"rxjs\";\nimport { gitservice } from \"../../App\";\nimport { LocalIPFSView } from \"../LocalStorage/LocalIPFSView\";\n\nimport { IPFSImporter } from \"./IPFSImporter\";\nimport { PinataImport } from \"./PinataImport\";\n\n\n\ninterface importerProps {}\n\nexport const Importer: React.FC<importerProps> = ({}) => {\n  return (\n    <>\n        <IPFSImporter/>\n        <PinataImport></PinataImport>\n        <LocalIPFSView/>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/utils.ts",["249","250","251","252","253"],"import path from \"path\";\nimport { isForOfStatement } from \"typescript\";\nimport { Utils } from \"../../App\";\nimport { fileExplorerNode } from \"./types\";\n\nexport const removeSlash = (s: string) => {\n  return s.replace(/^\\/+/, \"\");\n};\n\nexport const jsonObjectFromFileList = (files: string[]) => {\n  const ob: fileExplorerNode[] = [];\n  // reindex filelist\n\n  //Utils.log(\"F\", files);\n\n  files.map((f, i) => {\n    files[i] = Utils.addSlash(files[i]);\n    const dirname = path.dirname(files[i]);\n    //Utils.log(dirname, dirname.startsWith(\"/.\"));\n    if (dirname.startsWith(\"/.\")) return true;\n    const basename = path.basename(files[i]);\n    const directories = removeSlash(dirname).split(\"/\");\n    let node: fileExplorerNode;\n    if (\n      !ob.find((x) => {\n        return x.fullname === dirname;\n      })\n    ) {\n      node = {\n        type: \"dir\",\n        dir: true,\n        file: false,\n        name: directories.pop(),\n        fullname: dirname,\n        parentDir: path.dirname(dirname),\n      };\n      ob.push(node);\n    }\n\n    //Utils.log(ob);\n\n    let previouspath = \"\";\n    for (let i = 0; i < directories.length; i++) {\n      if (i > 0) previouspath = \"/\" + directories.slice(0, i).join(\"/\");\n      const finalPath = previouspath + \"/\" + directories[i];\n      if (\n        !ob.find((x) => {\n          return x.fullname === finalPath;\n        })\n      ) {\n        node = {\n          type: \"dir\",\n          dir: true,\n          file: false,\n          name: directories[i],\n          fullname: finalPath,\n          parentDir: path.dirname(finalPath),\n        };\n        ob.push(node);\n      }\n    }\n    if (\n      !ob.find((x) => {\n        return x.fullname === files[i];\n      })\n    ) {\n      node = {\n        type: \"file\",\n        file: true,\n        dir: false,\n        name: basename,\n        fullname: files[i],\n        directory: dirname,\n        status: [],\n      };\n      ob.push(node);\n    }\n  });\n  // asign ids\n  ob.map((f, i) => {\n    f.id = i;\n  });\n  // find parents\n  ob.map((f, i) => {\n    f.parentId = null;\n    f.children = null;\n    if (f.type === \"file\") {\n      // f.parent\n\n      const parent = ob.find((x) => {\n        return x.fullname === f.directory && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n    } else {\n      ////Utils.log(f)\n      const parent = ob.find((x) => {\n        return x.fullname === f.parentDir && x.type === \"dir\";\n      });\n      f.parentId = parent ? parent.id : null;\n      if (f.fullname === \"/\") f.parentId = null;\n    }\n  });\n  //Utils.log(\"build tree from\", ob.sort(sortbydirectorylevel));\n  // first we need it sorted\n  //Utils.log(\"OB\", ob);\n  //ob.sort(sortbydirectorylevel)\n\n  const nest = (items: any, id: any = null, link = \"parentId\") =>\n    items\n      .filter((item: any) => item[link] === id)\n      .map((item: any) => ({\n        ...item,\n        children: nest(items, item.id),\n      }));\n\n  //Utils.log(\"build tree from\", ob);\n\n  let t: fileExplorerNode[] = nest(ob);\n\n  let result: fileExplorerNode = {\n    children: t,\n  };\n  //Utils.log(\"OB\", ob);\n  return result;\n};\n\nconst sortbydirectorylevel = (a: any, b: any) => {\n  ////Utils.log(a,b);\n  if (a.fullname.split(\"/\").length < b.fullname.split(\"/\").length) {\n    return -1;\n  }\n  if (a.fullname.split(\"/\").length > b.fullname.split(\"/\").length) {\n    return 1;\n  }\n  return 0;\n};\n\n\nexport const arrayUnique = (array:any)=>{\n  var a = array.concat();\n  for(var i=0; i<a.length; ++i) {\n      for(var j=i+1; j<a.length; ++j) {\n          if(a[i] === a[j])\n              a.splice(j--, 1);\n      }\n  }\n\n  return a;\n}","/Volumes/butbut/code/boxtest/src/components/Files/statuses.tsx",[],"/Volumes/butbut/code/boxtest/src/components/Files/Buttons.tsx",["254","255","256","257"],"import React from \"react\";\nimport { client, fileservice, gitservice, Utils } from \"../../App\";\nimport \"./FileExplorer.css\";\nimport { fileExplorerNode } from \"./types\";\ninterface FileButtonsProps {\n  file: fileExplorerNode;\n  setTab: (key: string) => void;\n}\n\nexport const FileButtons: React.FC<FileButtonsProps> = ({\n  file,\n  setTab,\n}: FileButtonsProps) => {\n  const diffFile = (file: fileExplorerNode) => {\n    gitservice.diffFiles('');\n    ///setTab(\"diff\")\n  };\n\n  const gitaddButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    ////Utils.log(\"file status\", status, status?.indexOf(\"with unstaged changes\"));\n    if (\n      (status?.indexOf(\"deleted\") === -1 &&\n        status?.indexOf(\"unmodified\") === -1 &&\n        status?.indexOf(\"staged\") === -1) ||\n      status?.indexOf(\"with unstaged changes\") !== -1\n    ) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.addToGit(file.fullname)}\n        >\n          git add\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>git add</div>;\n    }\n  };\n\n  const giteditButton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await fileservice.viewFile(file.fullname)}\n        >\n          edit\n        </div>\n      );\n    } else {\n      return <div className={\"badge badge-secondary addgit\"}>edit</div>;\n    }\n  };\n\n  const gitrmbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (status?.indexOf(\"deleted\") === -1) {\n      return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n    } else {\n      if (status?.indexOf(\"staged\") === -1) {\n        return (\n          <div\n            className={\"badge badge-primary addgit\"}\n            onClick={async () => await gitservice.gitrm(file.fullname)}\n          >\n            git rm\n          </div>\n        );\n      } else {\n        return <div className={\"badge badge-secondary addgit\"}>git rm</div>;\n      }\n    }\n  };\n\n  const checkoutbutton = (file: fileExplorerNode) => {\n    let status = fileservice.getFileStatusForFile(file.fullname || \"\");\n    if (\n      status?.indexOf(\"modified\") === -1 &&\n      (status?.indexOf(\"deleted\") === -1 ||\n        status?.indexOf(\"staged\") ||\n        status?.indexOf(\"unstaged\"))\n    ) {\n      return <div className={\"badge badge-secondary addgit\"}>git checkout</div>;\n    } else {\n      return (\n        <div\n          className={\"badge badge-primary addgit\"}\n          onClick={async () => await gitservice.checkoutfile(file.fullname)}\n        >\n          git checkout\n        </div>\n      );\n    }\n  };\n\n  if (file.type === \"file\") {\n    return (\n      <span className=\"status float-right ml-3\">\n        {gitaddButton(file)}\n        {gitrmbutton(file)}\n        {checkoutbutton(file)}\n      </span>\n    );\n  } else {\n    return <></>;\n  }\n};\n","/Volumes/butbut/code/boxtest/src/components/LocalStorage/LocalIPFSView.tsx",["258","259","260","261","262"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, localipfsstorage, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\ninterface LocalIPFSViewProps {}\n\nexport const LocalIPFSView: React.FC<LocalIPFSViewProps> = ({}) => {\n  const boxobjects = useBehaviorSubject(localipfsstorage.boxObjects);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  useEffect(() => {\n    //localipfsstorage.init();\n  }, []);\n\n  localipfsstorage.boxObjects\n    .subscribe((x) => {\n      //Utils.log(\"box objects\", x);\n    })\n    .unsubscribe();\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a className=\"btn btn-primary btn-sm mr-2\" target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid,name, true)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteItem = async(o:any) =>{\n    try {\n      await EraseModalRef.current?.show();\n      await localipfsstorage.deleteFromStorage(o?.cid)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  }\n\n  return (\n    <>\n      <h4>Import from Local Storage</h4>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <ConfirmDelete title={\"Deleting\"} text={\"Are you sure you want to erase this item?\"} ref={EraseModalRef}></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(boxobjects || []).map((o, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <Card className=\"w-md-75 w-100\">\n                <Card.Body>\n                  <h5>{o.key}</h5>\n                  <div className=\"row\">\n                    <div className=\"col\">IPFS</div>\n                    <div className=\"col\">{o.cid}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE EXPORTED</div>\n                    <div className=\"col\">{o.datestored}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">DATE OF LAST COMMIT</div>\n                    <div className=\"col\">{o.datecommit}</div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col\">MESSAGE</div>\n                    <div className=\"col\">{o.message}</div>\n                  </div>\n                </Card.Body>\n              </Card>\n              <div className=\"col\">\n                <button\n                  onClick={async () => await importFromCID(o.cid, o.key)}\n                  className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                >\n                  import\n                </button>\n               {getViewButton(o.cid)}\n                <button\n                  onClick={async () =>\n                    await deleteItem(o)\n                  }\n                  className=\"btn btn-danger btn-sm delete3b-btn\"\n                >\n                  <FontAwesomeIcon icon={faTrash} />\n                </button>\n                <br></br>\n                  <CopyToClipboard\n            text={o.cid || \"\"}\n            onCopy={() => {\n              toast.success(\"Copied to clipboard.\");\n            }}\n          >\n            <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash to clipboard</button>\n          </CopyToClipboard>\n              </div>\n            </div>\n          );\n        })}\n        {boxobjects?.length===0?<>Nothing has been stored here yet.</>:<></>}\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/IPFSImporter.tsx",["263","264"],"import React, { createRef, useState } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { ipfservice, Utils } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\n\ninterface ipfsimporterProps {}\n\nexport const IPFSImporter: React.FC<ipfsimporterProps> = ({}) => {\n  const [cid, setCID] = useState({ value: \"\" });\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus)\n  let ModalRef = createRef<ConfirmDelete>();\n  ipfservice.connectionStatus.subscribe((x)=>{}).unsubscribe(); \n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCID({ value: e.currentTarget.value });\n  };\n\n\n  const importFromCID = async (cid: string | undefined, name:string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n      await ipfservice.importFromCID(cid,name,false)\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <ConfirmDelete title={\"Importing\"} text={\"This will create a new workspace! Continue?\"} ref={ModalRef}></ConfirmDelete>\n      <div className=\"form-group\">\n        <h4>Import from IPFS hash</h4>\n        <label>IPFS HASH</label>\n        <input onChange={handleChange} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n      </div>\n      <div id=\"ipfsimportalert\"></div>\n      <button disabled={(IPFSStatus?false:true)||(cid.value===\"\"?true:false)} onClick={async()=> await importFromCID(cid.value, cid.value)} className=\"btn w-md-25 w-100 btn-primary\" id=\"clone-btn\">\n        import from IPFS\n      </button>\n      {IPFSStatus?<></>:<div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n        Your IPFS settings are incorrect. Unable to connect. Check your settings.\n      </div>}\n      <hr />\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/ConnectionWarning.tsx",["265","266"],"import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Utils } from \"../App\";\ninterface ConnectionWarningProps {\n  canLoad: boolean;\n}\n\nexport const ConnectionWarning: React.FC<ConnectionWarningProps> = (props) => {\n  //Utils.log(\"WARNING\",props)\n  return (\n    <>\n      <Modal show={!props.canLoad} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          <Modal.Title>\n        <FontAwesomeIcon icon={faExclamationTriangle} /> Change your browser settings\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          This app won't work properly when you are not on https and your\n          browser blocks third party cookies.<br></br>\n          Running it in incognito mode might not work unless you allow third part cookies.<br></br>\n          3Box services are not available unless you are on https.<br></br>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n",["267","268"],"/Volumes/butbut/code/boxtest/src/components/git/diff/Diff.tsx",["269","270","271","272","273","274"],"/Volumes/butbut/code/boxtest/src/components/git/UI/gitControls.tsx",["275","276"],"import React, { useState } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice } from \"../../../App\";\nimport { GitBranch } from \"./gitBranch\";\nimport { GitLog } from \"./gitLog\";\n\ninterface gitViewProps {\n  compact: boolean\n}\n\nexport const GitControls: React.FC<gitViewProps> = (props) => {\n  const canCommit = useBehaviorSubject(gitservice.canCommit)\n  const [message,setMessage] = useState({value:''})\n\n  gitservice.canCommit.subscribe((x)=>{}).unsubscribe()\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>)=> {\n      setMessage({value:e.currentTarget.value})\n  }\n\n  const commitAllowed = ()=>{\n    return canCommit === false || message.value ===\"\"\n  }\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label>Message</label>\n        <input className=\"form-control\" type=\"text\" onChange={handleChange} value={message.value} />\n      </div>\n      {canCommit?<></>:<div className='alert alert-warning'>Cannot commit in detached state! Create a new branch and check it out first or checkout main.<br></br></div>}\n      <button className=\"btn btn-primary\" disabled={commitAllowed()} onClick={async()=>gitservice.commit(message.value)} >git commit</button>\n      <hr></hr>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitBranch.tsx",["277","278"],"import React, { createRef, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice, Utils } from \"../../../App\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\n\ninterface gitBranchProps {}\n\nexport const GitBranch: React.FC<gitBranchProps> = ({}) => {\n  const branches = useBehaviorSubject(gitservice.branches);\n  const branch = useBehaviorSubject(gitservice.branch);\n  const [newBranch, setNewBranch] = useState({ value: \"\" });\n  let ModalRef = createRef<ConfirmDelete>();\n  let show: boolean = false;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewBranch({ value: e.currentTarget.value });\n  };\n\n  gitservice.branches\n    .subscribe((x) => {\n      //Utils.log(branches);\n      if (branches) {\n        show = branches.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  gitservice.branch\n    .subscribe((x) => {\n      //Utils.log(branch);\n    })\n    .unsubscribe();\n  const checkout = async (oid: string, remote: string | 'origin') => {\n    try {\n      await ModalRef.current?.show();\n      let cmd = {ref:oid, remote:remote}\n      gitservice.checkout(cmd);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n  return (\n    <>\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Branches</h4>\n        <ConfirmDelete\n          title={\"Checking out\"}\n          text={\n            <div>\n              Checking out a branch will delete the files in Remix.<br></br>\n              <strong>Check if you have uncommited work.</strong>\n              <br></br>Continue?\n            </div>\n          }\n          ref={ModalRef}\n        ></ConfirmDelete>\n        <Alert className=\"w-md-50 w-100 text-break\" variant=\"success\">\n          {branch}\n        </Alert>\n        {branches?.map((branch, index) => {\n          return (\n            <div key={index} className=\"row p-1\">\n              <div className=\"col-md-2 col-6\">{branch.name} on {branch.remote || 'local'}</div>\n              <div className=\"col\">\n                <span className=\"float-right\">\n                  <div\n                    onClick={async () => await checkout(branch.name, branch.remote)}\n                    className=\"btn btn-primary btn-sm checkout-btn\"\n                  >\n                    checkout\n                  </div>\n                </span>\n              </div>\n            </div>\n          );\n        })}\n        <hr />\n        <h4>Create branch</h4>\n        <div className=\"form-group\">\n          <label>Branchname</label>\n          <input\n            onChange={handleChange}\n            className=\"form-control w-md-25 w-100\"\n            type=\"text\"\n            id=\"newbranchname\"\n          />\n        </div>\n        <button\n          onClick={async () => gitservice.createBranch(newBranch.value)}\n          className=\"btn w-md-25 w-100 btn-primary\"\n          id=\"createbranch-btn\"\n        >\n          git branch\n        </button>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/gitLog.tsx",["279","280"],"import { ReadCommitResult } from \"isomorphic-git\";\nimport React, { createRef } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { gitservice, Utils } from \"../../../App\";\nimport { default as dateFormat } from \"dateformat\";\nimport ConfirmDelete from \"../../ConfirmDelete\";\ninterface gitLogProps {}\n\nexport const GitLog: React.FC<gitLogProps> = ({}) => {\n  const commits = useBehaviorSubject(gitservice.commits);\n  let ModalRef = createRef<ConfirmDelete>();\n  let show = false;\n\n  gitservice.commits\n    .subscribe((x) => {\n      //Utils.log(commits);\n      if (commits) {\n        show = commits.length > 0;\n      }\n    })\n    .unsubscribe();\n\n  const getDate = (commit: ReadCommitResult) => {\n    let date = dateFormat(\n      commit.commit.committer.timestamp * 1000,\n      \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const checkout = async (oid:string) => {\n    try {\n      await ModalRef.current?.show();\n      gitservice.checkout({ref:oid})\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n      <hr />\n      <div className={show ? \"\" : \"d-none\"}>\n        <h4>Commits</h4>\n        <ConfirmDelete title={\"Checking out\"} text={<div>Checking out a commit will delete the files in Remix.<br></br><strong>Check if you have uncommited work.</strong><br></br>Continue?</div>} ref={ModalRef}></ConfirmDelete>\n        <div className=\"container-fluid\">\n          {commits?.map((commit) => {\n            return (\n              <div key={commit.oid} className=\"row p-1\">\n                <div className=\"col-md-2 col-12\">{commit.commit.message}</div>\n                <div className=\"col-md-2 col-12\">{commit.commit.author.name || \"\"}</div>\n                <div className=\"col-12 col-md-3\">{getDate(commit)}</div>\n                <div className=\"col text-truncate\">{commit.oid}</div>\n                <div\n                  onClick={async () => await checkout(commit.oid)}\n                  className=\"btn btn-primary btn-sm checkout-btn ml-3 ml-md-0\"\n                >\n                  git checkout\n                </div>\n              </div>\n            );\n          })}\n\n          <div\n            onClick={async () => await checkout(\"main\")}\n            className=\"btn btn-primary btn-sm checkout-btn mt-2\"\n            data-oid=\"main\"\n          >\n            git checkout main\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/IPFSConfig.tsx",["281","282","283","284"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, useLocalStorage } from \"../../App\";\n\ninterface IPFSConfigProps {}\n\nexport const IPFSConfig: React.FC<IPFSConfigProps> = ({}) => {\n  const [host, sethost] = useLocalStorage(\n    \"IPFS_HOST\",\n    ipfservice.ipfsconfig.host\n  );\n  const [port, setport] = useLocalStorage(\n    \"IPFS_PORT\",\n    ipfservice.ipfsconfig.port.toString()\n  );\n  const [protocol, setprotocol] = useLocalStorage(\n    \"IPFS_PROTOCOL\",\n    ipfservice.ipfsconfig.protocol\n  );\n  const [url, setUrl] = useLocalStorage(\n    \"IPFS_URL\",\n    ipfservice.ipfsconfig.ipfsurl || \"\"\n  );\n  const IPFSStatus = useBehaviorSubject(ipfservice.connectionStatus);\n  ipfservice.connectionStatus.subscribe((x) => {}).unsubscribe();\n  const setHostChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    sethost(e.currentTarget.value);\n    ipfservice.ipfsconfig.host = e.currentTarget.value;\n  };\n  const setPortChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setport(e.currentTarget.value);\n    ipfservice.ipfsconfig.port = parseInt(e.currentTarget.value);\n  };\n  const setProtocolChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setprotocol(e.currentTarget.value);\n    ipfservice.ipfsconfig.protocol = e.currentTarget.value;\n  };\n  const setUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(e.currentTarget.value);\n    ipfservice.ipfsconfig.ipfsurl = e.currentTarget.value;\n  };\n\n  useEffect(() => {\n    const check  = async () => { \n    //  client.onload(() => {\n        ipfservice.ipfsconfig.host = host;\n        ipfservice.ipfsconfig.ipfsurl = url;\n        ipfservice.ipfsconfig.protocol = protocol;\n        ipfservice.ipfsconfig.port = port;\n    //    checkconfig();\n    //  });\n    }\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    await ipfservice.setipfsHost();\n  };\n\n  return (\n    <>\n      <h5>Custom IPFS gateway</h5>\n      <label>HOST</label>\n\n      <input\n        onChange={setHostChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"reponame\"\n        value={host}\n      />\n      <label>PORT</label>\n      <input\n        onChange={setPortChange}\n        className=\"form-control w-100\"\n        type=\"number\"\n        id=\"port\"\n        value={port}\n      />\n      <label>PROTOCOL</label>\n      <input\n        onChange={setProtocolChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={protocol}\n      />\n      <label>URL</label>\n      <input\n        onChange={setUrlChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={url}\n      />\n      <button className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {IPFSStatus ? (\n        <div className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are working correctly.\n        </div>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your IPFS settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/ConfirmDelete.tsx",["285","286"],"import { Button, Modal } from 'react-bootstrap';\nimport React from 'react'\n\n\ntype MyProps = { title:string, text:any };\ntype MyState = { show: boolean };\n\nexport default class ConfirmDelete extends React.Component<MyProps, MyState> {\n    promiseInfo:any\n    constructor(props:any){\n      super(props)\n      this.state = {\n        show: false\n      };\n  \n      this.promiseInfo = {};\n    }\n    show = async () => {\n      return new Promise((resolve, reject) => {\n        this.promiseInfo = {\n          resolve,\n          reject\n        };\n        this.setState({\n          show: true\n        });\n      });\n    };\n  \n    hide = async () => {\n      const { resolve, reject } = this.promiseInfo;\n      this.setState({\n        show: false\n      });\n      reject()\n    };\n\n    ok = async ()=>{\n        const { resolve, reject } = this.promiseInfo;\n        this.setState({\n          show: false\n        });\n        resolve()\n    }\n  \n    render() {\n      const { show } = this.state;\n      \n      return (\n        <>\n\n  \n        <Modal show={show} onHide={async ()=> await this.hide()}>\n          <Modal.Header closeButton>\n            <Modal.Title>{this.props.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{this.props.text}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={async ()=> await this.hide()}>\n              No\n            </Button>\n            <Button variant=\"primary\" onClick={async ()=> await this.ok()}>\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n      );\n    }\n  }","/Volumes/butbut/code/boxtest/src/components/git/UI/gitStatus.tsx",["287","288","289"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../../usesubscribe/index\";\nimport { client, fileservice, Utils } from \"../../../App\";\n\ninterface GitStatusProps { }\n\nexport const GitStatus: React.FC<GitStatusProps> = ({ }) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged = 0;\n  let untracked = 0;\n  let deleted = 0;\n  let modified = 0;\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesCountByStatus(\"staged\");\n      untracked = fileservice.getFilesCountByStatus(\"untracked\");\n      deleted = fileservice.getFilesCountByStatus(\"deleted\");\n      modified = fileservice.getFilesCountByStatus(\"modified\");\n      show = (deleted > 0 || staged > 0 || untracked > 0 || modified > 0)\n      let total = deleted + staged + untracked + modified\n      \n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: total===0? 'none':total,\n          type: total===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n\n    })\n    .unsubscribe();\n\n  useEffect(() => { }, []);\n\n  return (\n    <>\n      {show ?\n        <>\n          <hr></hr>\n          <div>Git status</div>\n          <div className=\"alert alert-success\">\n            {staged > 0 ? <div>{staged} staged</div> : <></>}\n            {modified > 0 ? <div>{modified} modified</div> : <></>}\n            {untracked > 0 ? <div>{untracked} untracked</div> : <></>}\n            {deleted > 0 ? <div>{deleted} deleted</div> : <></>}\n          </div></>\n        : <></>}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/FileHelp.tsx",["290"],"import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfo } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface FileHelpProps {}\n\nexport const FileHelp: React.FC<FileHelpProps> = ({}) => {\n  return (\n    <div className=\"\">\n      <hr></hr>\n      <div className=\"mt-4\">\n        <FontAwesomeIcon icon={faInfo} className=\"mr-2\" />\n        <br></br>\n        In this section you can manage your files in git. Files from remix will\n        be added automatically.<br></br>\n      </div>\n      <br></br>\n      <br></br>\n    </div>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/git/UI/GitHelp.tsx",["291"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface GitHelpProps {\n\n}\n\nexport const GitHelp: React.FC<GitHelpProps> = ({}) => {\n    return (<div className=\"\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    In this section you can manage your git repo like you normally would. Start by creating a first commit.<br></br>\n    Push & pull is not included here, go to the export/import section.<br></br>\n    </div>\n    <br></br>\n    <br></br>\n    </div>);\n}","/Volumes/butbut/code/boxtest/src/components/IPFS/ExportHelp.tsx",["292","293"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface ExportHelpProps {\n\n}\n\nexport const ExportHelp: React.FC<ExportHelpProps> = ({}) => {\n    return (<div className=\"\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    The plugin offers you 2 ways to export your files:<br></br>\n    - You export your files the Pinata Cloud IPFS<br></br>\n    Pinata offers a 'pinning' service for IPFS, up to 1GB of free pinning.<br></br>\n- You store the git repo in a custom IPFS gateway<br></br>\n    <a target='_blank' href='https://pinata.cloud/'>Sign up for a Pinata account here</a>\n    </div>\n    <br></br>\n    <br></br>\n    </div>);\n}","/Volumes/butbut/code/boxtest/src/components/Import/ImportHelp.tsx",["294"],"import { faInfo } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react'\n\ninterface ImportHelpProps {\n\n}\n\nexport const ImportHelp: React.FC<ImportHelpProps> = ({}) => {\n    return (<div className=\"\">\n    <hr></hr>\n    <div className='mt-4'>\n    <FontAwesomeIcon icon={faInfo} className=\"mr-2\" /><br></br>\n    The plugin offers you 3 ways to import your files:<br></br>\n- Just enter an IPFS hash where you stored the files.<br></br>\n- Pinata Cloud.<br></br>\n- Choose an export from the local storage, these are exports you made previously.<br></br>\n    <br></br>\n    <br></br>\n    </div></div>);\n}","/Volumes/butbut/code/boxtest/src/components/IPFS/ConfigHelp.tsx",["295","296"],"import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport marked from \"marked\";\n\ninterface ConfigHelpProps {}\n\nexport const ConfigHelp: React.FC<ConfigHelpProps> = ({}) => {\n  return (\n    <div className=\"\">\n      <hr></hr>\n      <div className=\"mt-4\">\n        <FontAwesomeIcon icon={faInfo} className=\"mr-2\" />\n        <br></br>\n        By default the IPFS used is a node from the Remix team.<br></br>\n        You can start your own IPFS daemon and set it to localhost in the config\n        of the plugin.<br></br>\n        However you need to configure your IPFS daemon to accept calls from a\n        web app by setting the Access-control-allow or CORS headers.<br></br>\n        Checkout the IPFS daemon documentation on how to do this.<br></br>\n      </div>\n      <br></br>\n      <br></br>\n    </div>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Utils.ts",["297","298"],"import { env } from \"process\";\n\nexport class devutils {\n    constructor() {}\n\n    async log(...message:any){\n        if (process.env.NODE_ENV === 'production') return;\n        console.log(...message)\n    }\n\n    addSlash(file:string){\n        if(!file.startsWith(\"/\"))file=\"/\" + file\n        return file\n    }\n}","/Volumes/butbut/code/boxtest/src/components/usesubscribe/index.ts",[],"/Volumes/butbut/code/boxtest/src/components/usesubscribe/use-observable.ts",[],"/Volumes/butbut/code/boxtest/src/components/LocalHostWarning.tsx",["299","300"],"import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Utils } from \"../App\";\ninterface ConnectionWarningProps {\n  canLoad: boolean | undefined;\n}\n\nexport const LocalHostWarning: React.FC<ConnectionWarningProps> = (props) => {\n  //Utils.log(\"WARNING\",props)\n  return (\n    <>\n      <Modal show={true} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n        <Modal.Header>\n          <Modal.Title>\n        <FontAwesomeIcon icon={faExclamationTriangle} /> Localhost is not supported\n        </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Localhost and remixd are not supported in this app.\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/IPFS/PinataConfig.tsx",["301","302","303","304","305"],"import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, useLocalStorage } from \"../../App\";\nimport { setConfig } from \"isomorphic-git\";\n\ninterface PinataConfigProps {}\n\nexport const PinataConfig: React.FC<PinataConfigProps> = ({}) => {\n  const [key, setKey] = useLocalStorage(\"pinatakey\", \"\");\n  const [secret, setSecret] = useLocalStorage(\"pinatasecret\", \"\");\n  const [status, setStatus] = useState<boolean>(false);\n\n  const setKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setKey(e.currentTarget.value);\n    setConfig();\n  };\n  const setSecretChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSecret(e.currentTarget.value);\n    setConfig();\n  };\n\n  useEffect(() => {\n    const check = async () => {\n      client.onload(async () => {\n        await checkconfig();\n      });\n    };\n    check();\n  }, []);\n\n  const checkconfig = async () => {\n    toast.dismiss();\n    try {\n      let r = await client.call(\"dGitProvider\" as any, \"pinList\", key, secret);\n      setStatus(true);\n      ipfservice.pinataConnectionStatus.next(false);\n      ipfservice.pinataConnectionStatus.next(true);\n      setConfig();\n    } catch (err) {\n      console.log(err);\n      setStatus(false);\n      ipfservice.pinataConnectionStatus.next(false);\n    }\n  };\n\n  const setConfig = async () => {\n    ipfservice.pinataConfig = {\n      key: key,\n      secret: secret,\n    };\n  };\n\n  return (\n    <>\n      <h5>Pinata API credentialss</h5>\n      <label>API KEY</label>\n      <input\n        onChange={setKeyChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"protocol\"\n        value={key}\n      />\n      <label>API SECRET</label>\n      <input\n        onChange={setSecretChange}\n        className=\"form-control w-100\"\n        type=\"text\"\n        id=\"url\"\n        value={secret}\n      />\n      <button className=\"btn btn-primary mt-5\" onClick={checkconfig}>\n        Check connection\n      </button>\n      {status ? (\n        <div className=\"alert alert-success w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are working correctly.\n        </div>\n      ) : (\n        <div className=\"alert alert-warning w-md-25 w-100 mt-2\" role=\"alert\">\n          Your pinata settings are incorrect. Unable to connect. Check your\n          settings.\n        </div>\n      )}\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/Import/PinataImport.tsx",["306","307","308","309","310","311"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { createRef, useEffect, useState } from \"react\";\nimport { Accordion, Alert, Button, Card } from \"react-bootstrap\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, ipfservice, loaderservice } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport dateFormat from \"dateformat\";\nimport { toast } from \"react-toastify\";\n\ninterface PinataImportProps {}\n\nexport const PinataImport: React.FC<PinataImportProps> = ({}) => {\n  const status = useBehaviorSubject(ipfservice.pinataConnectionStatus);\n  let [data, setData] = useState<any[]>([]);\n  let ModalRef = createRef<ConfirmDelete>();\n  let EraseModalRef = createRef<ConfirmDelete>();\n  let EraseModalOld = createRef<ConfirmDelete>();\n  ipfservice.pinataConnectionStatus.subscribe((x) => {}).unsubscribe();\n\n  useEffect(() => {\n    if (status) read();\n  }, [status]);\n\n  const getUrlLink = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a target=\"_blank\" href={getUrl(cid)} id=\"CID\">\n          {getUrl(cid)}\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const read = async () => {\n    try {\n      try {\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"pinList\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret\n        );\n        let rows = (r.rows || []).filter((o: any) => {\n          return o.metadata.keyvalues;\n        });\n        for (let row of rows) {\n          try {\n            row.metadata.keyvalues.commits = JSON.parse(\n              row.metadata.keyvalues.commits\n            );\n          } catch (e) {\n            row.metadata.keyvalues.commits = [];\n          }\n        }\n        // find any row that is included in another row with the same tree\n        for (let row of rows) {\n          if (row.metadata.keyvalues.commits[0]) {\n            const tree = row.metadata.keyvalues.commits[0].commit.tree;\n            const oid = row.metadata.keyvalues.commits[0].oid;\n            const doubles = rows.filter((subrow: any) => {\n              if(subrow.metadata.keyvalues.commits){\n                return subrow.metadata.keyvalues.commits.find((commit: any) => {\n                  return commit.commit.tree === tree && commit.oid === oid && subrow.metadata.keyvalues.ref !== oid\n                })\n              }else{\n                return false\n              }\n            });\n            row.hasChild = doubles.length > 0\n            row.doubles = doubles\n            //console.log(\"DOUBLES OF,,,\", oid, tree, doubles)\n          }\n        }\n        //console.log(\"ROWS\", rows);\n        setData(rows);\n      } catch (err) {\n        console.log(err);\n      }\n      //this.objects = r? JSON.parse(r):[];\n      //Utils.log(\"READ CONFIG\",this.objects);\n    } catch (e) {}\n  };\n\n  const getViewButton = (cid: string | undefined) => {\n    if (cid !== \"\" && cid !== undefined) {\n      return (\n        <a\n          className=\"btn btn-primary btn-sm mr-2\"\n          target=\"_blank\"\n          href={getUrl(cid)}\n          id=\"CID\"\n        >\n          View files\n        </a>\n      );\n    } else {\n      return <></>;\n    }\n  };\n\n  const getDate = (str: any) => {\n    let date = dateFormat(\n      str * 1000,\n      \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n    );\n    return date;\n  };\n\n  const getUrl = (cid: string) => {\n    return `${ipfservice.ipfsconfig.ipfsurl}${cid}`;\n  };\n\n  const importFromCID = async (cid: string | undefined, name: string = \"\") => {\n    try {\n      await ModalRef.current?.show();\n\n      await ipfservice.importFromCID(cid, name, false);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  const deleteOldItems = async () => {\n    try {\n      await EraseModalOld.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        for(let o of data){\n          if(o.hasChild){\n            console.log(\"delete \", o)\n            let r = await client.call(\n              \"dGitProvider\" as any,\n              \"unPin\",\n              ipfservice.pinataConfig.key,\n              ipfservice.pinataConfig.secret,\n              o.ipfs_pin_hash\n            );\n          }\n        }\n\n        await read();\n      } catch (err) {\n        console.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n\n    } catch (e) {\n\n    }\n  }\n\n  const deleteItem = async (cid: string) => {\n    try {\n      await EraseModalRef.current?.show();\n      try {\n        loaderservice.setLoading(true)\n        let r = await client.call(\n          \"dGitProvider\" as any,\n          \"unPin\",\n          ipfservice.pinataConfig.key,\n          ipfservice.pinataConfig.secret,\n          cid\n        );\n        await read();\n      } catch (err) {\n        console.log(err);\n      } finally {\n        loaderservice.setLoading(false)\n      }\n      //await localipfsstorage.deleteFromStorage(o?.ipfs_pin_hash);\n      //Utils.log(\"yes\");\n    } catch (e) {\n      //Utils.log(\"no\");\n    }\n  };\n\n  return (\n    <>\n    \n      <h4>Import from Pinata</h4>\n      <Button onClick={async()=> deleteOldItems()} className='mb-2 btn btn-danger'>Remove old commits <FontAwesomeIcon icon={faTrash} /></Button>\n      <ConfirmDelete\n        title={\"Importing\"}\n        text={\"This will create a new workspace! Continue?\"}\n        ref={ModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deleting\"}\n        text={\"Are you sure you want to erase this item?\"}\n        ref={EraseModalRef}\n      ></ConfirmDelete>\n      <ConfirmDelete\n        title={\"Deletingold\"}\n        text={\"Are you sure you want to delete commits that have been superseded?\"}\n        ref={EraseModalOld}\n      ></ConfirmDelete>\n      <div className=\"container-fluid\">\n        {(data || [])\n          .filter((o: any) => {\n            return o.metadata.keyvalues;\n          })\n          .map((o: any, index: any) => {\n            return (\n              <div key={index} className=\"row p-1\">\n                <Card className=\"w-md-75 w-100\">\n                  <Card.Body>\n                    <h5>{o.metadata.name}</h5>\n                    <div className=\"row\">\n                      <div className=\"col\">IPFS</div>\n                      <div className=\"col\">{o?.ipfs_pin_hash}</div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">DATE EXPORTED</div>\n                      <div className=\"col\">\n                        {dateFormat(\n                          o?.date_pinned,\n                          \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">MESSAGE</div>\n                      <div className=\"col\">\n                        {o?.metadata?.keyvalues?.message}\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col\">OID</div>\n                      <div className=\"col\">{o?.metadata?.keyvalues?.ref}</div>\n                    </div>\n                    { o.hasChild? \n                    \n                    <>\n                    <Alert className='mt-1' variant='warning'>This commit has been superseded. You can probably remove it.<br></br>\n                    Newer commits:<br></br>\n                    {\n                      o.doubles.map((double: any) => {\n                        return <div>{double.metadata?.name}</div>\n                      })\n                    }\n                    </Alert>\n                    </>:<></> }\n                    <Accordion>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                          >\n                            history\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"0\">\n                          <Card.Body>\n                            {o?.metadata?.keyvalues?.commits.map(\n                              (commit: any) => {\n                                return (\n                                  <>\n                                  <div className=\"row\">\n                                    <div className=\"col-md-6 col-12\">\n                                      {commit.commit?.message}\n                                    </div>\n                                    <div className=\"col-md-6 col-12\">\n                                    { commit.commit?.committer?.timestamp ? <>{getDate(commit.commit?.committer?.timestamp)}</>:<>no date</> }\n                                    </div>\n                                  </div><hr></hr></>\n                                );\n                              }\n                            )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                  </Card.Body>\n                </Card>\n                <div className=\"col\">\n                  <button\n                    onClick={async () =>\n                      await importFromCID(o.ipfs_pin_hash, o.metadata.name)\n                    }\n                    className=\"btn btn-primary btn-sm mr-2 import3b-btn\"\n                  >\n                    import\n                  </button>\n                  {getViewButton(o.ipfs_pin_hash)}\n                  \n                  <button\n                    onClick={async () => await deleteItem(o.ipfs_pin_hash)}\n                    className=\"btn btn-danger btn-sm delete3b-btn\"\n                  >\n                    <FontAwesomeIcon icon={faTrash} />\n                  </button>\n                  <br></br>\n                  <CopyToClipboard\n            text={o.ipfs_pin_hash}\n            onCopy={() => {\n              toast.success(\"Copied to clipboard.\");\n            }}\n          >\n            <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy hash to clipboard</button>\n          </CopyToClipboard>\n                </div>\n              </div>\n            );\n          })}\n        {data?.length === 0 ? <>Nothing has been stored here yet.</> : <></>}\n      </div>\n      <hr></hr>\n    </>\n  );\n};\n","/Volumes/butbut/code/boxtest/src/components/github/github.tsx",["312","313","314","315","316","317"],"import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, createRef } from \"react\";\nimport { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\nimport { async } from \"rxjs\";\nimport { gitservice, useLocalStorage } from \"../../App\";\nimport ConfirmDelete from \"../ConfirmDelete\";\nimport { useBehaviorSubject } from \"../usesubscribe\";\n\ninterface importerProps { }\n\nexport const GitHubImporter: React.FC<importerProps> = () => {\n\n    const [currentRemote, setCurrentRemote] = useLocalStorage(\n        \"CURRENT_REMOTE\",\n        'origin'\n    );\n    const [cloneUrl, setCloneUrl] = useLocalStorage(\n        \"CLONE_URL\",\n        ''\n    );\n\n    const [cloneDepth, setCloneDepth] = useLocalStorage(\n        \"CLONE_DEPTH\",\n        1\n    );\n\n    const [url, setUrl] = useLocalStorage(\n        \"GITHUB_URL\",\n        ''\n    );\n\n    const [branch, setBranch] = useLocalStorage(\n        \"GITHUB_BRANCH\",\n        'main'\n    );\n    const [remoteBranch, setRemoteBranch] = useLocalStorage(\n        \"GITHUB_REMOTE_BRANCH\",\n        'main'\n    );\n    const [token, setToken] = useLocalStorage(\n        \"GITHUB_TOKEN\",\n        ''\n    );\n    const [force, setForce] = useLocalStorage(\n        \"GITHUB_FORCE\",\n        false\n    );\n\n    const [cloneAllBranches, setcloneAllBranches] = useLocalStorage(\n        \"GITHUB_CLONE_ALL_BRANCES\",\n        false\n    );\n\n    const [remoteName, setRemoteName] = useLocalStorage(\n        \"GITHUB_REMOTE_NAME\",\n        ''\n    );\n\n    const [name, setName] = useLocalStorage(\n        \"GITHUB_NAME\",\n        ''\n    );\n\n    const [email, setEmail] = useLocalStorage(\n        \"GITHUB_EMAIL\",\n        ''\n    );\n    const remotes = useBehaviorSubject(gitservice.remotes);\n\n\n    let ModalRef = createRef<ConfirmDelete>();\n\n    const clone = async () => {\n        try {\n            await ModalRef.current?.show();\n            gitservice.clone(cloneUrl, '', token, cloneDepth, !cloneAllBranches)\n        } catch (e) {\n\n        }\n    }\n\n    const addRemote = async () => {\n        await gitservice.addRemote(remoteName, url)\n        await gitservice.getRemotes()\n    }\n\n    const delRemote = async (name: string) => {\n        await gitservice.delRemote(name)\n        await gitservice.getRemotes()\n    }\n\n    const push = async () => {\n        gitservice.push(currentRemote, branch, remoteBranch, token, force, name, email)\n    }\n\n    const pull = async () => {\n        gitservice.pull(currentRemote, branch, remoteBranch, token, name, email)\n    }\n\n    const fetch = async () => {\n        gitservice.fetch(url, branch, remoteBranch, token, name, email)\n    }\n\n    const onUrlChange = (value: string) => {\n        setUrl(value)\n    }\n    const onCloneUrlChange = (value: string) => {\n        setCloneUrl(value)\n    }\n    const onBranchChange = (value: string) => {\n        setBranch(value)\n    }\n    const onRemoteBranchChange = (value: string) => {\n        setRemoteBranch(value)\n    }\n    const onTokenChange = (value: string) => {\n        setToken(value)\n    }\n    const onAllBranchChange = (event: any) => {\n        const target = event.target;\n        const value = target.checked;\n        setcloneAllBranches(value)\n    }\n    const onForceChange = (event: any) => {\n        const target = event.target;\n        const value = target.checked;\n        setForce(value)\n    }\n    const onNameChange = (value: string) => {\n        setName(value)\n    }\n    const onRemoteNameChange = (value: string) => {\n        setRemoteName(value)\n    }\n    const onEmailChange = (value: string) => {\n        setEmail(value)\n    }\n\n    const onDepthChange = (value: number) => {\n        setCloneDepth(value)\n    }\n\n    const remoteChange = (name: string) => {\n        setCurrentRemote(name)\n    }\n\n    return (\n        <>\n            <ConfirmDelete\n                title={\"Cloning\"}\n                text={\"This will create a new workspace! Your repo might be to big and crash the browser! Continue?\"}\n                ref={ModalRef}\n            ></ConfirmDelete>\n            {name ? <></> :\n                <Alert variant='warning'>You will need to set name and preferrably also a GitHub email in the CONFIG below to push & pull.<br></br>\n                    You can clone now.</Alert>\n            }\n            {token ? <></> :\n                <Alert variant='warning'>You need to set your GitHub personal token below in the CONFIG to push and pull.<br></br>\n                    Without the token you can only clone.<br></br>\n                    <a href='https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token' target='_blank'>More info on personal access tokens...</a>\n                </Alert>}\n            <h4>Available remotes</h4>\n            {\n                remotes?.map((remote) => {\n                    return <div className='row mb-1'>\n                        <div className='col'>\n                            <input checked={currentRemote === remote.remote} onChange={async () => remoteChange(remote.remote)} type=\"radio\" className='mr-2' value={remote.remote} id={remote.remote}\n                                name=\"remote\" />\n                            <a className='mr-2' href={remote.url} target=\"_blank\">{remote.remote} : {remote.url}</a>\n                        </div>\n                        <div className='col'>\n                            <button\n                                onClick={async () =>\n                                    await delRemote(remote.remote)\n                                }\n                                className=\"btn btn-danger btn-sm delete3b-btn\"\n                            >\n                                <FontAwesomeIcon icon={faTrash} />\n                            </button>\n                        </div>\n                    </div>\n                })\n            }\n            {(remotes && remotes?.length > 0) ? <></> : <div>No remotes are set</div>}\n            <hr></hr>\n            <h4>commands</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>LOCAL BRANCH</label>\n                    <input name='localbranch' onChange={e => onBranchChange(e.target.value)} value={branch} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>REMOTE BRANCH</label>\n                    <input name ='remotebranch' onChange={e => onRemoteBranchChange(e.target.value)} value={remoteBranch} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div></div>\n            <button className='btn btn-primary m-2' onClick={async () => {\n                await gitservice.init()\n            }}>init</button>\n            <button className='btn btn-primary m-2' onClick={async () => {\n                push()\n            }}>push</button>\n            <button className='btn btn-primary m-2' onClick={async () => {\n                pull()\n            }}>pull</button>\n            <button className='btn btn-primary m-2 d-none' onClick={async () => {\n                fetch()\n            }}>fetch</button>\n            <label>FORCE PUSH</label>\n            <input name='force' className='ml-2' checked={force} onChange={e => onForceChange(e)} value={token} type=\"checkbox\" id=\"ipfs\" />\n            <hr></hr>\n            <h4>GIT REMOTE</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>NAME</label>\n                    <input name='remotename' onChange={e => onRemoteNameChange(e.target.value)} value={remoteName} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>URL</label>\n                    <input name='remoteurl' onChange={e => onUrlChange(e.target.value)} value={url} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n            </div>\n\n\n            <button className='btn btn-primary m-2' onClick={async () => {\n                addRemote()\n            }}>add remote</button><br></br>\n            <hr></hr>\n            <h4>CLONE</h4>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>URL</label>\n                    <input name='cloneurl' onChange={e => onCloneUrlChange(e.target.value)} value={cloneUrl} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>DEPTH **</label>\n                    <input name='clonedepth' onChange={e => onDepthChange(parseInt(e.target.value))} value={cloneDepth} className=\"form-control\" type=\"number\" id=\"ipfs\" />\n                </div>\n\n            </div>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>CLONE ALL BRANCHES?</label><br></br>\n                    <input name='clonallbranches' onChange={e => onAllBranchChange(e)} checked={cloneAllBranches} className=\"\" type=\"checkbox\" id=\"ipfs\" />\n                </div>\n            </div>\n            <button className='btn btn-primary m-2' onClick={async () => {\n                clone()\n            }}>clone</button>\n            <hr></hr>\n            <h4>CONFIG</h4>\n            <label>PERSONAL GITHUB TOKEN</label>\n            <input name='token' readOnly onFocus={e => e.target.readOnly = false} onBlur={e => e.target.readOnly = true} onChange={e => onTokenChange(e.target.value)} value={token} className=\"form-control\" autoComplete=\"off\" type=\"password\" id=\"ipfs\" />\n            <CopyToClipboard\n                text={token}\n                onCopy={() => {\n                    toast.success(\"Copied to clipboard.\");\n                }}\n            >\n                <button className=\"mt-2 btn btn-primary mb-2 btn-sm\">Copy token to clipboard</button>\n            </CopyToClipboard>\n            <div className='row'>\n                <div className='col col-md-6 col-12'>\n                    <label>NAME</label>\n                    <input name='name' onChange={e => onNameChange(e.target.value)} value={name} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n                <div className='col col-md-6 col-12'>\n                    <label>EMAIL</label>\n                    <input name='email' onChange={e => onEmailChange(e.target.value)} value={email} className=\"form-control\" type=\"text\" id=\"ipfs\" />\n                </div>\n            </div>\n\n\n\n\n\n\n            <hr></hr>\n\n            <div>\n                ** save space in your browser and clone less commits\n            </div>\n            <div>\n                To use this you need to get a personal access token on GitHub and add REPO permissions.<br></br>\n                <a href='https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token' target='_blank'>More info on personal access tokens...</a>\n            </div>\n\n        </>\n    );\n};\n","/Volumes/butbut/code/boxtest/src/components/Files/CompactExplorer.tsx",["318","319","320","321"],"import React, { useEffect } from \"react\";\nimport { useBehaviorSubject } from \"../usesubscribe/index\";\nimport { client, fileservice, gitservice, Utils } from \"../../App\";\nimport path from 'path'\nimport { Col, Row } from \"react-bootstrap\";\nimport { faUndo, faPlus, faMinus, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { async } from \"rxjs\";\n\ninterface GitStatusProps {}\n\nexport const CompactExplorer: React.FC<GitStatusProps> = ({}) => {\n  const files = useBehaviorSubject(fileservice.filetreecontent);\n  let staged:any[] = [];\n  let untracked:any[];\n  let deleted:any[];\n  let modified:any[];\n  let alltrackedFiles:any[];\n  let show = false\n  fileservice.filetreecontent\n    .subscribe((x) => {\n      //Utils.log(\"GIT STATUS\", files);\n      staged = fileservice.getFilesByStatus(\"staged\");\n      untracked = fileservice.getFilesByStatus(\"untracked\");\n      deleted = fileservice.getFilesByStatus(\"deleted\");\n      modified = fileservice.getFilesByStatus(\"modified\");\n      show = (deleted.length>0 || staged.length>0 ||  untracked.length>0 || modified.length>0)\n      alltrackedFiles = fileservice.getFilesWithNotModifiedStatus();\n      alltrackedFiles = alltrackedFiles.filter((trackedFile) => {\n        return staged.findIndex((stagedFile) => stagedFile.filename === trackedFile.filename) === -1\n      })\n      let total = alltrackedFiles.length\n      \n      client.onload(() => {\n        client.emit('statusChanged', {\n          key: total===0? 'none':total,\n          type: total===0? '':'success',\n          title: 'Git changes'\n        })\n      })\n    })\n    .unsubscribe();\n\n  useEffect(() => {}, []);\n\n  function RenderGroups(){\n      //const groups = [{name:'Staged', group: staged}, {name:'Untracked',group:untracked},{name:'Modified', group:modified},{name:'Deleted', group:deleted}]\n      const groups = [{name:'Staged', group: staged}, {name:'Changes', group: alltrackedFiles}]\n      return (<>\n        {\n           groups.map((ob:any)=>{\n                return (\n                    <>\n                    {ob.group.length>0? <h5 className='mb-3 mt-3'>{ob.name}</h5>:<></>}\n                    <RenderFiles Files={ob.group} Type={ob.name}></RenderFiles>\n                    </>\n                )\n            })\n        }\n      \n      </>)\n  }\n\n  async function fileClick(file:any){\n    console.log(file)\n    let status = fileservice.getFileStatusForFile(file.filename || \"\");\n    if(status?.indexOf(\"modified\")  !== -1){\n      await client.call('manager', 'activatePlugin', 'gitdiff')\n      await client.call('gitdiff' as any, 'diff', file.filename)\n    }else{\n      await client.call('fileManager', 'open', file.filename)\n    }\n  }\n\n  function RenderFiles(ob:any) {\n      console.log('FILES', ob)\n      return (<>\n        {\n            ob.Files.map((file:any)=>{\n                return (\n                    <>\n                    <Row className='mb-1'>\n                        <Col className='col-8'>\n                        <div className='pointer text-truncate' onClick={async() => fileClick(file)}>\n                          <span className='font-weight-bold'>{path.basename(file.filename)}</span>\n                          <div className='text-secondary'> {file.filename}</div>\n                        </div>\n                        </Col>\n                        <Col className='col-4 p-0'>\n                          <Row>\n                        <RenderButtons File={file} Type={ob.Type}></RenderButtons>\n                        </Row>\n                        </Col>\n                    </Row>\n\n\n                    </>\n                )\n            })\n        }\n      </>)\n  }\n\n  function FunctionStatusIcons(ob:any){\n    let status = ob.status\n    return (<>\n    <Col className='col-2 p-0'>\n    {status?.indexOf(\"modified\")  === -1? <></>: <button  className='btn btn-sm mr-1'>M</button> }\n    {status?.indexOf(\"untracked\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>U</button> }\n    {status?.indexOf(\"deleted\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>D</button> }\n    {status?.indexOf(\"added\")  === -1? <></>: <button  className='btn btn-sm  mr-1'>U</button> }\n    </Col>\n    </>)\n  }\n \n\n  function RenderButtons(ob:any){   \n        let status = fileservice.getFileStatusForFile(ob.File.filename || \"\");\n      if(ob.Type === 'Untracked'){\n        return <>\n            <button onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Staged'){\n        return <>\n        <Col className='col-8 p-0'>\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n            <button onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faMinus} className=\"\" /></button>\n            </Col>\n            <FunctionStatusIcons status={status}/>\n            \n        </>\n      }\n      if(ob.Type === 'Modified'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n            <button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>\n        </>\n      }\n      if(ob.Type === 'Deleted'){\n        return <>\n            {status?.indexOf(\"staged\")  !== -1? <></>:<button onClick={async () => await gitservice.gitrm(ob.File.filename)} className='btn btn-sm btn-primary mr-1'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n        </>\n      }\n      if(ob.Type === 'Changes'){\n        return <>\n            <Col className='col-8 p-0'>\n            {status?.indexOf(\"modified\")  === -1? <></>:<button onClick={async () => await gitservice.checkoutfile(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faUndo} className=\"\" /></button>}\n            {(status?.indexOf(\"unstaged\")  !== -1 && status?.indexOf(\"deleted\")  !== -1)? <></>:<button onClick={async () => await gitservice.addToGit(ob.File.filename)} className='btn btn-sm btn-primary mr-1 float-right'><FontAwesomeIcon icon={faPlus} className=\"\" /></button>}\n            </Col>\n            <FunctionStatusIcons status={status}/>\n        </>\n      }\n      return <></>\n  }\n\n  return (\n    <>\n    {show?\n    <>\n    <div>\n        <button onClick={async () => await gitservice.addAllToGit()} className='btn btn-sm btn-primary'>Stage all</button>\n        <button onClick={async () => await fileservice.syncFromBrowser()} className='btn btn-sm btn-primary ml-2'><FontAwesomeIcon icon={faSync} className=\"\" /></button>\n        <hr></hr>\n        <RenderGroups></RenderGroups>\n    </div></>\n    :<>Nothing to commit</>}\n    </>\n  );\n};\n",{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"327","line":3,"column":56,"nodeType":"328","messageId":"329","endLine":3,"endColumn":60},{"ruleId":"326","severity":1,"message":"330","line":88,"column":10,"nodeType":"328","messageId":"329","endLine":88,"endColumn":17},{"ruleId":"326","severity":1,"message":"331","line":93,"column":10,"nodeType":"328","messageId":"329","endLine":93,"endColumn":21},{"ruleId":"326","severity":1,"message":"332","line":93,"column":23,"nodeType":"328","messageId":"329","endLine":93,"endColumn":37},{"ruleId":"333","severity":1,"message":"334","line":106,"column":13,"nodeType":"335","messageId":"336","endLine":106,"endColumn":15},{"ruleId":"337","severity":1,"message":"338","line":181,"column":75,"nodeType":"339","endLine":181,"endColumn":184},{"ruleId":"326","severity":1,"message":"340","line":2,"column":8,"nodeType":"328","messageId":"329","endLine":2,"endColumn":11},{"ruleId":"326","severity":1,"message":"341","line":3,"column":3,"nodeType":"328","messageId":"329","endLine":3,"endColumn":18},{"ruleId":"326","severity":1,"message":"342","line":5,"column":3,"nodeType":"328","messageId":"329","endLine":5,"endColumn":16},{"ruleId":"326","severity":1,"message":"343","line":9,"column":8,"nodeType":"328","messageId":"329","endLine":9,"endColumn":12},{"ruleId":"326","severity":1,"message":"344","line":10,"column":10,"nodeType":"328","messageId":"329","endLine":10,"endColumn":21},{"ruleId":"345","severity":1,"message":"346","line":131,"column":35,"nodeType":"347","messageId":"348","endLine":131,"endColumn":37},{"ruleId":"345","severity":1,"message":"346","line":132,"column":29,"nodeType":"347","messageId":"348","endLine":132,"endColumn":31},{"ruleId":"345","severity":1,"message":"346","line":145,"column":35,"nodeType":"347","messageId":"348","endLine":145,"endColumn":37},{"ruleId":"345","severity":1,"message":"346","line":160,"column":35,"nodeType":"347","messageId":"348","endLine":160,"endColumn":37},{"ruleId":"345","severity":1,"message":"346","line":174,"column":35,"nodeType":"347","messageId":"348","endLine":174,"endColumn":37},{"ruleId":"326","severity":1,"message":"349","line":1,"column":8,"nodeType":"328","messageId":"329","endLine":1,"endColumn":22},{"ruleId":"326","severity":1,"message":"341","line":4,"column":10,"nodeType":"328","messageId":"329","endLine":4,"endColumn":25},{"ruleId":"326","severity":1,"message":"350","line":4,"column":40,"nodeType":"328","messageId":"329","endLine":4,"endColumn":50},{"ruleId":"326","severity":1,"message":"351","line":1,"column":8,"nodeType":"328","messageId":"329","endLine":1,"endColumn":11},{"ruleId":"326","severity":1,"message":"343","line":4,"column":8,"nodeType":"328","messageId":"329","endLine":4,"endColumn":12},{"ruleId":"326","severity":1,"message":"352","line":7,"column":10,"nodeType":"328","messageId":"329","endLine":7,"endColumn":22},{"ruleId":"326","severity":1,"message":"353","line":331,"column":13,"nodeType":"328","messageId":"329","endLine":331,"endColumn":19},{"ruleId":"326","severity":1,"message":"350","line":4,"column":3,"nodeType":"328","messageId":"329","endLine":4,"endColumn":13},{"ruleId":"326","severity":1,"message":"354","line":8,"column":3,"nodeType":"328","messageId":"329","endLine":8,"endColumn":8},{"ruleId":"326","severity":1,"message":"354","line":2,"column":42,"nodeType":"328","messageId":"329","endLine":2,"endColumn":47},{"ruleId":"326","severity":1,"message":"355","line":5,"column":10,"nodeType":"328","messageId":"329","endLine":5,"endColumn":15},{"ruleId":"356","severity":1,"message":"357","line":7,"column":43,"nodeType":"358","messageId":"336","endLine":7,"endColumn":45},{"ruleId":"326","severity":1,"message":"354","line":3,"column":35,"nodeType":"328","messageId":"329","endLine":3,"endColumn":40},{"ruleId":"326","severity":1,"message":"359","line":6,"column":3,"nodeType":"328","messageId":"329","endLine":6,"endColumn":15},{"ruleId":"326","severity":1,"message":"360","line":7,"column":3,"nodeType":"328","messageId":"329","endLine":7,"endColumn":16},{"ruleId":"326","severity":1,"message":"361","line":13,"column":3,"nodeType":"328","messageId":"329","endLine":13,"endColumn":12},{"ruleId":"326","severity":1,"message":"362","line":30,"column":10,"nodeType":"328","messageId":"329","endLine":30,"endColumn":16},{"ruleId":"326","severity":1,"message":"363","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":21},{"ruleId":"326","severity":1,"message":"364","line":2,"column":47,"nodeType":"328","messageId":"329","endLine":2,"endColumn":63},{"ruleId":"326","severity":1,"message":"341","line":2,"column":65,"nodeType":"328","messageId":"329","endLine":2,"endColumn":80},{"ruleId":"326","severity":1,"message":"354","line":2,"column":82,"nodeType":"328","messageId":"329","endLine":2,"endColumn":87},{"ruleId":"356","severity":1,"message":"357","line":9,"column":53,"nodeType":"358","messageId":"336","endLine":9,"endColumn":55},{"ruleId":"326","severity":1,"message":"365","line":12,"column":9,"nodeType":"328","messageId":"329","endLine":12,"endColumn":17},{"ruleId":"326","severity":1,"message":"366","line":1,"column":17,"nodeType":"328","messageId":"329","endLine":1,"endColumn":25},{"ruleId":"326","severity":1,"message":"354","line":8,"column":3,"nodeType":"328","messageId":"329","endLine":8,"endColumn":8},{"ruleId":"326","severity":1,"message":"367","line":17,"column":9,"nodeType":"328","messageId":"329","endLine":17,"endColumn":21},{"ruleId":"337","severity":1,"message":"338","line":44,"column":11,"nodeType":"339","endLine":44,"endColumn":88},{"ruleId":"337","severity":1,"message":"338","line":48,"column":11,"nodeType":"339","endLine":48,"endColumn":99},{"ruleId":"326","severity":1,"message":"368","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":15},{"ruleId":"326","severity":1,"message":"350","line":3,"column":10,"nodeType":"328","messageId":"329","endLine":3,"endColumn":20},{"ruleId":"356","severity":1,"message":"357","line":13,"column":51,"nodeType":"358","messageId":"336","endLine":13,"endColumn":53},{"ruleId":"326","severity":1,"message":"369","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":26},{"ruleId":"345","severity":1,"message":"370","line":16,"column":20,"nodeType":"347","messageId":"371","endLine":16,"endColumn":22},{"ruleId":"345","severity":1,"message":"346","line":80,"column":17,"nodeType":"347","messageId":"348","endLine":80,"endColumn":19},{"ruleId":"345","severity":1,"message":"346","line":84,"column":17,"nodeType":"347","messageId":"348","endLine":84,"endColumn":19},{"ruleId":"326","severity":1,"message":"372","line":127,"column":7,"nodeType":"328","messageId":"329","endLine":127,"endColumn":27},{"ruleId":"326","severity":1,"message":"373","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":16},{"ruleId":"326","severity":1,"message":"354","line":2,"column":43,"nodeType":"328","messageId":"329","endLine":2,"endColumn":48},{"ruleId":"326","severity":1,"message":"374","line":14,"column":9,"nodeType":"328","messageId":"329","endLine":14,"endColumn":17},{"ruleId":"326","severity":1,"message":"375","line":41,"column":9,"nodeType":"328","messageId":"329","endLine":41,"endColumn":22},{"ruleId":"326","severity":1,"message":"354","line":6,"column":40,"nodeType":"328","messageId":"329","endLine":6,"endColumn":45},{"ruleId":"356","severity":1,"message":"357","line":13,"column":61,"nodeType":"358","messageId":"336","endLine":13,"endColumn":63},{"ruleId":"326","severity":1,"message":"376","line":27,"column":9,"nodeType":"328","messageId":"329","endLine":27,"endColumn":19},{"ruleId":"337","severity":1,"message":"338","line":30,"column":9,"nodeType":"339","endLine":30,"endColumn":56},{"ruleId":"337","severity":1,"message":"338","line":42,"column":9,"nodeType":"339","endLine":42,"endColumn":96},{"ruleId":"326","severity":1,"message":"354","line":3,"column":22,"nodeType":"328","messageId":"329","endLine":3,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":8,"column":59,"nodeType":"358","messageId":"336","endLine":8,"endColumn":61},{"ruleId":"326","severity":1,"message":"377","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":16},{"ruleId":"326","severity":1,"message":"354","line":5,"column":10,"nodeType":"328","messageId":"329","endLine":5,"endColumn":15},{"ruleId":"322","replacedBy":"378"},{"ruleId":"324","replacedBy":"379"},{"ruleId":"326","severity":1,"message":"380","line":1,"column":17,"nodeType":"328","messageId":"329","endLine":1,"endColumn":26},{"ruleId":"326","severity":1,"message":"354","line":5,"column":22,"nodeType":"328","messageId":"329","endLine":5,"endColumn":27},{"ruleId":"326","severity":1,"message":"368","line":6,"column":10,"nodeType":"328","messageId":"329","endLine":6,"endColumn":15},{"ruleId":"356","severity":1,"message":"357","line":10,"column":47,"nodeType":"358","messageId":"336","endLine":10,"endColumn":49},{"ruleId":"326","severity":1,"message":"381","line":11,"column":10,"nodeType":"328","messageId":"329","endLine":11,"endColumn":14},{"ruleId":"326","severity":1,"message":"382","line":11,"column":16,"nodeType":"328","messageId":"329","endLine":11,"endColumn":23},{"ruleId":"326","severity":1,"message":"383","line":4,"column":10,"nodeType":"328","messageId":"329","endLine":4,"endColumn":19},{"ruleId":"326","severity":1,"message":"384","line":5,"column":10,"nodeType":"328","messageId":"329","endLine":5,"endColumn":16},{"ruleId":"326","severity":1,"message":"354","line":4,"column":22,"nodeType":"328","messageId":"329","endLine":4,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":9,"column":53,"nodeType":"358","messageId":"336","endLine":9,"endColumn":55},{"ruleId":"326","severity":1,"message":"354","line":4,"column":22,"nodeType":"328","messageId":"329","endLine":4,"endColumn":27},{"ruleId":"356","severity":1,"message":"357","line":9,"column":47,"nodeType":"358","messageId":"336","endLine":9,"endColumn":49},{"ruleId":"326","severity":1,"message":"385","line":1,"column":28,"nodeType":"328","messageId":"329","endLine":1,"endColumn":36},{"ruleId":"326","severity":1,"message":"373","line":4,"column":10,"nodeType":"328","messageId":"329","endLine":4,"endColumn":16},{"ruleId":"356","severity":1,"message":"357","line":8,"column":55,"nodeType":"358","messageId":"336","endLine":8,"endColumn":57},{"ruleId":"386","severity":1,"message":"387","line":55,"column":6,"nodeType":"388","endLine":55,"endColumn":8,"suggestions":"389"},{"ruleId":"326","severity":1,"message":"390","line":31,"column":15,"nodeType":"328","messageId":"329","endLine":31,"endColumn":22},{"ruleId":"326","severity":1,"message":"391","line":39,"column":26,"nodeType":"328","messageId":"329","endLine":39,"endColumn":32},{"ruleId":"326","severity":1,"message":"354","line":3,"column":31,"nodeType":"328","messageId":"329","endLine":3,"endColumn":36},{"ruleId":"356","severity":1,"message":"357","line":7,"column":53,"nodeType":"358","messageId":"336","endLine":7,"endColumn":56},{"ruleId":"326","severity":1,"message":"392","line":8,"column":9,"nodeType":"328","messageId":"329","endLine":8,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":7,"column":51,"nodeType":"358","messageId":"336","endLine":7,"endColumn":53},{"ruleId":"356","severity":1,"message":"357","line":9,"column":49,"nodeType":"358","messageId":"336","endLine":9,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":9,"column":55,"nodeType":"358","messageId":"336","endLine":9,"endColumn":57},{"ruleId":"337","severity":1,"message":"338","line":18,"column":5,"nodeType":"339","endLine":18,"endColumn":53},{"ruleId":"356","severity":1,"message":"357","line":9,"column":55,"nodeType":"358","messageId":"336","endLine":9,"endColumn":57},{"ruleId":"326","severity":1,"message":"393","line":4,"column":8,"nodeType":"328","messageId":"329","endLine":4,"endColumn":14},{"ruleId":"356","severity":1,"message":"357","line":8,"column":55,"nodeType":"358","messageId":"336","endLine":8,"endColumn":57},{"ruleId":"326","severity":1,"message":"394","line":1,"column":10,"nodeType":"328","messageId":"329","endLine":1,"endColumn":13},{"ruleId":"395","severity":1,"message":"396","line":4,"column":5,"nodeType":"397","messageId":"398","endLine":4,"endColumn":21},{"ruleId":"326","severity":1,"message":"377","line":2,"column":10,"nodeType":"328","messageId":"329","endLine":2,"endColumn":16},{"ruleId":"326","severity":1,"message":"354","line":5,"column":10,"nodeType":"328","messageId":"329","endLine":5,"endColumn":15},{"ruleId":"326","severity":1,"message":"399","line":3,"column":10,"nodeType":"328","messageId":"329","endLine":3,"endColumn":28},{"ruleId":"326","severity":1,"message":"400","line":5,"column":10,"nodeType":"328","messageId":"329","endLine":5,"endColumn":19},{"ruleId":"356","severity":1,"message":"357","line":9,"column":59,"nodeType":"358","messageId":"336","endLine":9,"endColumn":61},{"ruleId":"386","severity":1,"message":"401","line":30,"column":6,"nodeType":"388","endLine":30,"endColumn":8,"suggestions":"402"},{"ruleId":"326","severity":1,"message":"403","line":35,"column":11,"nodeType":"328","messageId":"329","endLine":35,"endColumn":12},{"ruleId":"356","severity":1,"message":"357","line":15,"column":59,"nodeType":"358","messageId":"336","endLine":15,"endColumn":61},{"ruleId":"326","severity":1,"message":"376","line":27,"column":9,"nodeType":"328","messageId":"329","endLine":27,"endColumn":19},{"ruleId":"337","severity":1,"message":"338","line":30,"column":9,"nodeType":"339","endLine":30,"endColumn":56},{"ruleId":"337","severity":1,"message":"338","line":92,"column":9,"nodeType":"339","endLine":97,"endColumn":10},{"ruleId":"326","severity":1,"message":"403","line":137,"column":17,"nodeType":"328","messageId":"329","endLine":137,"endColumn":18},{"ruleId":"326","severity":1,"message":"403","line":164,"column":13,"nodeType":"328","messageId":"329","endLine":164,"endColumn":14},{"ruleId":"326","severity":1,"message":"404","line":3,"column":17,"nodeType":"328","messageId":"329","endLine":3,"endColumn":28},{"ruleId":"326","severity":1,"message":"385","line":4,"column":10,"nodeType":"328","messageId":"329","endLine":4,"endColumn":18},{"ruleId":"326","severity":1,"message":"368","line":8,"column":10,"nodeType":"328","messageId":"329","endLine":8,"endColumn":15},{"ruleId":"337","severity":1,"message":"338","line":165,"column":21,"nodeType":"339","endLine":165,"endColumn":176},{"ruleId":"337","severity":1,"message":"338","line":174,"column":29,"nodeType":"339","endLine":174,"endColumn":83},{"ruleId":"337","severity":1,"message":"338","line":289,"column":17,"nodeType":"339","endLine":289,"endColumn":172},{"ruleId":"326","severity":1,"message":"354","line":3,"column":43,"nodeType":"328","messageId":"329","endLine":3,"endColumn":48},{"ruleId":"326","severity":1,"message":"368","line":8,"column":10,"nodeType":"328","messageId":"329","endLine":8,"endColumn":15},{"ruleId":"356","severity":1,"message":"357","line":12,"column":59,"nodeType":"358","messageId":"336","endLine":12,"endColumn":61},{"ruleId":"326","severity":1,"message":"392","line":13,"column":9,"nodeType":"328","messageId":"329","endLine":13,"endColumn":14},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"@typescript-eslint/no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'canLoad' is assigned a value but never used.","'confirmShow' is assigned a value but never used.","'setConfirmShow' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'App' is defined but never used.","'resetFileSystem' is defined but never used.","'loaderservice' is defined but never used.","'path' is defined but never used.","'removeSlash' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'IpfsHttpClient' is defined but never used.","'gitservice' is defined but never used.","'git' is defined but never used.","'fileStatuses' is defined but never used.","'result' is assigned a value but never used.","'Utils' is defined but never used.","'toast' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'faFolderPlus' is defined but never used.","'faFolderMinus' is defined but never used.","'faFileAlt' is defined but never used.","'render' is assigned a value but never used.","'fileservice' is defined but never used.","'localipfsstorage' is defined but never used.","'clearAll' is assigned a value but never used.","'Suspense' is defined but never used.","'boxconnected' is assigned a value but never used.","'async' is defined but never used.","'isForOfStatement' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'sortbydirectorylevel' is assigned a value but never used.","'client' is defined but never used.","'diffFile' is assigned a value but never used.","'giteditButton' is assigned a value but never used.","'getUrlLink' is assigned a value but never used.","'Button' is defined but never used.",["405"],["406"],"'useEffect' is defined but never used.","'mock' is assigned a value but never used.","'setMock' is assigned a value but never used.","'GitBranch' is defined but never used.","'GitLog' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'host', 'port', 'protocol', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["407"],"'resolve' is assigned a value but never used.","'reject' is assigned a value but never used.","'files' is assigned a value but never used.","'marked' is defined but never used.","'env' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useBehaviorSubject' is defined but never used.","'setConfig' is defined but never used.","React Hook useEffect has a missing dependency: 'checkconfig'. Either include it or remove the dependency array.",["408"],"'r' is assigned a value but never used.","'ChangeEvent' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},"Update the dependencies array to be: [host, port, protocol, url]",{"range":"413","text":"414"},"Update the dependencies array to be: [checkconfig]",{"range":"415","text":"416"},[1883,1885],"[host, port, protocol, url]",[952,954],"[checkconfig]"]